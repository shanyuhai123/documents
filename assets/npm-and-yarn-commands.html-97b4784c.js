import{_ as o,M as r,p as l,q as c,a1 as p,R as s,t as n,N as t}from"./framework-e3e34937.js";const i={},d={href:"https://github.com/vuejs/vue-next/blob/master/scripts/checkYarn.js",target:"_blank",rel:"noopener noreferrer"},u={href:"https://docs.npmjs.com/cli/v6/commands/npm-run-script#description",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.npmjs.com/package/@vitejs/create-app",target:"_blank",rel:"noopener noreferrer"},m={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://docs.npmjs.com/cli/v7/commands/npm-dist-tag",target:"_blank",rel:"noopener noreferrer"};function h(b,a){const e=r("ExternalLinkIcon");return l(),c("div",null,[a[29]||(a[29]=p(`<h1 id="简单聊聊-npm-和-yarn-的命令" tabindex="-1"><a class="header-anchor" href="#简单聊聊-npm-和-yarn-的命令" aria-hidden="true">#</a> 简单聊聊 NPM 和 YARN 的命令</h1><h2 id="熟悉而又陌生的-npx" tabindex="-1"><a class="header-anchor" href="#熟悉而又陌生的-npx" aria-hidden="true">#</a> 熟悉而又陌生的 npx</h2><p><code>npx</code> 是 <code>npm v5.2.0</code> 版本引入的工具，其可以快速体验想要尝试的包而不必执行 <code>npm init</code>、<code>npm install</code>、<code>配置 scripts</code> 等步骤。</p><p>默认情况下，它会去检查包是否存在（<code>node_modules/.bin</code> 及环境变量 <code>$PATH</code>），如果存在则执行，不存在则临时安装再运行。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看指令的帮助信息</span>
npx <span class="token parameter variable">-h</span>
</code></pre></div><h3 id="_1-常见的作用" tabindex="-1"><a class="header-anchor" href="#_1-常见的作用" aria-hidden="true">#</a> 1. 常见的作用</h3><ol><li>避免与全局包冲突，可以测试新的版本</li><li>可直接测试 github 上的模块</li></ol><h3 id="_2-配合参数" tabindex="-1"><a class="header-anchor" href="#_2-配合参数" aria-hidden="true">#</a> 2. 配合参数</h3><ol><li><code>--no-install</code>：强制使用本地模块，不存在则报错</li><li><code>--ignore-existing</code>：强制使用远程模块</li></ol><h2 id="认识一下-yarn" tabindex="-1"><a class="header-anchor" href="#认识一下-yarn" aria-hidden="true">#</a> 认识一下 yarn</h2><blockquote><p>现在一些包默认都使用 <code>yarn</code> 了。</p></blockquote><h3 id="_1-强制使用-yarn" tabindex="-1"><a class="header-anchor" href="#_1-强制使用-yarn" aria-hidden="true">#</a> 1. 强制使用 yarn</h3>`,12)),s("p",null,[a[1]||(a[1]=n("该脚本来自于 ")),s("a",d,[a[0]||(a[0]=n("Vue")),t(e)]),a[2]||(a[2]=n("："))]),a[30]||(a[30]=p(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">yarn\\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_execpath <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>
    <span class="token string">&#39;\\u001b[33mThis repository requires Yarn 1.x for scripts to work properly.\\u001b[39m\\n&#39;</span>
  <span class="token punctuation">)</span>
  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>配合上 <code>package.json</code> 的 <code>preinstall</code> 生命周期：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;preinstall&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node ./scripts/checkYarn.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这样就大功告成了。</p><h3 id="_2-关于-link-的限制" tabindex="-1"><a class="header-anchor" href="#_2-关于-link-的限制" aria-hidden="true">#</a> 2. 关于 link 的限制</h3><p><code>yarn link</code> 并不像 <code>npm link</code> 一样可以全局使用，需要安装到指定文件夹下才可使用，当然也是有一定的方法的：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;link:add&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn global add file:$(pwd)&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>执行 <code>yarn link:add</code> 即可。</p><h2 id="npm-的传参" tabindex="-1"><a class="header-anchor" href="#npm-的传参" aria-hidden="true">#</a> npm 的传参</h2><p>常见的命令行传参是这样：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># POSIX 风格</span>
<span class="token function">npm</span> <span class="token parameter variable">-h</span>
<span class="token comment"># GNU 风格</span>
<span class="token function">npm</span> <span class="token parameter variable">--help</span>
<span class="token comment"># 或许你还见过 Java 风格的，那简直是异教徒！</span>
</code></pre></div>`,11)),s("p",null,[a[4]||(a[4]=n("很明显这个参数都是传递给 ")),a[5]||(a[5]=s("code",null,"npm",-1)),a[6]||(a[6]=n(" 的，而在使用 ")),a[7]||(a[7]=s("code",null,"npm run",-1)),a[8]||(a[8]=n(" 时我们实际希望使用的时 ")),a[9]||(a[9]=s("code",null,"package.json",-1)),a[10]||(a[10]=n(" 中 ")),a[11]||(a[11]=s("code",null,"scripts",-1)),a[12]||(a[12]=n(" 的命令，为了让参数传递到下层，那么自然需要一些")),s("a",u,[a[3]||(a[3]=n("手段")),t(e)]),a[13]||(a[13]=n("："))]),a[31]||(a[31]=p(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run <span class="token builtin class-name">test</span> -- <span class="token parameter variable">--grep</span><span class="token operator">=</span><span class="token string">&quot;pattern&quot;</span>
</code></pre></div><p>在正常的传参前增加 <code>--</code> 即可达成。</p><h2 id="从模板到-create-命令" tabindex="-1"><a class="header-anchor" href="#从模板到-create-命令" aria-hidden="true">#</a> 从模板到 create 命令</h2><p>常常会根据模板创建项目：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># yarn</span>
<span class="token function">yarn</span> create example-app <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span>

<span class="token comment"># npm</span>
<span class="token function">npm</span> create example-app <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span>

<span class="token comment"># npx</span>
npx create-example-app <span class="token operator">&lt;</span>project-name<span class="token operator">&gt;</span>
</code></pre></div><h3 id="_1-查看帮助" tabindex="-1"><a class="header-anchor" href="#_1-查看帮助" aria-hidden="true">#</a> 1. 查看帮助</h3><p>简单看下 <code>create</code> 命令该怎么用。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看帮助</span>
<span class="token function">npm</span> create <span class="token parameter variable">-h</span>

<span class="token comment"># 输出</span>
<span class="token function">npm</span> init <span class="token punctuation">[</span>--force<span class="token operator">|</span>-f<span class="token operator">|</span>--yes<span class="token operator">|</span>-y<span class="token operator">|</span>--scope<span class="token punctuation">]</span>
<span class="token function">npm</span> init <span class="token operator">&lt;</span>@scope<span class="token operator">&gt;</span> <span class="token punctuation">(</span>same as <span class="token variable"><span class="token variable">\`</span>npx <span class="token operator">&lt;</span>@scope<span class="token operator">&gt;</span>/create<span class="token variable">\`</span></span><span class="token punctuation">)</span>
<span class="token function">npm</span> init <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">&gt;</span>/<span class="token punctuation">]</span><span class="token operator">&lt;</span>name<span class="token operator">&gt;</span> <span class="token punctuation">(</span>same as <span class="token variable"><span class="token variable">\`</span>npx <span class="token punctuation">[</span><span class="token operator">&lt;</span>@scope<span class="token operator">&gt;</span>/<span class="token punctuation">]</span>create-<span class="token operator">&lt;</span>name<span class="token operator">&gt;</span><span class="token variable">\`</span></span><span class="token punctuation">)</span>

aliases: create, innit
</code></pre></div><p>可以发现是 <code>init</code> 的别名，过去常用 <code>npm init -y</code> 来生成 <code>package.json</code>，这是因为匹配到了第一项；而在后面添加 <code>name</code> 时，则匹配到了其他项。</p><h3 id="_2-一个小测试" tabindex="-1"><a class="header-anchor" href="#_2-一个小测试" aria-hidden="true">#</a> 2. 一个小测试</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> create some-example-app

<span class="token comment"># npm ERR! 404  &#39;create-some-example-app@latest&#39; is not in the npm registry.</span>
</code></pre></div><p>提示是 <code>create-some-example-app@latest</code>，再回顾下前面的查看帮助，可以发现是在前面增加了 <code>create</code> 字段。</p>`,12)),s("p",null,[a[15]||(a[15]=n("那我们常用的 ")),a[16]||(a[16]=s("code",null,"yarn create @vitejs/app",-1)),a[17]||(a[17]=n(" 呢？前往 ")),a[18]||(a[18]=s("code",null,"npm",-1)),a[19]||(a[19]=n(" 可以看到有一个 ")),s("a",k,[a[14]||(a[14]=n("@vitejs/create-app")),t(e)]),a[20]||(a[20]=n("，符合查看帮助的最后一项。"))]),a[32]||(a[32]=s("h2",{id:"版本",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#版本","aria-hidden":"true"},"#"),n(" 版本")],-1)),s("p",null,[a[22]||(a[22]=n("一个标准的版本号：")),a[23]||(a[23]=s("code",null,"MAJOR.MINOR.PATCH",-1)),a[24]||(a[24]=n("，版本规范参考 ")),s("a",m,[a[21]||(a[21]=n("semver")),t(e)]),a[25]||(a[25]=n("。"))]),a[33]||(a[33]=p(`<p>除此外还有先行版本，格式为 <code>MAJOR.MINOR.PATCH-FLAG.N</code>，<code>FLAG</code> 常见的有 <code>alpha(内测)</code>、<code>beta</code>，在 Vue 中又认识了 <code>rc</code>。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> version prerelease <span class="token parameter variable">--preid</span><span class="token operator">=</span>alpha
</code></pre></div><h3 id="_1-打-tag" tabindex="-1"><a class="header-anchor" href="#_1-打-tag" aria-hidden="true">#</a> 1. 打 tag</h3><p>即使你的版本是 <code>-alpha.0</code> 的先行版本，你在发布时直接指定为 <code>npm publish</code>，默认也是 <code>latest</code> 的标签，这会作为最新版被用户下载。</p>`,4)),s("p",null,[a[27]||(a[27]=n("如果发错了标签不用担心，可以使用 ")),s("a",g,[a[26]||(a[26]=n("npm dist-tag")),t(e)]),a[28]||(a[28]=n(" 进行修复："))]),a[34]||(a[34]=p(`<div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> dist-tag <span class="token function">add</span> some-package@1.1.0-beta.0 beta
<span class="token function">npm</span> dist-tag <span class="token function">add</span> some-package@1.0.0 latest
</code></pre></div><h3 id="_2-配合-git" tabindex="-1"><a class="header-anchor" href="#_2-配合-git" aria-hidden="true">#</a> 2. 配合 git</h3><p>一般我们还会根据 version 变更打标签推送到 <code>git</code>：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># major、minor、patch</span>
<span class="token comment"># premajor、preminor、prepatch、prerelease --preid=&lt;alpha|beta|rc&gt;</span>
<span class="token function">npm</span> version patch <span class="token parameter variable">-m</span> <span class="token string">&quot;chore: 发布 tag %s&quot;</span>
</code></pre></div>`,4))])}const x=o(i,[["render",h],["__file","npm-and-yarn-commands.html.vue"]]);export{x as default};
