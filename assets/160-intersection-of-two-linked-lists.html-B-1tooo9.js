import{_ as a,c as n,a as p,o as e}from"./app-DNXRdI82.js";const t={};function o(l,s){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="相交链表" tabindex="-1"><a class="header-anchor" href="#相交链表"><span>相交链表</span></a></h1><p>这种题目都可以用哈希表来方便解决，但追求常量空间解决方案时则难度加倍。</p><h2 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针"><span>双指针</span></a></h2><p>这个很有意思，交换式：<code>a + c + b === b + c + a</code></p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>headA<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> headB<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>headA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> headB <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> pa<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> headA<span class="token punctuation">,</span> pb<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> headB</span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span>pa <span class="token operator">!==</span> pb<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    pa <span class="token operator">=</span> pa <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headB <span class="token operator">:</span> pa<span class="token punctuation">.</span>next</span>
<span class="line">    pb <span class="token operator">=</span> pb <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headA <span class="token operator">:</span> pb<span class="token punctuation">.</span>next</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> pa</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,5)]))}const r=a(t,[["render",o],["__file","160-intersection-of-two-linked-lists.html.vue"]]),i=JSON.parse('{"path":"/algorithms/160-intersection-of-two-linked-lists.html","title":"相交链表","lang":"zh-CN","frontmatter":{"autoSort":-160},"headers":[{"level":2,"title":"双指针","slug":"双指针","link":"#双指针","children":[]}],"git":{"updatedTime":1635004323000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/160-intersection-of-two-linked-lists.md"}');export{r as comp,i as data};
