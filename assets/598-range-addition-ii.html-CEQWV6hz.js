import{_ as s,c as a,a as p,o as t}from"./app-CQrWi6O2.js";const o={};function e(c,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="范围求和" tabindex="-1"><a class="header-anchor" href="#范围求和"><span>范围求和</span></a></h1><h2 id="交集" tabindex="-1"><a class="header-anchor" href="#交集"><span>交集</span></a></h2><p>由于总是从 <code>(0, 0)</code> 开始，所以判断会简单一些。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">maxCount</span><span class="token punctuation">(</span>m<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> ops<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> x <span class="token operator">=</span> m<span class="token punctuation">,</span> y <span class="token operator">=</span> n</span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> op <span class="token keyword">of</span> ops<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    x <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    y <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> op<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> x <span class="token operator">*</span> y</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,4)])])}const i=s(o,[["render",e]]),u=JSON.parse('{"path":"/algorithms/598-range-addition-ii.html","title":"范围求和","lang":"zh-CN","frontmatter":{"autoSort":-598},"headers":[{"level":2,"title":"交集","slug":"交集","link":"#交集","children":[]}],"git":{"updatedTime":1638028306000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/598-range-addition-ii.md"}');export{i as comp,u as data};
