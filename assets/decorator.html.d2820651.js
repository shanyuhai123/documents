import{r as n,o as s,c as a,a as t,b as p,F as o,d as c,e}from"./app.a242ecf4.js";const u={},l=t("h2",{id:"前言",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),c(" 前言")],-1),i=c("一直以来对 "),k={href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",target:"_blank",rel:"noopener noreferrer"},r=c("Class"),d=c(" 存在偏见，只做到简单了解，但在了解 "),g=t("code",null,"Decorator",-1),f=c(" 后我觉得 "),m=t("code",null,"Class",-1),b=c(" 又行了。"),y=c("以下内容介绍的是 "),h={href:"https://www.typescriptlang.org/docs/handbook/decorators.html",target:"_blank",rel:"noopener noreferrer"},w=c("TypeScript Decorator"),q=c("，与 "),D={href:"https://tc39.es/proposal-decorators/",target:"_blank",rel:"noopener noreferrer"},v=c("TC39 Decorator"),L=c(" 存在差别："),O=e('<div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 旧</span>\n<span class="token keyword">interface</span> <span class="token class-name">TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\n  enumerable<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  configurable<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  writable<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  value<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n  get<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">;</span>\n  set<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 新</span>\n<span class="token keyword">type</span> <span class="token class-name">Decorator</span> <span class="token operator">=</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> Input<span class="token punctuation">,</span> context<span class="token operator">:</span> <span class="token punctuation">{</span>\n  kind<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">;</span>\n  access<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    get<span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">;</span>\n    set<span class="token operator">?</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  isPrivate<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  isStatic<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  <span class="token function">defineMetadata</span><span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Output <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="decorator" tabindex="-1"><a class="header-anchor" href="#decorator" aria-hidden="true">#</a> Decorator</h2><h3 id="高阶函数" tabindex="-1"><a class="header-anchor" href="#高阶函数" aria-hidden="true">#</a> 高阶函数</h3><p>高阶函数只要满足参数或返回值为函数就可以称为高阶函数，一般情况下我们会同时满足这两点。</p><p>来看一个示例：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">hoc</span> <span class="token punctuation">(</span>func<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// before func exec</span>\n    <span class="token comment">// do something...</span>\n\n    <span class="token comment">// 拆分 return</span>\n    <span class="token keyword">const</span> f <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>\n\n    <span class="token comment">// after func exec</span>\n    <span class="token comment">// do something...</span>\n\n    <span class="token keyword">return</span> f\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">test</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> thoc <span class="token operator">=</span> <span class="token function">hoc</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n<span class="token function">thoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// test</span>\n</code></pre></div><h3 id="什么是装饰器" tabindex="-1"><a class="header-anchor" href="#什么是装饰器" aria-hidden="true">#</a> 什么是装饰器</h3>',7),P=c("装饰器就是一个函数，更推荐统一使用 "),_={href:"https://www.typescriptlang.org/docs/handbook/decorators.html#decorator-factories",target:"_blank",rel:"noopener noreferrer"},x=c("Decorator Factories"),A=c(" 形式："),G=e('<div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token comment">// 想想  Object.defineProperty(target,name,descriptor)</span>\n\n<span class="token keyword">function</span> <span class="token function">d1</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d1&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> d2 <span class="token operator">=</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d2&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">d3</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d3&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> d4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d4&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">d5</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d5 before&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d5&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> d6 <span class="token operator">=</span> <span class="token punctuation">(</span>message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d6 before&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">d6 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>message<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">d1</span></span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">d2</span></span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">d3</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">d4</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">d5</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">d6</span></span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// &quot;d5 before&quot;</span>\n<span class="token comment">// &quot;d6 before&quot;</span>\n<span class="token comment">// &quot;d6 hello world&quot;</span>\n<span class="token comment">// &quot;d5&quot;</span>\n<span class="token comment">// &quot;d4&quot;</span>\n<span class="token comment">// &quot;d3&quot;</span>\n<span class="token comment">// &quot;d2&quot;</span>\n<span class="token comment">// &quot;d1&quot;</span>\n</code></pre></div><p>以 <code>@ + 函数名</code> 对以下进行装饰：</p><ul><li>Class Decorators</li><li>Method Decorators</li><li>Accessor Decorators</li><li>Property Decorators</li><li>Parameter Decorators</li></ul><h3 id="装饰器执行" tabindex="-1"><a class="header-anchor" href="#装饰器执行" aria-hidden="true">#</a> 装饰器执行</h3><p>添加对以上情况的示例：</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">DecoratorClass</span> <span class="token punctuation">(</span>tip<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorClass </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> before</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorClass </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">DecoratorMethod</span> <span class="token punctuation">(</span>tip<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorMethod </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> before</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorMethod </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">DecoratorAccessor</span> <span class="token punctuation">(</span>tip<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorAccessor </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> before</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorAccessor </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">DecoratorProperty</span> <span class="token punctuation">(</span>tip<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorProperty </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> before</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorProperty </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">DecoratorParameter</span> <span class="token punctuation">(</span>tip<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token punctuation">{</span>\n  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorParameter </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> before</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">DecoratorParameter </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tip<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">DecoratorClass</span></span><span class="token punctuation">(</span><span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">DecoratorProperty</span></span><span class="token punctuation">(</span><span class="token string">&#39;p1&#39;</span><span class="token punctuation">)</span>\n  p1<span class="token operator">:</span> <span class="token builtin">string</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">DecoratorProperty</span></span><span class="token punctuation">(</span><span class="token string">&#39;static p2&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">static</span> p2<span class="token operator">:</span> <span class="token builtin">string</span>\n\n  <span class="token function">constructor</span> <span class="token punctuation">(</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">DecoratorParameter</span></span><span class="token punctuation">(</span><span class="token string">&#39;constructor p1 param&#39;</span><span class="token punctuation">)</span>\n    p1<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>p1 <span class="token operator">=</span> p1\n  <span class="token punctuation">}</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">DecoratorMethod</span></span><span class="token punctuation">(</span><span class="token string">&#39;m1&#39;</span><span class="token punctuation">)</span>\n  <span class="token function">m1</span> <span class="token punctuation">(</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">DecoratorParameter</span></span><span class="token punctuation">(</span><span class="token string">&#39;m1 p1 param&#39;</span><span class="token punctuation">)</span>\n    p1<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>p1 <span class="token operator">=</span> p1\n  <span class="token punctuation">}</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">DecoratorMethod</span></span><span class="token punctuation">(</span><span class="token string">&#39;static m2&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">static</span> <span class="token function">m2</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">DecoratorAccessor</span></span><span class="token punctuation">(</span><span class="token string">&#39;a1&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">get</span> <span class="token function">a1</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;Accessor&#39;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># 输出</span>\n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorProperty p1 before&quot;</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorProperty p1&quot;</span>,  Log: <span class="token punctuation">{</span><span class="token punctuation">}</span>,  <span class="token string">&quot;p1&quot;</span>,  undefined \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorMethod m1 before&quot;</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorParameter m1 p1 param before&quot;</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorParameter m1 p1 param&quot;</span>,  Log: <span class="token punctuation">{</span><span class="token punctuation">}</span>,  <span class="token string">&quot;m1&quot;</span>,  <span class="token number">0</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorMethod m1&quot;</span>,  Log: <span class="token punctuation">{</span><span class="token punctuation">}</span>,  <span class="token string">&quot;m1&quot;</span>,  <span class="token punctuation">{</span>\n  <span class="token string">&quot;writable&quot;</span><span class="token builtin class-name">:</span> true,\n  <span class="token string">&quot;enumerable&quot;</span><span class="token builtin class-name">:</span> false,\n  <span class="token string">&quot;configurable&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorAccessor a1 before&quot;</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorAccessor a1&quot;</span>,  Log: <span class="token punctuation">{</span><span class="token punctuation">}</span>,  <span class="token string">&quot;a1&quot;</span>,  <span class="token punctuation">{</span>\n  <span class="token string">&quot;enumerable&quot;</span><span class="token builtin class-name">:</span> false,\n  <span class="token string">&quot;configurable&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorProperty static p2 before&quot;</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorProperty static p2&quot;</span>,  class Log <span class="token punctuation">{</span>\n    constructor<span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        this.p1 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    m1<span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        this.p1 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    static <span class="token function-name function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    get <span class="token function-name function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin class-name">return</span> <span class="token string">&#39;Accessor&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>,  <span class="token string">&quot;p2&quot;</span>,  undefined \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorMethod static m2 before&quot;</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorMethod static m2&quot;</span>,  class Log <span class="token punctuation">{</span>\n    constructor<span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        this.p1 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    m1<span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        this.p1 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    static <span class="token function-name function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    get <span class="token function-name function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin class-name">return</span> <span class="token string">&#39;Accessor&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>,  <span class="token string">&quot;m2&quot;</span>,  <span class="token punctuation">{</span>\n  <span class="token string">&quot;writable&quot;</span><span class="token builtin class-name">:</span> true,\n  <span class="token string">&quot;enumerable&quot;</span><span class="token builtin class-name">:</span> false,\n  <span class="token string">&quot;configurable&quot;</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>\n<span class="token punctuation">}</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorClass class before&quot;</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorParameter constructor p1 param before&quot;</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorParameter constructor p1 param&quot;</span>,  class Log <span class="token punctuation">{</span>\n    constructor<span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        this.p1 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    m1<span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        this.p1 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    static <span class="token function-name function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    get <span class="token function-name function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin class-name">return</span> <span class="token string">&#39;Accessor&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>,  undefined,  <span class="token number">0</span> \n<span class="token punctuation">[</span>LOG<span class="token punctuation">]</span>: <span class="token string">&quot;DecoratorClass class&quot;</span>,  class Log <span class="token punctuation">{</span>\n    constructor<span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        this.p1 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    m1<span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        this.p1 <span class="token operator">=</span> p1<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    static <span class="token function-name function">m2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n    get <span class="token function-name function">a1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin class-name">return</span> <span class="token string">&#39;Accessor&#39;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>,  undefined,  undefined\n</code></pre></div><p>根据输出得到执行顺序：</p><ol><li>属性装饰器</li><li>方法参数装饰器</li><li>方法装饰器</li><li>访问器装饰器</li><li>静态属性装饰器</li><li>静态方法装饰器</li><li>构造方法参数装饰器</li><li>类装饰器</li></ol><h3 id="装饰器示例" tabindex="-1"><a class="header-anchor" href="#装饰器示例" aria-hidden="true">#</a> 装饰器示例</h3>',10),C=c("此处仅以 "),R={href:"https://github.com/jayphelps/core-decorators",target:"_blank",rel:"noopener noreferrer"},j=c("core-decorators"),F=c(" 中 "),M=t("code",null,"readonly",-1),$=c(" 示例："),S=e('<div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isDescriptor</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>desc <span class="token operator">||</span> <span class="token operator">!</span>desc<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;initializer&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;set&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">decorate</span><span class="token punctuation">(</span>handleDescriptor<span class="token punctuation">,</span> entryArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDescriptor</span><span class="token punctuation">(</span>entryArgs<span class="token punctuation">[</span>entryArgs<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">handleDescriptor</span><span class="token punctuation">(</span><span class="token operator">...</span>entryArgs<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">handleDescriptor</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token builtin">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span> entryArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">handleDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  descriptor<span class="token punctuation">.</span>writable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> descriptor<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token keyword">readonly</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">decorate</span><span class="token punctuation">(</span>handleDescriptor<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="reflect" tabindex="-1"><a class="header-anchor" href="#reflect" aria-hidden="true">#</a> Reflect</h2><p>看一下被编译的代码：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>\n<span class="token keyword">let</span> __decorate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__decorate<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> c <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length\n  <span class="token keyword">let</span> r <span class="token operator">=</span> c <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> target <span class="token operator">:</span> desc <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">:</span> desc\n  <span class="token keyword">let</span> d\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Reflect <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Reflect<span class="token punctuation">.</span>decorate <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    r <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 由此可以得出 装饰器自下而上 执行的原因</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> decorators<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> decorators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        r <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">:</span> c <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> r\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> c <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> r\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">d1</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d1&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">d2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;d2&#39;</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">)</span>\n<span class="token keyword">let</span> Log <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\nLog <span class="token operator">=</span> <span class="token function">__decorate</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token function">d1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">d2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">,</span> Log<span class="token punctuation">)</span>\n</code></pre></div>',4),T=c("使用了 "),z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect",target:"_blank",rel:"noopener noreferrer"},E=c("Reflect"),J=c("，"),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/%E6%AF%94%E8%BE%83_Reflect_%E5%92%8C_Object_%E6%96%B9%E6%B3%95",target:"_blank",rel:"noopener noreferrer"},I=c("比较 Reflect 和 Object 方法"),W=c("，注意其中利用 "),N={href:"https://rbuckton.github.io/reflect-metadata/",target:"_blank",rel:"noopener noreferrer"},U=c("reflect-metadata"),H=c(" 增强了了 "),K=t("code",null,"Reflect",-1),Q=c(" 功能， 关于 "),V=t("code",null,"Reflect",-1),X=c(" 的使用可以看下 "),Y={href:"https://github.com/inversify/InversifyJS",target:"_blank",rel:"noopener noreferrer"},Z=c("InversifyJS"),nn=c("。"),sn=t("h3",{id:"metadata",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#metadata","aria-hidden":"true"},"#"),c(" Metadata")],-1),an=t("p",null,"简单来说，可以通过装饰器来给类添加一些自定义的信息，然后通过反射将这些信息添加/提取出来。",-1);u.render=function(c,e){const u=n("OutboundLink");return s(),a(o,null,[l,t("p",null,[i,t("a",k,[r,p(u)]),d,g,f,m,b]),t("p",null,[y,t("a",h,[w,p(u)]),q,t("a",D,[v,p(u)]),L]),O,t("p",null,[P,t("a",_,[x,p(u)]),A]),G,t("p",null,[C,t("a",R,[j,p(u)]),F,M,$]),S,t("p",null,[T,t("a",z,[E,p(u)]),J,t("a",B,[I,p(u)]),W,t("a",N,[U,p(u)]),H,K,Q,V,X,t("a",Y,[Z,p(u)]),nn]),sn,an],64)};export{u as default};
