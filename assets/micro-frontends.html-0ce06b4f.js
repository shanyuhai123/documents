import{_ as n,M as i,p as o,q as t,Q as a,t as e,N as d,a1 as c}from"./framework-49860b1b.js";const h={},s=a("h1",{id:"微前端",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#微前端","aria-hidden":"true"},"#"),e(" 微前端")],-1),l={href:"https://micro-frontends.org/",target:"_blank",rel:"noopener noreferrer"},f=c('<h2 id="iframe" tabindex="-1"><a class="header-anchor" href="#iframe" aria-hidden="true">#</a> iframe</h2><p><code>iframe</code> 彻底隔绝了应用间的上下文：</p><ul><li>父子之间的网页链接是不同的，浏览器一刷新，<code>iframe</code> 中的状态就没了，后退、前进按钮无法使用</li><li>父子之间的 UI 难以同步，内嵌的 <code>iframe</code> 并不会自动调节宽高，而且通信困难</li><li>全局上下文完全隔离，内存变量不共享，则需要完成 <code>iframe</code> 之间的通信及变量同步设计</li><li>慢，每次进子应用，浏览器都需要重新完整加载资源</li></ul><h2 id="方案" tabindex="-1"><a class="header-anchor" href="#方案" aria-hidden="true">#</a> 方案</h2><h3 id="qiankun" tabindex="-1"><a class="header-anchor" href="#qiankun" aria-hidden="true">#</a> qiankun</h3><h3 id="emp" tabindex="-1"><a class="header-anchor" href="#emp" aria-hidden="true">#</a> emp</h3>',6);function m(_,u){const r=i("ExternalLinkIcon");return o(),t("div",null,[s,a("p",null,[e("随着前端业务场景越来越复杂，而"),a("a",l,[e("微前端"),d(r)]),e("这一概念则提供了一种解决方案。")]),f])}const x=n(h,[["render",m],["__file","micro-frontends.html.vue"]]);export{x as default};
