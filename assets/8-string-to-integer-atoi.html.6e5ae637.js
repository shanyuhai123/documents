import{e as n}from"./app.fdddc89c.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const a={},t=n(`<h1 id="\u5B57\u7B26\u4E32\u8F6C\u6362\u6574\u6570-atoi" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u8F6C\u6362\u6574\u6570-atoi" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u8F6C\u6362\u6574\u6570 (atoi)</h1><p>\u4E00\u5F00\u59CB\u5199\u4E86\u4E00\u5806\u5224\u65AD\uFF0C\u770B\u5230\u5B98\u65B9\u9898\u89E3\u5C31\u9ED8\u9ED8\u5220\u9664\u4E86\u539F\u7B54\u6848\uFF0C\u592A low \u4E86\u3002</p><h2 id="\u81EA\u52A8\u673A" tabindex="-1"><a class="header-anchor" href="#\u81EA\u52A8\u673A" aria-hidden="true">#</a> \u81EA\u52A8\u673A</h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">\u2018 \u2019</th><th style="text-align:center;">+/-</th><th style="text-align:center;">number</th><th style="text-align:center;">other</th></tr></thead><tbody><tr><td style="text-align:center;">start</td><td style="text-align:center;">start</td><td style="text-align:center;">signed</td><td style="text-align:center;">in_number</td><td style="text-align:center;">end</td></tr><tr><td style="text-align:center;">signed</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">in_number</td><td style="text-align:center;">end</td></tr><tr><td style="text-align:center;">in_number</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">in_number</td><td style="text-align:center;">end</td></tr><tr><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td></tr></tbody></table><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">enum</span> <span class="token constant">STATES</span> <span class="token punctuation">{</span>
  <span class="token constant">START</span><span class="token punctuation">,</span>
  <span class="token constant">SIGNED</span><span class="token punctuation">,</span>
  <span class="token constant">IN_NUMBER</span><span class="token punctuation">,</span>
  <span class="token constant">END</span>
<span class="token punctuation">}</span>

<span class="token keyword">enum</span> <span class="token constant">SIGNS</span> <span class="token punctuation">{</span>
  <span class="token constant">POSITIVE</span><span class="token punctuation">,</span>
  <span class="token constant">NEGATIVE</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> max <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span>
<span class="token keyword">const</span> min <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">AutoMaton</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> sign <span class="token operator">=</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span>
  <span class="token keyword">public</span> ans <span class="token operator">=</span> <span class="token number">0</span>

  <span class="token keyword">private</span> state <span class="token operator">=</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">START</span>
  <span class="token keyword">private</span> table <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">START</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">START</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">SIGNED</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">SIGNED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token function">getColIndex</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span>
    <span class="token keyword">return</span> <span class="token number">3</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">process</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getColIndex</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sign <span class="token operator">===</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span>
        <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ans<span class="token punctuation">,</span> max<span class="token punctuation">)</span>
        <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ans<span class="token punctuation">,</span> <span class="token operator">-</span>min<span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">SIGNED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>sign <span class="token operator">=</span> c <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span>
        <span class="token operator">?</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span>
        <span class="token operator">:</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">NEGATIVE</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> automaton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoMaton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    automaton<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>automaton<span class="token punctuation">.</span>sign <span class="token operator">===</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> automaton<span class="token punctuation">.</span>ans
<span class="token punctuation">}</span>
</code></pre></div>`,5);function p(o,e){return t}var k=s(a,[["render",p]]);export{k as default};
