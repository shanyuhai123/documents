import{_ as o,M as p,p as c,q as l,a1 as u,R as a,t,N as e}from"./framework-e3e34937.js";const i={},r={href:"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element",target:"_blank",rel:"noopener noreferrer"},d={href:"https://d3js.org/",target:"_blank",rel:"noopener noreferrer"},h={href:"http://wiki.jikexueyuan.com/project/d3wiki/introduction.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/shanyuhai123/d3-docs",target:"_blank",rel:"noopener noreferrer"};function g(q,n){const s=p("ExternalLinkIcon");return c(),l("div",null,[n[4]||(n[4]=u(`<h1 id="你好-d3" tabindex="-1"><a class="header-anchor" href="#你好-d3" aria-hidden="true">#</a> 你好 D3</h1><p>关于 D3 的一些笔记，使用较少易忘。</p><h2 id="始于svg" tabindex="-1"><a class="header-anchor" href="#始于svg" aria-hidden="true">#</a> 始于SVG</h2><p>可缩放矢量图形（Scalable Vector Graphics，SVG）是一种基于可扩展标记语言（XML），用于描述二维矢量图形的图形格式。</p><p><code>D3</code> 是一个可以基于数据来操作文档的 JavaScript 库。可以使用 HTML、CSS、SVG 以及 Canvas 来展示数据。</p><blockquote><p>配合 Vue 使用时常用 computed 属性，以数据驱动数据。</p></blockquote><h3 id="_1-svg" tabindex="-1"><a class="header-anchor" href="#_1-svg" aria-hidden="true">#</a> 1. svg</h3><p><code>svg</code> 元素（容器元素、结构元素）可以在文档内嵌套一个独立的 <code>svg</code> 片段，这个片段具有独立的视口和坐标系统。<code>svg</code> 嵌套时彼此的视口和坐标系统也独立。</p><p>其 <code>xmlns</code> 属性定义了命名空间，可以区别与 HTML 冲突的元素。</p><h3 id="_2-g" tabindex="-1"><a class="header-anchor" href="#_2-g" aria-hidden="true">#</a> 2. g</h3><p><code>g</code> 元素常用于对图形进行分组，添加到 <code>g</code> 元素上的变换会应用到所有的子元素上。</p><p>此外，最重要的一点是可以利用 <code>use</code> 来对元素进行复用。</p><h3 id="_3-path" tabindex="-1"><a class="header-anchor" href="#_3-path" aria-hidden="true">#</a> 3. path</h3><p><code>path</code> 是 SVG 基本形状中最强大的一个。</p><ol><li><p>移动（Move to，M）：</p><p><code>&lt;path d=&quot;M10 10&quot;/&gt;</code>。</p></li><li><p>划线（Line，L）：</p><p>简写，<code>H</code> 绘制水平线，<code>V</code> 绘制垂直线，<code>&lt;path d=&quot;M10 10 H 90 V 90 H 10 L 10 10&quot;/&gt;</code>。</p></li><li><p>闭合路径（Z）：</p><p><code>&lt;path d=&quot;M10 10 H 90 V 90 H 10 Z&quot; fill=&quot;transparent&quot; stroke=&quot;black&quot;/&gt;</code>。</p></li><li><p>曲线（C）：</p><p>三次贝塞尔曲线需要定义一个点和两个控制点，<code>&lt;path d=&quot;M10 10 C 20 20, 40 20, 50 10&quot; stroke=&quot;black&quot; fill=&quot;transparent&quot;/&gt;</code>。</p></li><li><p>更长的曲线（S）：</p><p>S 命令跟在一个 C 或 S 命令后面时，则它的第一个控制点会被假设为前一个命令曲线的第二个控制点的中心对称点。</p><p>同理可得二次贝塞尔曲线（Q）和对应的 （T）。</p></li><li><p>弧形（A）：</p><p>弧形可视为圆形或椭圆的一部分，<code>&lt;path d=&quot;M80 80 A 45 45, 0, 0, 0, 125 125 L 125 80 Z&quot; fill=&quot;green&quot;/&gt;</code>。</p></li></ol><h3 id="_3-basic-shapes" tabindex="-1"><a class="header-anchor" href="#_3-basic-shapes" aria-hidden="true">#</a> 3. basic shapes</h3><p><code>rect</code>、<code>circle</code>、<code>Ellipse</code>、<code>Line</code>、<code>Polyline</code>、<code>Path</code>。</p><h2 id="svg-样式" tabindex="-1"><a class="header-anchor" href="#svg-样式" aria-hidden="true">#</a> SVG 样式</h2><p>SVG 支持的样式方式与 CSS 相似：内联样式、内部样式表、外部样式表及表现属性。</p><h3 id="_1-内联样式" tabindex="-1"><a class="header-anchor" href="#_1-内联样式" aria-hidden="true">#</a> 1. 内联样式</h3><p>元素内部使用 style 属性即可。</p><h3 id="_2-内部样式表" tabindex="-1"><a class="header-anchor" href="#_2-内部样式表" aria-hidden="true">#</a> 2. 内部样式表</h3><p>内部样式定义在 <code>svg</code> 元素下的 <code>def</code> 元素中。</p><div class="language-css" data-ext="css"><pre class="language-css"><code>&lt;svg width=<span class="token string">&quot;200px&quot;</span> height=<span class="token string">&quot;200px&quot;</span> xmlns=&quot;<span class="token property">http</span><span class="token punctuation">:</span>//www.w3.org/2000/svg&gt;
  <span class="token selector">&lt;defs&gt;
    &lt;style type=&quot;text/css&quot;&gt;&lt;![CDATA[
      circle</span><span class="token punctuation">{</span>
          <span class="token property">fill</span><span class="token punctuation">:</span>#ccc
      <span class="token punctuation">}</span>
    ]]&gt;&lt;/style&gt;
  &lt;/defs&gt;
  &lt;circle cx=<span class="token string">&quot;10&quot;</span> cy=<span class="token string">&quot;10&quot;</span> r=<span class="token string">&quot;5&quot;</span>/&gt;
&lt;/svg&gt;
</code></pre></div><h3 id="_3-外部样式表" tabindex="-1"><a class="header-anchor" href="#_3-外部样式表" aria-hidden="true">#</a> 3. 外部样式表</h3><p>样式定义在 CSS 文件中，使用选择器来设置相应的样式。</p><h3 id="_4-表现属性" tabindex="-1"><a class="header-anchor" href="#_4-表现属性" aria-hidden="true">#</a> 4. 表现属性</h3><p>以属性的形式指定样式，但是优先级最低，易被其余样式方式覆盖。</p><h2 id="d3-概念" tabindex="-1"><a class="header-anchor" href="#d3-概念" aria-hidden="true">#</a> D3 概念</h2><p>随着代码量的增多，越来越理解到设计理念的区别，一如 jQuery 的 DOM 操作，一如 MVVM 框架的数据驱动，理解了这些概念再学习起来才算是找到了门路。</p><p>然而一般只有熟悉某一个后才能切身体会到它的设计理念，所以目前关于其概念为空。</p><h3 id="_1-选择集-selections" tabindex="-1"><a class="header-anchor" href="#_1-选择集-selections" aria-hidden="true">#</a> 1. 选择集（Selections）</h3><p>与 jQuery 的 <code>$</code> 基本一致。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>d3
  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;.selection-binding&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 仅选中匹配的第一个元素</span>
  <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 选中所有匹配的元素</span>
  <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span> <span class="token comment">// 插入数据</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> d<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_2-enter-和-exit" tabindex="-1"><a class="header-anchor" href="#_2-enter-和-exit" aria-hidden="true">#</a> 2. enter 和 exit</h3><blockquote><p>其中留给人印象最深的莫过于这两个方法。</p></blockquote><p>在利用数据绑定时，可能出现 DOM 元素不匹配的问题。<code>enter</code> 操作用于添加新的 DOM 元素，<code>exit</code> 操作用于移除多余的 DOM 元素。</p><p>然而实际应用中，不可能先去统计元素的个数，记住以数据驱动的思想。</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;I’m number &quot;</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,40)),a("ol",null,[a("li",null,[a("a",r,[n[0]||(n[0]=t("SVG 元素")),e(s)])]),a("li",null,[a("a",d,[n[1]||(n[1]=t("D3js")),e(s)])]),a("li",null,[a("a",h,[n[2]||(n[2]=t("极客学院 D3")),e(s)])]),a("li",null,[a("a",k,[n[3]||(n[3]=t("d3-doc")),e(s)])])])])}const b=o(i,[["render",g],["__file","index.html.vue"]]);export{b as default};
