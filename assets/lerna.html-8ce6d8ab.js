import{_ as r,M as l,p,q as i,R as e,t as s,N as o,a1 as t}from"./framework-e3e34937.js";const d={},u={href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"},c={href:"https://en.wikipedia.org/wiki/Monorepo",target:"_blank",rel:"noopener noreferrer"},m={href:"https://classic.yarnpkg.com/blog/2018/02/15/nohoist/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/chinanf-boy/lerna-zh/blob/master/commands/bootstrap/README.zh.md#--nohoist-glob",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/lerna/lerna/blob/master/commands/publish#readme",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/lerna/lerna/blob/master/commands/version#readme",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/lerna/lerna/blob/master/commands/bootstrap#readme",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/lerna/lerna/blob/master/commands/list#readme",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/lerna/lerna/blob/master/commands/changed#readme",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/lerna/lerna/blob/master/commands/diff#readme",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/lerna/lerna/blob/master/commands/exec#readme",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/lerna/lerna/blob/master/commands/run#readme",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/lerna/lerna/blob/master/commands/init#readme",target:"_blank",rel:"noopener noreferrer"},j={href:"https://github.com/lerna/lerna/blob/master/commands/add#readme",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/lerna/lerna/blob/master/commands/clean#readme",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/lerna/lerna/blob/master/commands/import#readme",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/lerna/lerna/blob/master/commands/link#readme",target:"_blank",rel:"noopener noreferrer"},V={href:"https://github.com/lerna/lerna/blob/master/commands/create#readme",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/lerna/lerna/blob/master/commands/info#readme",target:"_blank",rel:"noopener noreferrer"};function B(M,n){const a=l("ExternalLinkIcon");return p(),i("div",null,[n[38]||(n[38]=e("h1",{id:"使用-lerna-维护关联的模块",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-lerna-维护关联的模块","aria-hidden":"true"},"#"),s(" 使用 Lerna 维护关联的模块")],-1)),e("blockquote",null,[n[2]||(n[2]=e("p",null,"Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.",-1)),e("p",null,[n[1]||(n[1]=s("-- ")),e("a",u,[n[0]||(n[0]=s("lerna")),o(a)])])]),e("p",null,[n[4]||(n[4]=s("对于维护多个 ")),n[5]||(n[5]=e("code",null,"package",-1)),n[6]||(n[6]=s(" 来说，都会遇到一个选择，是选择 ")),n[7]||(n[7]=e("code",null,"mono-repo",-1)),n[8]||(n[8]=s(" 还是 ")),n[9]||(n[9]=e("code",null,"multi-repo",-1)),n[10]||(n[10]=s("。")),n[11]||(n[11]=e("code",null,"multi-repo",-1)),n[12]||(n[12]=s(" 一个模块（module）一个仓库（repository），而 ")),n[13]||(n[13]=e("code",null,"mono-repo",-1)),n[14]||(n[14]=s(" 是所有模块整合在一个仓库，")),e("a",c,[n[3]||(n[3]=s("语义来源")),o(a)]),n[15]||(n[15]=s("。"))]),n[39]||(n[39]=t(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p><code>lerna</code> 初始化分为两种模式：<code>fix</code>（默认，锁定模式，项目内的所有 package 共用版本号）、<code>independent</code>（独立模式，每个 <code>package</code> 拥有独立版本号）。个人认为大部分情况下都应该使用独立模式，即每个 <code>package</code> 都有自己的版本号。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
<span class="token function">npm</span> i lerna <span class="token parameter variable">-g</span>

<span class="token comment"># git</span>
<span class="token function">git</span> init lerna-repo <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> lerna-repo

<span class="token comment"># lerna</span>
lerna init <span class="token punctuation">[</span>--independent<span class="token punctuation">]</span> <span class="token comment"># 生成下方文件夹</span>
<span class="token comment">#lerna-repo</span>
<span class="token comment">#├── lerna.json</span>
<span class="token comment">#├── package.json</span>
<span class="token comment">#└── packages</span>

<span class="token comment"># 创建 packages</span>
lerna create pkg-1 <span class="token parameter variable">-y</span>
lerna create pkg-2 <span class="token parameter variable">-y</span>
</code></pre></div><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><h3 id="_1-工具依赖" tabindex="-1"><a class="header-anchor" href="#_1-工具依赖" aria-hidden="true">#</a> 1. 工具依赖</h3><p>对于 <code>eslint</code>、<code>commit-lint</code> 等工具依赖，可以直接使用 <code>yarn</code> 或 <code>npm</code> 安装到顶层。</p><h3 id="_2-package-依赖" tabindex="-1"><a class="header-anchor" href="#_2-package-依赖" aria-hidden="true">#</a> 2. package 依赖</h3><p>针对 package 的依赖可以交由 <code>lerna</code> 安装。</p><ol><li><p>所有 packages</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>lerna <span class="token function">add</span> module1
</code></pre></div></li><li><p>单独 package</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>lerna <span class="token function">add</span> module1 packages/pkg-1
</code></pre></div></li><li><p>卸载</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 所有</span>
lerna <span class="token builtin class-name">exec</span> -- <span class="token string">&quot;yarn remove pkg-2&quot;</span>
<span class="token comment"># 指定</span>
lerna <span class="token builtin class-name">exec</span> <span class="token parameter variable">--scope</span><span class="token operator">=</span>pkg-1 <span class="token string">&quot;yarn remove pkg-2&quot;</span>
<span class="token comment"># 或使用空格替代 \`=\`</span>
lerna <span class="token builtin class-name">exec</span> <span class="token parameter variable">--scope</span> pkg-1 <span class="token string">&quot;yarn remove pkg-2&quot;</span>
</code></pre></div></li></ol><h3 id="_3-workspaces" tabindex="-1"><a class="header-anchor" href="#_3-workspaces" aria-hidden="true">#</a> 3. workspaces</h3><p>为了减少子模块的重复依赖可以使用 <code>workspaces</code> 将依赖提取到上级目录。</p><p>启用该模式非常简单：</p><ol><li><p>在 <code>lerna.json</code> 中添加 <code>&quot;useWorkspaces&quot;: true</code></p></li><li><p>在 <code>package.json</code> 中添加 <code>&quot;workspaces&quot;: [&quot;packages/*&quot;]</code></p><p>按照约定俗成将模块放置于 <code>packages</code> 目录下</p></li></ol>`,13)),e("p",null,[n[17]||(n[17]=s("有时候也会希望不同的模块走不同的依赖版本，这需要使用 ")),e("a",m,[n[16]||(n[16]=s("nohoist")),o(a)]),n[18]||(n[18]=s("："))]),n[40]||(n[40]=t(`<blockquote><p>注意，需要模块为 <code>private</code></p></blockquote><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;nohoist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/vue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/vue/**&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>也可以在模块中进行设置：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;nohoist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vue/**&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>`,4)),e("p",null,[n[20]||(n[20]=e("code",null,"lerna bootstrap",-1)),n[21]||(n[21]=s(" 也提供了参数 ")),e("a",k,[n[19]||(n[19]=s("--nohoist")),o(a)]),n[22]||(n[22]=s("。"))]),n[41]||(n[41]=e("h2",{id:"更多命令",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#更多命令","aria-hidden":"true"},"#"),s(" 更多命令")],-1)),e("ul",null,[e("li",null,[e("a",g,[n[23]||(n[23]=e("code",null,"lerna publish",-1)),o(a)])]),e("li",null,[e("a",b,[n[24]||(n[24]=e("code",null,"lerna version",-1)),o(a)])]),e("li",null,[e("a",f,[n[25]||(n[25]=e("code",null,"lerna bootstrap",-1)),o(a)])]),e("li",null,[e("a",h,[n[26]||(n[26]=e("code",null,"lerna list",-1)),o(a)])]),e("li",null,[e("a",q,[n[27]||(n[27]=e("code",null,"lerna changed",-1)),o(a)])]),e("li",null,[e("a",v,[n[28]||(n[28]=e("code",null,"lerna diff",-1)),o(a)])]),e("li",null,[e("a",x,[n[29]||(n[29]=e("code",null,"lerna exec",-1)),o(a)])]),e("li",null,[e("a",y,[n[30]||(n[30]=e("code",null,"lerna run",-1)),o(a)])]),e("li",null,[e("a",w,[n[31]||(n[31]=e("code",null,"lerna init",-1)),o(a)])]),e("li",null,[e("a",j,[n[32]||(n[32]=e("code",null,"lerna add",-1)),o(a)])]),e("li",null,[e("a",E,[n[33]||(n[33]=e("code",null,"lerna clean",-1)),o(a)])]),e("li",null,[e("a",N,[n[34]||(n[34]=e("code",null,"lerna import",-1)),o(a)])]),e("li",null,[e("a",L,[n[35]||(n[35]=e("code",null,"lerna link",-1)),o(a)])]),e("li",null,[e("a",V,[n[36]||(n[36]=e("code",null,"lerna create",-1)),o(a)])]),e("li",null,[e("a",z,[n[37]||(n[37]=e("code",null,"lerna info",-1)),o(a)])])])])}const R=r(d,[["render",B],["__file","lerna.html.vue"]]);export{R as default};
