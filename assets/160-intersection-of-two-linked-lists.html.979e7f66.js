import{e as a}from"./app.10cc9284.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const n={},p=a('<h1 id="相交链表" tabindex="-1"><a class="header-anchor" href="#相交链表" aria-hidden="true">#</a> 相交链表</h1><p>这种题目都可以用哈希表来方便解决，但追求常量空间解决方案时则难度加倍。</p><h2 id="双指针" tabindex="-1"><a class="header-anchor" href="#双指针" aria-hidden="true">#</a> 双指针</h2><p>这个很有意思，交换式：<code>a + c + b === b + c + a</code></p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>headA<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> headB<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>headA <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> headB <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">let</span> pa<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> headA<span class="token punctuation">,</span> pb<span class="token operator">:</span> ListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> headB\n  <span class="token keyword">while</span> <span class="token punctuation">(</span>pa <span class="token operator">!==</span> pb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    pa <span class="token operator">=</span> pa <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headB <span class="token operator">:</span> pa<span class="token punctuation">.</span>next\n    pb <span class="token operator">=</span> pb <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> headA <span class="token operator">:</span> pb<span class="token punctuation">.</span>next\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> pa\n<span class="token punctuation">}</span>\n</code></pre></div>',5);var o=s(n,[["render",function(a,s){return p}]]);export{o as default};
