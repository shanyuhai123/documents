import{_ as n,c as a,a as p,o as t}from"./app-BCSwjUcF.js";const o={};function e(c,s){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="转换成小写字母" tabindex="-1"><a class="header-anchor" href="#转换成小写字母"><span>转换成小写字母</span></a></h1><p>忽略 <code>toLowerCase()</code> 内置方法。</p><h2 id="ascii编码" tabindex="-1"><a class="header-anchor" href="#ascii编码"><span>ASCII编码</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token string">&#39;&#39;</span></span>
<span class="line">  <span class="token keyword">const</span> abs <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> min <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token string">&#39;Z&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> min <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      ret <span class="token operator">+=</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>c <span class="token operator">+</span> abs<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      ret <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> ret</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,4)]))}const i=n(o,[["render",e]]),r=JSON.parse('{"path":"/algorithms/709-to-lower-case.html","title":"转换成小写字母","lang":"zh-CN","frontmatter":{"autoSort":-709},"headers":[{"level":2,"title":"ASCII编码","slug":"ascii编码","link":"#ascii编码","children":[]}],"git":{"updatedTime":1639063017000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/709-to-lower-case.md"}');export{i as comp,r as data};
