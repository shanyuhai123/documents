import{r as n,c as a,a as s,b as p,F as t,d as e,e as o,o as c}from"./app.6ced18c8.js";import{_ as r}from"./plugin-vue_export-helper.5a098b48.js";const u={},l=s("h2",{id:"概念",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#概念","aria-hidden":"true"},"#"),e(" 概念")],-1),i=s("p",null,"运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。",-1),k=s("p",null,"虽然这句话是这么的直白，但总是会遗忘。",-1),d=s("h2",{id:"一次错误",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一次错误","aria-hidden":"true"},"#"),e(" 一次错误")],-1),h=e("来源于一个 15年（五年前）的"),f={href:"https://segmentfault.com/q/1010000002637728",target:"_blank",rel:"noopener noreferrer"},m=e("提问"),b=e("，没想到我第一反应还是错了。"),g=o('<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> \na<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>n<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; undefined</span>\n<span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; {n:2}</span>\n</code></pre></div><p>在这里我忽略了 <code>.</code> 的执行优先级是高于 <code>=</code> 操作的，也就是一开始 <code>a.x</code> 就指向了 <code>{n: 1}</code> 的 <code>heap 空间</code>，最后的结果也显而易见了。</p>',2);var x=r(u,[["render",function(e,o){const r=n("OutboundLink");return c(),a(t,null,[l,i,k,d,s("p",null,[h,s("a",f,[m,p(r)]),b]),g],64)}]]);export{x as default};
