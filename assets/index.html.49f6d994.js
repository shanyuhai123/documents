import{r as a,c as n,a as s,b as t,F as e,d as p,e as o,o as r}from"./app.7cae70c1.js";import{_ as c}from"./plugin-vue_export-helper.5a098b48.js";const l={},i=s("h1",{id:"版本控制工具-git",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#版本控制工具-git","aria-hidden":"true"},"#"),p(" 版本控制工具 Git")],-1),k=s("p",null,"版本控制可以记录文件的变化，方便快捷的查看、回退指定版本的内容。",-1),h=s("h2",{id:"git-生命周期",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#git-生命周期","aria-hidden":"true"},"#"),p(" Git 生命周期")],-1),u=p("随着使用你会渐渐加深对其生命周期的理解。 "),d=["src"],g=s("p",null,"Git 仓库中，工作目录下的每一个文件不外乎两种状态：未跟踪（Untracked）或已跟踪（Tracked）。",-1),m=s("p",null,"已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或存入暂存区。",-1),b=s("p",null,"工作目录中除已跟踪文件以外都属于未跟踪文件，它们即不存在于上次快照的记录中，也没有放入暂存区。",-1),f=s("p",null,"初次克隆某个仓库时，工作目录中所有的文件都属于已跟踪文件，并处于未修改状态。",-1),x=s("h2",{id:"git-状态模型",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#git-状态模型","aria-hidden":"true"},"#"),p(" Git 状态模型")],-1),y=s("p",null,"在状态模型中进行了更详细的说明。",-1),v=["src"],w=o('<p>关于上图一些概念的说明。</p><h3 id="_1-工作区-workspace" tabindex="-1"><a class="header-anchor" href="#_1-工作区-workspace" aria-hidden="true">#</a> 1. 工作区（workspace）：</h3><p>当前工作空间，即当前能在本地文件夹下面可以看到的文件结构。初始化工作空间或者工作空间 <code>clean</code> 的时候，文件内容和暂存区（index）是一致的，随着修改，工作区文件没有执行 <code>git add</code> 到暂存区的时候，工作区域将和暂存区不一致。</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># clean 状态</span>\n$ <span class="token function">git</span> status\n\n<span class="token comment">#On branch master</span>\n<span class="token comment">#nothing to commit, working tree clean</span>\n</code></pre></div><h3 id="_2-暂存区-index" tabindex="-1"><a class="header-anchor" href="#_2-暂存区-index" aria-hidden="true">#</a> 2. 暂存区（index）</h3><p>老版本的概念也叫 Cache 区，就是文件暂时存放的地方，所有暂时存放在暂存区中的文件将随着 <code>git commit</code> 一起提交到本地仓库（local repository），此时本地仓库的文件将会被暂存区所取代。</p><h3 id="_3-本地仓库-local-repository" tabindex="-1"><a class="header-anchor" href="#_3-本地仓库-local-repository" aria-hidden="true">#</a> 3. 本地仓库（local repository）</h3><p>git 是分布式版本控制系统，和其他版本控制系统不同的是他可以完全去中心化操作，你可以不用和远程仓库（remote repository）进行通信，在本地即可进行全部离线操作，包括 log、history、commit、diff 等。</p><p>能实现以上功能是由于 git 有一个几乎和远程一样的本地仓库。</p><p>所以离线操作都可以本地完成，等需要的时候再和远程仓库进行交互。</p><h3 id="_4-远程仓库-remote-repository" tabindex="-1"><a class="header-anchor" href="#_4-远程仓库-remote-repository" aria-hidden="true">#</a> 4. 远程仓库（remote repository）</h3><p>远程中心仓库，可使得仓库分享给其他人。结构大体和本地仓库一样。</p><h2 id="git-常用命令" tabindex="-1"><a class="header-anchor" href="#git-常用命令" aria-hidden="true">#</a> Git 常用命令</h2><p>Git 的操作指令非常多，此处仅选一些简单的日常操作。</p><h3 id="查看帮助" tabindex="-1"><a class="header-anchor" href="#查看帮助" aria-hidden="true">#</a> 查看帮助</h3><p>所有命令行最重要的当然是查看帮助文档：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token builtin class-name">help</span>\n</code></pre></div><p>结果：</p><div class="language-vim ext-vim"><pre class="language-vim"><code>用法：git <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">version</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">help</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>C <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">c</span> <span class="token operator">&lt;</span>名称<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>取值<span class="token operator">&gt;</span><span class="token punctuation">]</span>\n           <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token builtin">path</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>html<span class="token operator">-</span><span class="token builtin">path</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>man<span class="token operator">-</span><span class="token builtin">path</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>info<span class="token operator">-</span><span class="token builtin">path</span><span class="token punctuation">]</span>\n           <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">p</span> | <span class="token operator">-</span><span class="token operator">-</span>paginate | <span class="token operator">-</span><span class="token keyword">P</span> | <span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>pager<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>replace<span class="token operator">-</span>objects<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>bare<span class="token punctuation">]</span>\n           <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>git<span class="token operator">-</span><span class="token builtin">dir</span><span class="token operator">=</span><span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>work<span class="token operator">-</span>tree<span class="token operator">=</span><span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>namespace<span class="token operator">=</span><span class="token operator">&lt;</span>名称<span class="token operator">&gt;</span><span class="token punctuation">]</span>\n           <span class="token operator">&lt;</span>命令<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>参数<span class="token operator">&gt;</span><span class="token punctuation">]</span>\n\n这些是各种场合常见的 Git 命令：\n\n开始一个工作区（参见：git <span class="token keyword">help</span> tutorial）\n   clone      克隆仓库到一个新目录\n   init       创建一个空的 Git 仓库或重新初始化一个已存在的仓库\n\n在当前变更上工作（参见：git <span class="token keyword">help</span> everyday）\n   add        添加文件内容至索引\n   mv         移动或重命名一个文件、目录或符号链接\n   reset      重置当前 HEAD 到指定状态\n   rm         从工作区和索引中删除文件\n\n检查历史和状态（参见：git <span class="token keyword">help</span> revisions）\n   bisect     通过二分查找定位引入 bug 的提交\n   <span class="token keyword">grep</span>       输出和模式匹配的行\n   log        显示提交日志\n   show       显示各种类型的对象\n   status     显示工作区状态\n\n扩展、标记和调校您的历史记录\n   branch     列出、创建或删除分支\n   checkout   切换分支或恢复工作区文件\n   commit     记录变更到仓库\n   <span class="token builtin">diff</span>       显示提交之间、提交和工作区之间等的差异\n   merge      合并两个或更多开发历史\n   rebase     在另一个分支上重新应用提交\n   <span class="token keyword">tag</span>        创建、列出、删除或校验一个 GPG 签名的标签对象\n\n协同（参见：git <span class="token keyword">help</span> workflows）\n   fetch      从另外一个仓库下载对象和引用\n   pull       获取并整合另外的仓库或一个本地分支\n   push       更新远程引用和相关的对象\n\n命令 <span class="token string">&#39;git help -a&#39;</span> 和 <span class="token string">&#39;git help -g&#39;</span> 显示可用的子命令和一些概念帮助。\n查看 <span class="token string">&#39;git help &lt;命令&gt;&#39;</span> 或 <span class="token string">&#39;git help &lt;概念&gt;&#39;</span> 以获取给定子命令或概念的\n帮助。\n</code></pre></div><h3 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># 检查文件是否有更新</span>\n<span class="token function">git</span> status\n\n<span class="token comment"># 将新增的文件进行跟踪</span>\n<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n\n<span class="token comment"># 提交本次修改内容（请尽量详细），方便日后修改 bug 时快速定位</span>\n<span class="token comment"># 此处 commit 仅为示例，请修改为你项目的提交信息</span>\n<span class="token function">git</span> commit  -m<span class="token string">&quot;docs(git): 新增 git 简单使用&quot;</span>\n\n<span class="token comment"># 提交到仓库</span>\n<span class="token function">git</span> push\n</code></pre></div><h3 id="git-飞行规则" tabindex="-1"><a class="header-anchor" href="#git-飞行规则" aria-hidden="true">#</a> Git 飞行规则</h3>',22),G={href:"https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md",target:"_blank",rel:"noopener noreferrer"},_=p("Git飞行规则(Flight Rules)"),q=p(" 可以用来指导一些常见的问题。"),C=o('<h2 id="为-git-添加代理" tabindex="-1"><a class="header-anchor" href="#为-git-添加代理" aria-hidden="true">#</a> 为 Git 添加代理</h2><p>clone 大项目时总是乏力，下载速度极慢，这时就需要为其设置代理了。</p><h3 id="全局代理" tabindex="-1"><a class="header-anchor" href="#全局代理" aria-hidden="true">#</a> 全局代理</h3><p>该项可参考 alias 部分内容。</p><div class="language-bash ext-sh"><pre class="language-bash"><code>gfw\n</code></pre></div><h3 id="git-代理" tabindex="-1"><a class="header-anchor" href="#git-代理" aria-hidden="true">#</a> Git 代理</h3><p>在 Git 官网可获得提示 <code>http.proxy</code>，虽然在其余地方搜索还得到提示 <code>https.proxy</code>，但在官网并没有搜到对应内容，怀疑是误传。</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># 设置代理 </span>\n<span class="token function">git</span> config --global http.proxy <span class="token string">&#39;socks5://127.0.0.1:1080&#39;</span>\n<span class="token comment"># 取消代理</span>\n<span class="token function">git</span> config --global --unset http.proxy\n\n<span class="token comment"># 更好的形式当然是设置为 alias</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">proxygit</span><span class="token operator">=</span><span class="token string">&quot;git config --global http.proxy socks5://127.0.0.1:1080&quot;</span>\n<span class="token builtin class-name">alias</span> <span class="token assign-left variable">uproxygit</span><span class="token operator">=</span><span class="token string">&quot;git config --global --unset http.proxy&quot;</span>\n</code></pre></div><h3 id="git-代理协议的补充" tabindex="-1"><a class="header-anchor" href="#git-代理协议的补充" aria-hidden="true">#</a> Git 代理协议的补充</h3><p>git 代理支持多种协议：http、https、socks、socks5，本机通过 ss 启用了 socks5。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',11),j={href:"https://help.github.com/en",target:"_blank",rel:"noopener noreferrer"},B=p("Github"),E={href:"https://git-scm.com/book/zh/v2",target:"_blank",rel:"noopener noreferrer"},$=p("Git-scm"),z={href:"https://shafiul.github.io/gitbook/index.html",target:"_blank",rel:"noopener noreferrer"},A=p("shafiul Community Book");var D=c(l,[["render",function(p,o){const c=a("OutboundLink");return r(),n(e,null,[i,k,h,s("p",null,[u,s("img",{src:p.$withBase("/git/git-lifecycle.png"),alt:"git 概念图"},null,8,d)]),g,m,b,f,x,y,s("img",{src:p.$withBase("/git/git-state-model.png"),alt:"git 状态模型"},null,8,v),w,s("p",null,[s("a",G,[_,t(c)]),q]),C,s("ol",null,[s("li",null,[s("a",j,[B,t(c)])]),s("li",null,[s("a",E,[$,t(c)])]),s("li",null,[s("a",z,[A,t(c)])])])],64)}]]);export{D as default};
