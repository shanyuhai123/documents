import{_ as s,c as a,a as p,o as t}from"./app-DNXRdI82.js";const o={};function e(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="图片平滑器" tabindex="-1"><a class="header-anchor" href="#图片平滑器"><span>图片平滑器</span></a></h1><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">imageSmoother</span><span class="token punctuation">(</span>img<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> row <span class="token operator">=</span> img<span class="token punctuation">.</span>length<span class="token punctuation">,</span> col <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length</span>
<span class="line">  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>_ <span class="token operator">=&gt;</span> <span class="token function">Array</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> col<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> ri <span class="token operator">=</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> ri <span class="token operator">&lt;=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> ri<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> ci <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> ci <span class="token operator">&lt;=</span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> ci<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>ri <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ri <span class="token operator">&lt;</span> row <span class="token operator">&amp;&amp;</span> ci <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ci <span class="token operator">&lt;</span> col<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            ret<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span> img<span class="token punctuation">[</span>ri<span class="token punctuation">]</span><span class="token punctuation">[</span>ci<span class="token punctuation">]</span></span>
<span class="line">            count<span class="token operator">++</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      ret<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>ret<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">/</span> count<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> ret</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,3)]))}const u=s(o,[["render",e],["__file","661-image-smoother.html.vue"]]),i=JSON.parse('{"path":"/algorithms/661-image-smoother.html","title":"图片平滑器","lang":"zh-CN","frontmatter":{"autoSort":-661},"headers":[{"level":2,"title":"遍历","slug":"遍历","link":"#遍历","children":[]}],"git":{"updatedTime":1638452675000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/661-image-smoother.md"}');export{u as comp,i as data};
