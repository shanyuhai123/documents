import{r as n,o as s,c as a,a as t,b as e,F as o,d as p,e as c}from"./app.419290e0.js";const l={},i=t("h1",{id:"规范-git-提交信息并生成日志",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#规范-git-提交信息并生成日志","aria-hidden":"true"},"#"),p(" 规范 Git 提交信息并生成日志")],-1),r=t("h2",{id:"commit-规范化",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#commit-规范化","aria-hidden":"true"},"#"),p(" Commit 规范化")],-1),u=p("大家都使用 "),d={href:"https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0",target:"_blank",rel:"noopener noreferrer"},g=p("Angular 规范"),k=p("。"),h=c('<p>Commit message 包括三个部分：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span> <span class="token comment"># 必填</span>\n<span class="token operator">&lt;</span>BLANK LINE<span class="token operator">&gt;</span> <span class="token comment"># 空一行</span>\n<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span> <span class="token comment"># 可选</span>\n<span class="token operator">&lt;</span>BLANK LINE<span class="token operator">&gt;</span> <span class="token comment"># 空一行</span>\n<span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span> <span class="token comment"># 可选</span>\n</code></pre></div><ul><li><p>type：必填，<code>commit</code> 的类型</p><ul><li>feat：新功能</li><li>fix：修复 bug</li><li>docs：文档修改</li><li>style：格式修改，例如空格、分号等</li><li>refactor：不增加功能也不修复 bug 的代码更改</li><li>perf：性能提升、交互优化</li><li>test：测试相关修改</li><li>build：外部依赖项的修改，如 gulp、npm</li><li>ci：ci 的修改</li><li>chore：关于构建项目相关的修改，非代码和测试</li><li>revert：版本回滚</li></ul></li><li><p>scope：选填，<code>commit</code> 的影响范围，常指定模块或文件名</p></li><li><p>subject：必填，<code>commit</code> 的简短描述</p></li><li><p>body：选填，<code>commit</code> 的详细描述</p></li><li><p>footer：选填，备注信息，通常是破坏性更新或关闭 Issue</p><div class="language-bash ext-sh"><pre class="language-bash"><code>BREAKING CHANGE: 变动的描述\nClose <span class="token comment">#ISSUE_ID</span>\nCloses <span class="token comment">#ISSUE_ID, #ISSUE_ID</span>\n</code></pre></div></li></ul><h3 id="_1-模板" tabindex="-1"><a class="header-anchor" href="#_1-模板" aria-hidden="true">#</a> 1. 模板</h3>',4),m=p("提交信息最好在在"),b={href:"https://www.npmjs.com/package/commitizen",target:"_blank",rel:"noopener noreferrer"},q=p("模板"),v=p("的约束下："),f=c('<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">npm</span> i commitizen -D\n</code></pre></div><p>初始化适配器：</p><div class="language-bash ext-sh"><pre class="language-bash"><code>npx commitizen init cz-conventional-changelog --yarn --dev --exact\n</code></pre></div><p>在 <code>package.json</code> 中添加 <code>script</code>：</p><div class="language-json ext-json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz-conventional-changelog&quot;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>当执行 <code>yarn run commit</code> 就可以使用提交模板了。</p><h3 id="_2-强制规范" tabindex="-1"><a class="header-anchor" href="#_2-强制规范" aria-hidden="true">#</a> 2. 强制规范</h3>',7),y=p("为了在各种姿势使 commit 符合规范，"),x={href:"https://github.com/conventional-changelog/commitlint#readme",target:"_blank",rel:"noopener noreferrer"},j=p("校验"),_=p("是必要的。注意 "),E=t("strong",null,"husky v5",-1),A=p(" 配置有所"),I={href:"https://typicode.github.io/husky/#/?id=migrate-from-v4-to-v6",target:"_blank",rel:"noopener noreferrer"},D=p("更改"),G=p("。"),L=c('<p><strong>如何校验：</strong></p><ul><li><p>安装依赖</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">npm</span> i @commitlint/cli @commitlint/config-conventional -D\n</code></pre></div></li><li><p>指定校验模板</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot;</span> <span class="token operator">&gt;</span> commitlint.config.js\n</code></pre></div></li></ul><p><strong>何时校验：</strong></p><p>很明显需要在 <code>git commit</code> 前的生命周期内进行校验。</p><ul><li><p>安装 husky</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">npm</span> i husky -D\n</code></pre></div></li><li><p>拦截 git hook</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># Active hooks</span>\nnpx husky <span class="token function">install</span>\n\n<span class="token comment"># Add hook</span>\nnpx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&quot;npx --no-install commitlint --edit <span class="token variable">$1</span>&quot;</span>\n</code></pre></div></li><li><p>测试</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>\n<span class="token function">git</span> commit -m <span class="token string">&quot;hello husky&quot;</span>\n\n<span class="token comment"># 拦截</span>\n⧗   input: hello husky\n✖   subject may not be empty <span class="token punctuation">[</span>subject-empty<span class="token punctuation">]</span>\n✖   <span class="token builtin class-name">type</span> may not be empty <span class="token punctuation">[</span>type-empty<span class="token punctuation">]</span>\n</code></pre></div></li></ul><h2 id="生成-changelog" tabindex="-1"><a class="header-anchor" href="#生成-changelog" aria-hidden="true">#</a> 生成 CHANGELOG</h2><p>根据规则生成 CHANGELOG 的前提是 commit 规范化。</p>',7),N=p("首先安装"),C={href:"https://github.com/conventional-changelog/standard-version",target:"_blank",rel:"noopener noreferrer"},O=p("依赖"),z=p("，如果之前使用了其他模板，也应寻找对应的依赖。"),S=c('<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">npm</span> i standard-version -D\n</code></pre></div><p>在 <code>package.json</code> 中添加 <code>script</code>：</p><div class="language-json ext-json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;changelog&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard-version&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>执行 <code>npm run release</code> 得到的效果一般，那么自然希望加点料。</p><h3 id="_1-配置" tabindex="-1"><a class="header-anchor" href="#_1-配置" aria-hidden="true">#</a> 1. 配置</h3>',5),w=p("新增 "),H={href:"https://github.com/conventional-changelog/conventional-changelog-config-spec/blob/master/versions/2.1.0/README.md",target:"_blank",rel:"noopener noreferrer"},U=t("code",null,".versionrc.js",-1),B=p(" 文件："),F=c('<div class="language-javascript ext-js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&quot;header&quot;</span><span class="token operator">:</span> <span class="token string">&quot;# CHANGELOG\\n\\n这是一个有趣的 CHANGELOG。\\n\\n&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;feat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;section&quot;</span><span class="token operator">:</span> <span class="token string">&quot;✨ Features | 新功能&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fix&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;section&quot;</span><span class="token operator">:</span> <span class="token string">&quot;🐛 Fixes | Bug 修复&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> <span class="token string">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;perf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;section&quot;</span><span class="token operator">:</span> <span class="token string">&quot;🔥 Performance Improvements | 性能优化&quot;</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_2-指定版本" tabindex="-1"><a class="header-anchor" href="#_2-指定版本" aria-hidden="true">#</a> 2. 指定版本</h3><p>npm 命令传参需要使用 <code>--</code>：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">npm</span> run changelog -- --release-as <span class="token number">1.6</span>.0\n<span class="token comment"># 或</span>\n<span class="token function">npm</span> run changelog -- -r minor\n</code></pre></div><h3 id="_3-hash-链接" tabindex="-1"><a class="header-anchor" href="#_3-hash-链接" aria-hidden="true">#</a> 3. hash 链接</h3><p>这需要为项目添加 <code>git remote</code> 地址：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:yourname/project.git\n</code></pre></div><h2 id="代码校验" tabindex="-1"><a class="header-anchor" href="#代码校验" aria-hidden="true">#</a> 代码校验</h2><p>前面已经打好了铺垫，加上代码校验也是顺理成章的事情。</p>',9),K=p("一般代码校验只希望"),P={href:"https://www.npmjs.com/package/lint-staged",target:"_blank",rel:"noopener noreferrer"},R=p("校验更新的文件"),J=p("："),M=c('<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">npm</span> i lint-staged -D\n</code></pre></div><p>接着前往 <code>package.json</code> 增加 <code>lint-staged</code> 字段，以 vue-cli 创建的项目示例：</p><div class="language-json ext-json"><pre class="language-json"><code><span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token property">&quot;*.{js,jsx,vue,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;vue-cli-service lint&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;git add&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>而 husky 校验同样不在 <code>package.json</code> 中设置了：</p><div class="language-bash ext-sh"><pre class="language-bash"><code>npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npx --no-install lint-staged&quot;</span>\n</code></pre></div>',5),Q=p("如果还想加些什么，可以手动追加，例如 "),W={href:"https://github.com/stylelint/stylelint",target:"_blank",rel:"noopener noreferrer"},Y=p("stylelint"),$=p("。");l.render=function(p,c){const l=n("OutboundLink");return s(),a(o,null,[i,r,t("p",null,[u,t("a",d,[g,e(l)]),k]),h,t("p",null,[m,t("a",b,[q,e(l)]),v]),f,t("p",null,[y,t("a",x,[j,e(l)]),_,E,A,t("a",I,[D,e(l)]),G]),L,t("p",null,[N,t("a",C,[O,e(l)]),z]),S,t("p",null,[w,t("a",H,[U,e(l)]),B]),F,t("p",null,[K,t("a",P,[R,e(l)]),J]),M,t("p",null,[Q,t("a",W,[Y,e(l)]),$])],64)};export{l as default};
