import{r as n,o as s,c as a,a as e,F as t,d as p,b as o}from"./app.b9dc9220.js";const c={},l=p('<h2 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h2><p><code>Ubuntu20.04</code></p><h2 id="eth-netplan" tabindex="-1"><a class="header-anchor" href="#eth-netplan" aria-hidden="true">#</a> ETH netplan</h2><p>配置了 <code>/etc/network/interfaces</code> 发现并未生效，得知需要修改 <code>/etc/netplan</code> 的配置。</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/netplan/00-installer-config.yaml\n\n<span class="token comment"># 第一种</span>\nnetwork:\n  ethernets:\n    enp5s0:\n      addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.0.111/24<span class="token punctuation">]</span>\n      dhcp4: no\n      optional: <span class="token boolean">true</span>\n      gateway4: <span class="token number">192.168</span>.0.1\n      nameservers:\n        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5,223.6.6.6<span class="token punctuation">]</span>\n  version: <span class="token number">2</span>\n  \n<span class="token comment"># 第二种奇怪的配置，但是也很好用</span>\nnetwork:\n  ethernets:\n    enp5s0:\n      addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.0.111/24<span class="token punctuation">]</span>\n      dhcp4: <span class="token function">yes</span>\n  version: <span class="token number">2</span>\n<span class="token comment"># 第二种的 ip addr 结果</span>\ninet <span class="token number">192.168</span>.0.111/24 brd <span class="token number">192.168</span>.0.255 scope global enp5s0\nvalid_lft forever preferred_lft forever\ninet <span class="token number">192.168</span>.0.104/24 brd <span class="token number">192.168</span>.0.255 scope global secondary dynamic enp5s0\nvalid_lft 7199sec preferred_lft 7199sec\n</code></pre></div><p>使配置生效：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> netplan generate\n<span class="token function">sudo</span> netplan apply\n</code></pre></div><p>配置完后同段内的机器可以 ping 通，并通过 ssh 进一步测试。</p><h2 id="安装驱动" tabindex="-1"><a class="header-anchor" href="#安装驱动" aria-hidden="true">#</a> 安装驱动</h2><p>如果有 WIFI 网卡，则可跳过安装驱动。</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">ip</span> addr\n</code></pre></div><blockquote><p>折腾许久，才发现是 Linux 内核不支持老网卡。</p></blockquote><div class="language-bash ext-sh"><pre class="language-bash"><code>lshw -C network\n\n<span class="token comment"># 结果</span>\n*-network UNCLAIMED <span class="token comment"># 未识别       </span>\n       description: Network controller\n       product: BCM43142 <span class="token number">802</span>.11b/g/n\n       vendor: Broadcom Inc. and subsidiaries\n       physical id: <span class="token number">0</span>\n       bus info: pci@0000:04:00.0\n       version: 01\n       width: <span class="token number">64</span> bits\n       clock: 33MHz\n       capabilities: bus_master cap_list\n       configuration: <span class="token assign-left variable">latency</span><span class="token operator">=</span><span class="token number">0</span>\n       resources: memory:e3500000-e3507fff\n</code></pre></div><div class="language-text ext-text"><pre class="language-text"><code>sudo apt install firmware-b43-installer\n</code></pre></div>',14),r={href:"https://askubuntu.com/questions/765584/is-it-possible-to-use-broadcom-bcm43142-wifi-in-ubuntu-16-04",target:"_blank",rel:"noopener noreferrer"},i=o("解决方案"),d=o("："),u=p('<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> update\n<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> bcmwl-kernel-source\n\n<span class="token comment"># 修改黑名单</span>\n<span class="token function">sudo</span> gedit /etc/modprobe.d/blacklist.conf\n<span class="token comment"># 追加</span>\nblacklist b43\nblacklist bcma\nblacklist ssb\n</code></pre></div><p>如果还有问题，可能需要修改 BIOS 的 <code>secrety root</code> 为 <code>disabled</code>。</p><h2 id="wifi-netplan" tabindex="-1"><a class="header-anchor" href="#wifi-netplan" aria-hidden="true">#</a> WIFI netplan</h2><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/netplan/00-installer-config.yaml\n\n<span class="token comment"># 配置 wifi</span>\nwifis:\n    wlp4s0:\n      addresses: <span class="token punctuation">[</span><span class="token number">192.168</span>.0.122/24<span class="token punctuation">]</span>\n      dhcp4: <span class="token boolean">false</span>\n      optional: <span class="token boolean">true</span>\n      gateway4: <span class="token number">192.168</span>.0.1\n      nameservers:\n        addresses: <span class="token punctuation">[</span><span class="token number">223.5</span>.5.5,223.6.6.6<span class="token punctuation">]</span>\n      access-points:\n        <span class="token string">&quot;SSID&quot;</span><span class="token builtin class-name">:</span>\n          password: <span class="token string">&quot;password&quot;</span>\n</code></pre></div><p>接着还需要启用 WIFI：</p><blockquote><p>莫名奇妙测试出来的（也可能不用执行以下步骤），待后续正规化处理</p></blockquote><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl status netplan-wpa-wlp4s0.service <span class="token comment"># 根据你对应的 wifi 名称</span>\nsystemctl daemon-reload\n</code></pre></div>',7);c.render=function(p,o){const c=n("OutboundLink");return s(),a(t,null,[l,e("p",null,[e("a",r,[i,e(c)]),d]),u],64)};export default c;
