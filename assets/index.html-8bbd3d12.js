import{_ as i,M as n,p as l,q as t,a1 as s,R as r,t as p,N as d}from"./framework-e3e34937.js";const h={},o={href:"https://kubernetes.io/docs/home/",target:"_blank",rel:"noopener noreferrer"};function u(b,e){const a=n("ExternalLinkIcon");return l(),t("div",null,[e[2]||(e[2]=s('<h1 id="kubernetes" tabindex="-1"><a class="header-anchor" href="#kubernetes" aria-hidden="true">#</a> KUBERNETES</h1><h2 id="时光回溯" tabindex="-1"><a class="header-anchor" href="#时光回溯" aria-hidden="true">#</a> 时光回溯</h2><p>技术的升级是为了解决一些问题。</p><h3 id="传统部署时代" tabindex="-1"><a class="header-anchor" href="#传统部署时代" aria-hidden="true">#</a> 传统部署时代</h3><p>早期，在物理服务器上运行应用程序，无法为物理服务器中的应用程序定义边界，这会导致资源分配问题。例如，如果在物理服务器上运行多个应用程序，则可能出现一个应用程序占用大部分资源的情况，结果可能导致其他应用程序的性能下降。一种解决方案是在不同的服务器上运行每个程序，但是由于资源利用不足而无法扩展，并且维护许多物理服务器的成本很高。</p><h3 id="虚拟化部署时代" tabindex="-1"><a class="header-anchor" href="#虚拟化部署时代" aria-hidden="true">#</a> 虚拟化部署时代</h3><p>作为解决方案，引入了虚拟化。虚拟化技术允许你在单个物理服务器的 CPU 上运行多个虚拟机（VM）。虚拟化允许应用程序在 VM 之间隔离，并提供一定程度的安全，因为一个应用程序的信息不能被另一应用程序随意访问。</p><p>虚拟化技术能够更好地利用物理服务器上的资源，并且因为可轻松地添加或更新应用程序，而可以实现更好的可伸缩性，降低硬件成本等。</p><p>每个 VM 是一台完整的计算机，在虚拟化硬件之上运行所有组件，包括自己的操作系统。</p><h3 id="容器部署时代" tabindex="-1"><a class="header-anchor" href="#容器部署时代" aria-hidden="true">#</a> 容器部署时代</h3><p>容器类似于 VM，但是它们具有被放宽的隔离属性，可以在应用程序之间共享操作系统（OS）。</p><p>容器的一些好处：</p><ul><li>敏捷应用程序的创建和部署：与使用 VM 镜像相比，提高了容器镜像创建的简便性和效率</li><li>持续开发、集成和部署：通过快速简单的回滚（由于镜像的不可变性），支持可靠且频繁的容器镜像构建和部署</li><li>关注开发与运维的分离：在构建/发布时而不是在部署时创建应用程序容器镜像，从而将应用程序与基础架构分离</li><li>可观察性不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状况和其他指标信号</li><li>跨开发、测试和生产的环境一致性：在便携式计算机上与在云中相同地运行</li><li>跨云和操作系统发行版的可移植性：可在 Ubuntu、RHEL、CoreOS、本地和其他任何地方运行程序</li><li>以应用程序为中心的管理：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资源在 OS 上运行应用程序</li><li>松散耦合、分布式、弹性、解放的微服务：应用程序被分解成较小的独立部分，并且可以动态部署和管理，而不是在一台大型单机上整体运行</li><li>资源隔离：可预测的应用程序性能</li><li>资源利用：高效率和高密度</li></ul><h3 id="kubernetes-1" tabindex="-1"><a class="header-anchor" href="#kubernetes-1" aria-hidden="true">#</a> Kubernetes</h3><p>容器是打包和运行应用程序的好方式。在生产环境中，你需要管理运行应用程序的容器，并确保不会停机。例如，如果一个容器发生故障，则需要启动另一个容器。如果交由系统来处理此行为，会不会更容易？</p><p>Kubernetes 提供了：</p><ul><li><p>服务发现和负载均衡</p><p>Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果进入容器的流量很大，Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</p></li><li><p>存储编排</p><p>Kubernetes 允许你自动挂载你的存储系统，例如本地存储、公有云提供商等。</p></li><li><p>自动部署和回滚</p><p>你可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际的状态改为期望状态。例如，你可以自动化 Kubernetes 来为你的部署创建新容器，删除现有容器并将它们的所有资源用于新容器。</p></li><li><p>自动完成装箱计算</p><p>Kubernetes 允许你指定每个容器所需的 CPU 和 RAM。当容器指定了资源限制时，Kubernetes 可以做出更好的决策来管理容器的资源。</p></li><li><p>自我修复</p><p>Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</p></li><li><p>密钥与配置管理</p><p>Kubernetes 允许你存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。你可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在配置中暴露密钥。</p></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',18)),r("ol",null,[r("li",null,[r("a",o,[e[0]||(e[0]=p("kubernetes.io")),d(a)])]),e[1]||(e[1]=r("li",null,"《每天 5 分钟玩转 Kubernetes》",-1))])])}const f=i(h,[["render",u],["__file","index.html.vue"]]);export{f as default};
