import{_ as t,M as e,p as o,q as p,a1 as r,R as n,t as c,N as l}from"./framework-e3e34937.js";const i={},d={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTML_Drag_and_Drop_API",target:"_blank",rel:"noopener noreferrer"};function k(u,a){const s=e("ExternalLinkIcon");return o(),p("div",null,[a[1]||(a[1]=r(`<h1 id="html-拖放" tabindex="-1"><a class="header-anchor" href="#html-拖放" aria-hidden="true">#</a> HTML 拖放</h1><p><strong>HTML 拖放（Drag and Drop）</strong> 接口使应用程序能够在浏览器中使用拖放功能。例如，用户可以使用鼠标选择可拖拽（draggable）元素，将元素拖拽到可放置（droppable），并释放鼠标按钮以放置这些元素。拖拽操作期间，会有一个可拖拽元素的半透明快照跟随鼠标指针。</p><h2 id="事件" tabindex="-1"><a class="header-anchor" href="#事件" aria-hidden="true">#</a> 事件</h2><h3 id="应用于被拖拽的元素" tabindex="-1"><a class="header-anchor" href="#应用于被拖拽的元素" aria-hidden="true">#</a> 应用于被拖拽的元素</h3><ul><li><code>drag</code>：当拖拽元素时触发（每 100 毫秒触发一次）</li><li><code>dragstart</code>：当用户开始拖拽一个元素时触发（从操作系统向浏览器拖拽文件时，不会触发）</li><li><code>dragend</code>：当拖拽操作结束时触发（从操作系统向浏览器拖拽文件时，不会触发）</li></ul><h3 id="应用于目标元素" tabindex="-1"><a class="header-anchor" href="#应用于目标元素" aria-hidden="true">#</a> 应用于目标元素</h3><blockquote><p>被拖拽的元素区域也可监听以下事件</p></blockquote><ul><li><code>dragenter</code>：当拖拽到一个可释放目标时触发</li><li><code>dragover</code>：当元素被拖到一个可释放目标上时触发（每 100 毫秒触发一次）</li><li><code>drop</code>：当元素在可释放目标上被释放时触发</li><li><code>dragleave</code>：当鼠标离开目标元素时触发</li></ul><h3 id="阻止默认行为" tabindex="-1"><a class="header-anchor" href="#阻止默认行为" aria-hidden="true">#</a> 阻止默认行为</h3><ol><li>在 <code>dragover</code> 中，需要执行 <code>event.preventDefault()</code> 来阻止拖拽的默认操作，不知道这个默认操作是什么，但如果不阻止就不会触发 <code>drop</code> 事件</li><li>在 <code>drop</code> 中同样需要执行 <code>event.preventDefault()</code> 来阻止拖拽的默认操作，如在 Firefox 如果 data 是链接则会跳转</li></ol><h2 id="datatransfer" tabindex="-1"><a class="header-anchor" href="#datatransfer" aria-hidden="true">#</a> dataTransfer</h2><p>直接通过 TypeScript 查看定义，可以看到是在 <code>MouseEvent</code> 的基础上增加了 <code>dataTransfer</code> 属性：</p><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">DragEvent</span> <span class="token keyword">extends</span> <span class="token class-name">MouseEvent</span> <span class="token punctuation">{</span>
  <span class="token keyword">readonly</span> dataTransfer<span class="token operator">:</span> DataTransfer <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/** 
 * 用于保存拖放操作期间正在拖动的数据
 * 数据传递用全局变量不可以吗？如果仅在一个页面内拖东数据是没有问题的，但从桌面拖动到网页（或从网页拖动到桌面）则需要通过内置的 API。
 */</span>
<span class="token keyword">interface</span> <span class="token class-name">DataTransfer</span> <span class="token punctuation">{</span>
  <span class="token comment">/** 指定拖放操作所允许的一个效果 */</span>
  effectAllowed<span class="token operator">:</span> <span class="token string">&quot;none&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;copy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;copyLink&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;copyMove&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;link&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;linkMove&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;move&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;all&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;uninitialized&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">/** 属性控制在拖放操作中给用户的反馈（通常是视觉上的，可就是没啥用） */</span>
  dropEffect<span class="token operator">:</span> <span class="token string">&quot;none&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;copy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;link&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;move&quot;</span><span class="token punctuation">;</span>

  <span class="token comment">/** 拖动的文件列表 */</span>
  <span class="token keyword">readonly</span> files<span class="token operator">:</span> FileList<span class="token punctuation">;</span>
  <span class="token comment">/** 包含所有拖动数据列表的 DataTransferItemList 对象 */</span>
  <span class="token keyword">readonly</span> items<span class="token operator">:</span> DataTransferItemList<span class="token punctuation">;</span>
  <span class="token comment">/** 返回在 dragstart 事件中(setData)设置的拖动数据格式的数组 */</span>
  <span class="token keyword">readonly</span> types<span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

  <span class="token comment">/** 删除指定格式的数据。如果省略参数，则删除所有数据。 */</span>
  <span class="token function">clearData</span><span class="token punctuation">(</span>format<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token comment">/** 返回指定的数据。如果没有此类数据，则返回空字符串。 */</span>
  <span class="token function">getData</span><span class="token punctuation">(</span>format<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">/** 添加指定的数据。 */</span>
  <span class="token function">setData</span><span class="token punctuation">(</span>format<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token comment">/** 设置拖动图像 */</span>
  <span class="token function">setDragImage</span><span class="token punctuation">(</span>image<span class="token operator">:</span> Element<span class="token punctuation">,</span> x<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> y<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,14)),n("ul",null,[n("li",null,[n("a",d,[a[0]||(a[0]=c("HTML 拖放 API")),l(s)])])])])}const h=t(i,[["render",k],["__file","drag-and-drop.html.vue"]]);export{h as default};
