import{_ as n,c as a,a as p,o as t}from"./app-BCSwjUcF.js";const o={};function e(c,s){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="同构字符串" tabindex="-1"><a class="header-anchor" href="#同构字符串"><span>同构字符串</span></a></h1><h2 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表"><span>哈希表</span></a></h2><p>映射不一定相同，需要准备两个哈希表。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> sVal <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">const</span> tVal <span class="token operator">=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">const</span> msVal <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sVal<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> mtVal <span class="token operator">=</span> mt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tVal<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msVal <span class="token operator">!==</span> tVal <span class="token operator">&amp;&amp;</span> msVal <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>mtVal <span class="token operator">!==</span> sVal <span class="token operator">&amp;&amp;</span> mtVal <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    ms<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sVal<span class="token punctuation">,</span> tVal<span class="token punctuation">)</span></span>
<span class="line">    mt<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tVal<span class="token punctuation">,</span> sVal<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,4)]))}const i=n(o,[["render",e]]),u=JSON.parse('{"path":"/algorithms/205-isomorphic-strings.html","title":"同构字符串","lang":"zh-CN","frontmatter":{"autoSort":-205},"headers":[{"level":2,"title":"哈希表","slug":"哈希表","link":"#哈希表","children":[]}],"git":{"updatedTime":1635090570000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/205-isomorphic-strings.md"}');export{i as comp,u as data};
