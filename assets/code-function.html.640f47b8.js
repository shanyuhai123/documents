import{r as n,c as s,a,b as p,F as t,d as o,e,o as c}from"./app.2450e89d.js";import{_ as u}from"./plugin-vue_export-helper.5a098b48.js";const l={},r=a("h2",{id:"高阶",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#高阶","aria-hidden":"true"},"#"),o(" 高阶")],-1),k=a("h3",{id:"_1-ary-限制参数",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-ary-限制参数","aria-hidden":"true"},"#"),o(" 1. ary（限制参数）")],-1),i=a("p",null,[a("strong",null,"FROM")],-1),g={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},d=o("30 seconds of code (Function)"),f=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">ary</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> firstTwoMax <span class="token operator">=</span> <span class="token function">ary</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token function">firstTwoMax</span><span class="token punctuation">(</span><span class="token operator">...</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [6, 6, 10]</span>\n</code></pre></div><h3 id="_2-spreadover-展开" tabindex="-1"><a class="header-anchor" href="#_2-spreadover-展开" aria-hidden="true">#</a> 2. spreadOver（展开）</h3><p><strong>FROM</strong></p>',8),m={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},h=o("30 seconds of code (Function)"),v=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">spreadOver</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token parameter">argsArr</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>argsArr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> arrayMax <span class="token operator">=</span> <span class="token function">spreadOver</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">arrayMax</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre></div><h3 id="_3-attempt" tabindex="-1"><a class="header-anchor" href="#_3-attempt" aria-hidden="true">#</a> 3. attempt</h3><p><strong>FROM</strong></p>',8),w={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},b=o("30 seconds of code (Function)"),y=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">attempt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> e <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> e <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token function">attempt</span><span class="token punctuation">(</span><span class="token parameter">selector</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>\n<span class="token punctuation">,</span> <span class="token string">&#39;&gt;_&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>elements <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// elements = []</span>\n</code></pre></div><h3 id="_4-binary" tabindex="-1"><a class="header-anchor" href="#_4-binary" aria-hidden="true">#</a> 4. binary</h3><p><strong>FROM</strong></p>',8),j={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},x=o("30 seconds of code (Function)"),E=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">binary</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token function">binary</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, 1, 2]</span>\n</code></pre></div><h3 id="_5-complement-取反" tabindex="-1"><a class="header-anchor" href="#_5-complement-取反" aria-hidden="true">#</a> 5. complement（取反）</h3><p><strong>FROM</strong></p>',8),F={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},_=o("30 seconds of code (Function)"),T=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">complement</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isOdd <span class="token operator">=</span> <span class="token function">complement</span><span class="token punctuation">(</span>isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isOdd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_6-converge-先聚合再处理" tabindex="-1"><a class="header-anchor" href="#_6-converge-先聚合再处理" aria-hidden="true">#</a> 6. converge（先聚合再处理）</h3><p><strong>FROM</strong></p>',8),A={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},M=o("30 seconds of code (Function)"),L=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">converge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">converger<span class="token punctuation">,</span> fns</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">converger</span><span class="token punctuation">(</span><span class="token operator">...</span>fns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> average <span class="token operator">=</span> <span class="token function">converge</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">/</span> b<span class="token punctuation">,</span> <span class="token punctuation">[</span>\n  <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> v</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> v<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token parameter">arr</span> <span class="token operator">=&gt;</span> arr<span class="token punctuation">.</span>length\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">average</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n</code></pre></div><h3 id="_7-partial" tabindex="-1"><a class="header-anchor" href="#_7-partial" aria-hidden="true">#</a> 7. partial</h3><p><strong>FROM</strong></p>',8),I={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},O=o("30 seconds of code (Function)"),N=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">partial</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>partials</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>partials<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">greeting<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> greeting <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> greetHello <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>greet<span class="token punctuation">,</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">greetHello</span><span class="token punctuation">(</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hello John!&#39;</span>\n</code></pre></div><h3 id="_8-partialright" tabindex="-1"><a class="header-anchor" href="#_8-partialright" aria-hidden="true">#</a> 8. partialRight</h3><p><strong>FROM</strong></p>',8),P={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},S=o("30 seconds of code (Function)"),R=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">partialRight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>partials</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>partials<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">greeting<span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> greeting <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> greetJohn <span class="token operator">=</span> <span class="token function">partialRight</span><span class="token punctuation">(</span>greet<span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">greetJohn</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hello John!&#39;</span>\n</code></pre></div><h3 id="_9-rearg-排序" tabindex="-1"><a class="header-anchor" href="#_9-rearg-排序" aria-hidden="true">#</a> 9. rearg（排序）</h3><p><strong>FROM</strong></p>',8),C={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},D=o("30 seconds of code (Function)"),U=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">rearg</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> indexes</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>indexes<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=&gt;</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> rearged <span class="token operator">=</span> <span class="token function">rearg</span><span class="token punctuation">(</span>\n  <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">rearged</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</code></pre></div><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><h3 id="_1-checkprop-属性" tabindex="-1"><a class="header-anchor" href="#_1-checkprop-属性" aria-hidden="true">#</a> 1. checkProp（属性）</h3><p><strong>FROM</strong></p>',9),X={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},z=o("30 seconds of code (Function)"),H=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">checkProp</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">predicate<span class="token punctuation">,</span> prop</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token function">predicate</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> lengthIs4 <span class="token operator">=</span> <span class="token function">checkProp</span><span class="token punctuation">(</span><span class="token parameter">l</span> <span class="token operator">=&gt;</span> l <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;length&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">lengthIs4</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">lengthIs4</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">lengthIs4</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (Set uses Size, not length)</span>\n\n<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token punctuation">{</span> user<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> validUserSession <span class="token operator">=</span> <span class="token function">checkProp</span><span class="token punctuation">(</span><span class="token parameter">u</span> <span class="token operator">=&gt;</span> u<span class="token punctuation">.</span>active <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>u<span class="token punctuation">.</span>disabled<span class="token punctuation">,</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">validUserSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n\nsession<span class="token punctuation">.</span>user<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token function">validUserSession</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token keyword">const</span> noLength <span class="token operator">=</span> <span class="token function">checkProp</span><span class="token punctuation">(</span><span class="token parameter">l</span> <span class="token operator">=&gt;</span> l <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">&#39;length&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">noLength</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">noLength</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">noLength</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="_1-functionname-名称" tabindex="-1"><a class="header-anchor" href="#_1-functionname-名称" aria-hidden="true">#</a> 1. functionName（名称）</h3><p><strong>FROM</strong></p>',9),J={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},q=o("30 seconds of code (Function)"),W=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">functionName</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">functionName</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// max (logged in debug channel of console)</span>\n</code></pre></div><h3 id="_2-hz-频率-秒" tabindex="-1"><a class="header-anchor" href="#_2-hz-频率-秒" aria-hidden="true">#</a> 2. hz（频率/秒）</h3><p><strong>FROM</strong></p>',8),B={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},G=o("30 seconds of code (Function)"),K=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">hz</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> iterations <span class="token operator">=</span> <span class="token number">100</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> before <span class="token operator">=</span> performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> iterations<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> iterations<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>performance<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> before<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// 10,000 element array</span>\n<span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Test functions with the same goal: sum up the elements in the array</span>\n<span class="token keyword">const</span> <span class="token function-variable function">sumReduce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> acc <span class="token operator">+</span> n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">sumForLoop</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> sum <span class="token operator">+=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// `sumForLoop` is nearly 10 times faster</span>\nMath<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">hz</span><span class="token punctuation">(</span>sumReduce<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 572</span>\nMath<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token function">hz</span><span class="token punctuation">(</span>sumForLoop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4784</span>\n</code></pre></div><h3 id="_3-times-执行" tabindex="-1"><a class="header-anchor" href="#_3-times-执行" aria-hidden="true">#</a> 3. times（执行）</h3><p><strong>FROM</strong></p>',8),Q={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},V=o("30 seconds of code (Function)"),Y=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">times</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> context <span class="token operator">=</span> <span class="token keyword">undefined</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">++</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n<span class="token function">times</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token parameter">i</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>output <span class="token operator">+=</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 01234</span>\n</code></pre></div><h3 id="_4-timetaken-耗时" tabindex="-1"><a class="header-anchor" href="#_4-timetaken-耗时" aria-hidden="true">#</a> 4. timeTaken（耗时）</h3><p><strong>FROM</strong></p>',8),Z={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},$=o("30 seconds of code (Function)"),nn=e('<p><strong>DETAIL：</strong></p><p>无侵入。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">timeTaken</span> <span class="token operator">=</span> <span class="token parameter">callback</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&#39;timeTaken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&#39;timeTaken&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> r<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">timeTaken</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024, (logged): timeTaken: 0.02099609375ms</span>\n</code></pre></div><h2 id="组合" tabindex="-1"><a class="header-anchor" href="#组合" aria-hidden="true">#</a> 组合</h2><h3 id="_1-both" tabindex="-1"><a class="header-anchor" href="#_1-both" aria-hidden="true">#</a> 1. both（&amp;&amp;）</h3><p><strong>FROM</strong></p>',9),sn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},an=o("30 seconds of code (Function)"),pn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">both</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isPositive</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isPositiveEven <span class="token operator">=</span> <span class="token function">both</span><span class="token punctuation">(</span>isEven<span class="token punctuation">,</span> isPositive<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">isPositiveEven</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isPositiveEven</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_2-either" tabindex="-1"><a class="header-anchor" href="#_2-either" aria-hidden="true">#</a> 2. either（||）</h3><p><strong>FROM</strong></p>',8),tn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},on=o("30 seconds of code (Function)"),en=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">either</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isEven</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isPositive</span> <span class="token operator">=</span> <span class="token parameter">num</span> <span class="token operator">=&gt;</span> num <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> isPositiveOrEven <span class="token operator">=</span> <span class="token function">either</span><span class="token punctuation">(</span>isPositive<span class="token punctuation">,</span> isEven<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">isPositiveOrEven</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isPositiveOrEven</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_3-over" tabindex="-1"><a class="header-anchor" href="#_3-over" aria-hidden="true">#</a> 3. over</h3><p><strong>FROM</strong></p>',8),cn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},un=o("30 seconds of code (Function)"),ln=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">over</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fns<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> minMax <span class="token operator">=</span> <span class="token function">over</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">,</span> Math<span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">minMax</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1,5]</span>\n</code></pre></div><h3 id="_4-compose-从右到左" tabindex="-1"><a class="header-anchor" href="#_4-compose-从右到左" aria-hidden="true">#</a> 4. compose（从右到左）</h3><p><strong>FROM</strong></p>',8),rn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},kn=o("30 seconds of code (Function)"),gn=e('<p><strong>DETAIL：</strong></p><p>仅第一个执行的函数（即右一）可传递多个参数，其余仅允许一个参数。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">compose</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token function">g</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add5</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token keyword">const</span> multiplyAndAdd5 <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>\n  add5<span class="token punctuation">,</span>\n  multiply\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">multiplyAndAdd5</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>\n</code></pre></div><h3 id="_5-composeasync" tabindex="-1"><a class="header-anchor" href="#_5-composeasync" aria-hidden="true">#</a> 5. composeAsync</h3><p><strong>FROM</strong></p>',8),dn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},fn=o("30 seconds of code (Function)"),mn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">composeAsync</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">arg</span> <span class="token operator">=&gt;</span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> f</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> sum <span class="token operator">=</span> <span class="token function">composeAsync</span><span class="token punctuation">(</span>\n  <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token keyword">async</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">await</span> x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15 (after one second)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="_6-composeright-从左到右" tabindex="-1"><a class="header-anchor" href="#_6-composeright-从左到右" aria-hidden="true">#</a> 6. composeRight（从左到右）</h3><p><strong>FROM</strong></p>',8),hn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},vn=o("30 seconds of code (Function)"),wn=e('<p><strong>DETAIL：</strong></p><p>仅左一允许多个参数。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">composeRight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> fns<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">f<span class="token punctuation">,</span> g</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add5</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">multiply</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token keyword">const</span> multiplyAndAdd5 <span class="token operator">=</span> <span class="token function">composeRight</span><span class="token punctuation">(</span>\n  multiply<span class="token punctuation">,</span>\n  add5\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">multiplyAndAdd5</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 15</span>\n</code></pre></div><h2 id="延时" tabindex="-1"><a class="header-anchor" href="#延时" aria-hidden="true">#</a> 延时</h2><h3 id="_1-delay" tabindex="-1"><a class="header-anchor" href="#_1-delay" aria-hidden="true">#</a> 1. delay</h3><p><strong>FROM</strong></p>',9),bn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},yn=o("30 seconds of code (Function)"),jn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">delay</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&#39;later&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Logs &#39;later&#39; after one second.</span>\n</code></pre></div><h3 id="_2-sleep" tabindex="-1"><a class="header-anchor" href="#_2-sleep" aria-hidden="true">#</a> 2. sleep</h3><p><strong>FROM</strong></p>',8),xn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},En=o("30 seconds of code (Function)"),Fn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sleepyWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I&#39;m going to sleep for 1 second.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;I woke up after 1 second.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_3-defer" tabindex="-1"><a class="header-anchor" href="#_3-defer" aria-hidden="true">#</a> 3. defer</h3><p><strong>FROM</strong></p>',8),_n={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Tn=o("30 seconds of code (Function)"),An=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">defer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">defer</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// logs &#39;b&#39; then &#39;a&#39;</span>\n\ndocument<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;#someElement&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>\n<span class="token function">longRunningFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Browser will not update the HTML until this has finished</span>\n<span class="token function">defer</span><span class="token punctuation">(</span>longRunningFunction<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Browser will update the HTML then run the function</span>\n</code></pre></div><h3 id="_4-runpromisesinseries-按序执行" tabindex="-1"><a class="header-anchor" href="#_4-runpromisesinseries-按序执行" aria-hidden="true">#</a> 4. runPromisesInSeries（按序执行）</h3><p><strong>FROM</strong></p>',8),Mn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Ln=o("30 seconds of code (Function)"),In=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">runPromisesInSeries</span> <span class="token operator">=</span> <span class="token parameter">ps</span> <span class="token operator">=&gt;</span> ps<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">,</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">delay</span> <span class="token operator">=</span> <span class="token parameter">d</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">r</span> <span class="token operator">=&gt;</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">runPromisesInSeries</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Executes each promise sequentially, taking a total of 3 seconds to complete</span>\n</code></pre></div><h3 id="_5-debounce-防抖" tabindex="-1"><a class="header-anchor" href="#_5-debounce-防抖" aria-hidden="true">#</a> 5. debounce（防抖）</h3><p><strong>FROM</strong></p>',8),On={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Nn=o("30 seconds of code (Function)"),Pn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">debounce</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> ms <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timeoutId<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Will log the window dimensions at most every 250ms</span>\n</code></pre></div><h3 id="_6-throttle-节流" tabindex="-1"><a class="header-anchor" href="#_6-throttle-节流" aria-hidden="true">#</a> 6. throttle（节流）</h3><p><strong>FROM</strong></p>',8),Sn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Rn=o("30 seconds of code (Function)"),Cn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">throttle</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> inThrottle<span class="token punctuation">,</span> lastFn<span class="token punctuation">,</span> lastTime<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>\n      args <span class="token operator">=</span> arguments<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inThrottle<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      lastTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      inThrottle <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">clearTimeout</span><span class="token punctuation">(</span>lastFn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      lastFn <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastTime <span class="token operator">&gt;=</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          lastTime <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>wait <span class="token operator">-</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastTime<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>\n  <span class="token string">&#39;resize&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">evt</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Will log the window dimensions at most every 250ms</span>\n</code></pre></div><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存" aria-hidden="true">#</a> 缓存</h2><h3 id="_1-memoize" tabindex="-1"><a class="header-anchor" href="#_1-memoize" aria-hidden="true">#</a> 1. memoize</h3><p><strong>FROM</strong></p>',9),Dn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Un=o("30 seconds of code (Function)"),Xn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">memoize</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">cached</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">:</span> cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  cached<span class="token punctuation">.</span>cache <span class="token operator">=</span> cache<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> cached<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// See the `anagrams` snippet.</span>\n<span class="token keyword">const</span> anagramsCached <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>anagrams<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">anagramsCached</span><span class="token punctuation">(</span><span class="token string">&#39;javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// takes a long time</span>\n<span class="token function">anagramsCached</span><span class="token punctuation">(</span><span class="token string">&#39;javascript&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// returns virtually instantly since it&#39;s now cached</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anagramsCached<span class="token punctuation">.</span>cache<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// The cached anagrams map</span>\n</code></pre></div><h2 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h2><h3 id="_1-once-单次调用" tabindex="-1"><a class="header-anchor" href="#_1-once-单次调用" aria-hidden="true">#</a> 1. once（单次调用）</h3><p><strong>FROM</strong></p>',9),zn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Hn=o("30 seconds of code (Function)"),Jn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">once</span> <span class="token operator">=</span> <span class="token parameter">fn</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n    called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">startApp</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// document.body, MouseEvent</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token function">once</span><span class="token punctuation">(</span>startApp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// only runs `startApp` once upon click</span>\n</code></pre></div><h2 id="链式" tabindex="-1"><a class="header-anchor" href="#链式" aria-hidden="true">#</a> 链式</h2><h3 id="_1-chainasync-异步" tabindex="-1"><a class="header-anchor" href="#_1-chainasync-异步" aria-hidden="true">#</a> 1. chainAsync（异步）</h3><p><strong>FROM</strong></p>',9),qn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Wn=o("30 seconds of code (Function)"),Bn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">chainAsync</span> <span class="token operator">=</span> <span class="token parameter">fns</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> curr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> last <span class="token operator">=</span> fns<span class="token punctuation">[</span>fns<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>curr<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    fn <span class="token operator">===</span> last <span class="token operator">?</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">fn</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">chainAsync</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;0 seconds&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token parameter">next</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;1 second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;2 second&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="柯里化" tabindex="-1"><a class="header-anchor" href="#柯里化" aria-hidden="true">#</a> 柯里化</h2><h3 id="_1-curry" tabindex="-1"><a class="header-anchor" href="#_1-curry" aria-hidden="true">#</a> 1. curry</h3><p><strong>FROM</strong></p>',9),Gn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Kn=o("30 seconds of code (Function)"),Qn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">curry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> arity <span class="token operator">=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  arity <span class="token operator">&lt;=</span> args<span class="token punctuation">.</span>length <span class="token operator">?</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">curry</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span> arity<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">curry</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>pow<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1024</span>\n<span class="token function">curry</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span>min<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n</code></pre></div><h3 id="_2-uncurry" tabindex="-1"><a class="header-anchor" href="#_2-uncurry" aria-hidden="true">#</a> 2. uncurry</h3><p><strong>FROM</strong></p>',8),Vn={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},Yn=o("30 seconds of code (Function)"),Zn=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">uncurry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">next</span> <span class="token operator">=</span> <span class="token parameter">acc</span> <span class="token operator">=&gt;</span> <span class="token parameter">args</span> <span class="token operator">=&gt;</span> args<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">x</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RangeError</span><span class="token punctuation">(</span><span class="token string">&#39;Arguments too few!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token parameter">y</span> <span class="token operator">=&gt;</span> <span class="token parameter">z</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span>\n<span class="token keyword">const</span> uncurriedAdd <span class="token operator">=</span> <span class="token function">uncurry</span><span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">uncurriedAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n</code></pre></div><h2 id="原生模拟" tabindex="-1"><a class="header-anchor" href="#原生模拟" aria-hidden="true">#</a> 原生模拟</h2><h3 id="_1-bind" tabindex="-1"><a class="header-anchor" href="#_1-bind" aria-hidden="true">#</a> 1. bind</h3><p><strong>FROM</strong></p>',9),$n={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},ns=o("30 seconds of code (Function)"),ss=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">bind</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token operator">...</span>boundArgs</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>boundArgs<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token parameter">greeting<span class="token punctuation">,</span> punctuation</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> greeting <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>user <span class="token operator">+</span> punctuation<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> freddy <span class="token operator">=</span> <span class="token punctuation">{</span> user<span class="token operator">:</span> <span class="token string">&#39;fred&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> freddyBound <span class="token operator">=</span> <span class="token function">bind</span><span class="token punctuation">(</span>greet<span class="token punctuation">,</span> freddy<span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">freddyBound</span><span class="token punctuation">(</span><span class="token string">&#39;hi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;hi fred!&#39;</span>\n</code></pre></div><h3 id="_2-call" tabindex="-1"><a class="header-anchor" href="#_2-call" aria-hidden="true">#</a> 2. call</h3><p><strong>FROM</strong></p>',8),as={href:"https://www.30secondsofcode.org/tag/function",target:"_blank",rel:"noopener noreferrer"},ps=o("30 seconds of code (Function)"),ts=e('<p><strong>DETAIL：</strong></p><p>暂无。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">call</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token parameter">context</span> <span class="token operator">=&gt;</span> context<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code>Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">&#39;map&#39;</span><span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, 4, 6 ]</span>\n<span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token function">call</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;map&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nPromise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token number">2</span> <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 2, 4, 6 ]</span>\n</code></pre></div>',6);var os=u(l,[["render",function(o,e){const u=n("OutboundLink");return c(),s(t,null,[r,k,i,a("p",null,[a("a",g,[d,p(u)])]),f,a("p",null,[a("a",m,[h,p(u)])]),v,a("p",null,[a("a",w,[b,p(u)])]),y,a("p",null,[a("a",j,[x,p(u)])]),E,a("p",null,[a("a",F,[_,p(u)])]),T,a("p",null,[a("a",A,[M,p(u)])]),L,a("p",null,[a("a",I,[O,p(u)])]),N,a("p",null,[a("a",P,[S,p(u)])]),R,a("p",null,[a("a",C,[D,p(u)])]),U,a("p",null,[a("a",X,[z,p(u)])]),H,a("p",null,[a("a",J,[q,p(u)])]),W,a("p",null,[a("a",B,[G,p(u)])]),K,a("p",null,[a("a",Q,[V,p(u)])]),Y,a("p",null,[a("a",Z,[$,p(u)])]),nn,a("p",null,[a("a",sn,[an,p(u)])]),pn,a("p",null,[a("a",tn,[on,p(u)])]),en,a("p",null,[a("a",cn,[un,p(u)])]),ln,a("p",null,[a("a",rn,[kn,p(u)])]),gn,a("p",null,[a("a",dn,[fn,p(u)])]),mn,a("p",null,[a("a",hn,[vn,p(u)])]),wn,a("p",null,[a("a",bn,[yn,p(u)])]),jn,a("p",null,[a("a",xn,[En,p(u)])]),Fn,a("p",null,[a("a",_n,[Tn,p(u)])]),An,a("p",null,[a("a",Mn,[Ln,p(u)])]),In,a("p",null,[a("a",On,[Nn,p(u)])]),Pn,a("p",null,[a("a",Sn,[Rn,p(u)])]),Cn,a("p",null,[a("a",Dn,[Un,p(u)])]),Xn,a("p",null,[a("a",zn,[Hn,p(u)])]),Jn,a("p",null,[a("a",qn,[Wn,p(u)])]),Bn,a("p",null,[a("a",Gn,[Kn,p(u)])]),Qn,a("p",null,[a("a",Vn,[Yn,p(u)])]),Zn,a("p",null,[a("a",$n,[ns,p(u)])]),ss,a("p",null,[a("a",as,[ps,p(u)])]),ts],64)}]]);export{os as default};
