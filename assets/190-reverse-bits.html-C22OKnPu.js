import{_ as n,c as a,a as p,o as t}from"./app-BCSwjUcF.js";const e={};function o(l,s){return t(),a("div",null,s[0]||(s[0]=[p(`<h1 id="颠倒二进制位" tabindex="-1"><a class="header-anchor" href="#颠倒二进制位"><span>颠倒二进制位</span></a></h1><p>抄。</p><h2 id="逐位颠倒" tabindex="-1"><a class="header-anchor" href="#逐位颠倒"><span>逐位颠倒</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span>n<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> rev <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// n &amp; 1 计算得到首位</span></span>
<span class="line">    <span class="token comment">// 二进制位与 =&gt; 按位左移 =&gt; 二进制位或</span></span>
<span class="line">    rev <span class="token operator">|=</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">)</span></span>
<span class="line">    n <span class="token operator">&gt;&gt;&gt;=</span> <span class="token number">1</span> <span class="token comment">// 原数据无符号按位右移</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> rev <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,4)]))}const r=n(e,[["render",o]]),i=JSON.parse('{"path":"/algorithms/190-reverse-bits.html","title":"颠倒二进制位","lang":"zh-CN","frontmatter":{"autoSort":-190},"headers":[{"level":2,"title":"逐位颠倒","slug":"逐位颠倒","link":"#逐位颠倒","children":[]}],"git":{"updatedTime":1635071198000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/190-reverse-bits.md"}');export{r as comp,i as data};
