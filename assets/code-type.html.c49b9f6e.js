import{r as n,c as s,a,b as p,F as t,d as o,e,o as c}from"./app.45ea6aa7.js";import{_ as l}from"./plugin-vue_export-helper.5a098b48.js";const u={},r=a("h2",{id:"判断",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#判断","aria-hidden":"true"},"#"),o(" 判断")],-1),i=a("h3",{id:"_1-is-指定类型",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_1-is-指定类型","aria-hidden":"true"},"#"),o(" 1. is（指定类型）")],-1),k=a("p",null,[a("strong",null,"FROM")],-1),d={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},g=o("30 seconds of code (Type)"),f=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">is</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">.</span>constructor <span class="token operator">===</span> type<span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">is</span><span class="token punctuation">(</span>Array<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>ArrayBuffer<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>Map<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>RegExp<span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>Set<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>WeakMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>WeakSet<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WeakSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>Number<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>Number<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">is</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_2-isarraylike-类数组" tabindex="-1"><a class="header-anchor" href="#_2-isarraylike-类数组" aria-hidden="true">#</a> 2. isArrayLike（类数组）</h3><p><strong>FROM</strong></p>',6),m={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},v=o("30 seconds of code (Type)"),y=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isArrayLike</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=&gt;</span> obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isArrayLike</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isArrayLike</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.className&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isArrayLike</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isArrayLike</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_3-typeof" tabindex="-1"><a class="header-anchor" href="#_3-typeof" aria-hidden="true">#</a> 3. typeof</h3><p><strong>FROM</strong></p>',6),b={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},h=o("30 seconds of code (Type)"),j=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isBoolean</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;boolean&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isFunction</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isString</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isSymbol</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;symbol&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isUndefined</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isString</span><span class="token punctuation">(</span><span class="token string">&#39;10&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isSymbol</span><span class="token punctuation">(</span><span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_4-isempty" tabindex="-1"><a class="header-anchor" href="#_4-isempty" aria-hidden="true">#</a> 4. isEmpty</h3><p><strong>FROM</strong></p>',6),w={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},x=o("30 seconds of code (Type)"),N=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isEmpty</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> val<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true - type is not considered a collection</span>\n<span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true - type is not considered a collection</span>\n</code></pre></div><h3 id="_5-isnil" tabindex="-1"><a class="header-anchor" href="#_5-isnil" aria-hidden="true">#</a> 5. isNil</h3><p><strong>FROM</strong></p>',6),O={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},_=o("30 seconds of code (Type)"),E=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isNil</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> val <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isNil</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isNil</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isNil</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_6-isnull-isundefined" tabindex="-1"><a class="header-anchor" href="#_6-isnull-isundefined" aria-hidden="true">#</a> 6. isNull/isUndefined</h3><p><strong>FROM</strong></p>',6),S={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},A=o("30 seconds of code (Type)"),F=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isNull</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isUndefined</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isUndefined</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_7-isnumber" tabindex="-1"><a class="header-anchor" href="#_7-isnumber" aria-hidden="true">#</a> 7. isNumber</h3><p><strong>FROM</strong></p>',6),M={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},T=o("30 seconds of code (Type)"),L=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isNumber</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">&amp;&amp;</span> val <span class="token operator">===</span> val<span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_8-isobjectlike" tabindex="-1"><a class="header-anchor" href="#_8-isobjectlike" aria-hidden="true">#</a> 8. isObjectLike</h3><p><strong>FROM</strong></p>',6),U={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},P=o("30 seconds of code (Type)"),q=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isObjectLike</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isObjectLike</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isObjectLike</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isObjectLike</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isObjectLike</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_9-isplainobject-普通对象" tabindex="-1"><a class="header-anchor" href="#_9-isplainobject-普通对象" aria-hidden="true">#</a> 9. isPlainObject（普通对象）</h3><p><strong>FROM</strong></p>',6),C={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},I=o("30 seconds of code (Type)"),R=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isPlainObject</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token operator">!</span>val <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isPlainObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_10-isvalidjson-json" tabindex="-1"><a class="header-anchor" href="#_10-isvalidjson-json" aria-hidden="true">#</a> 10. isValidJSON（JSON）</h3><p><strong>FROM</strong></p>',6),X={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},B=o("30 seconds of code (Type)"),J=e('<p><strong>DETAIL：</strong></p><p>判断是否为有效 JSON。利用 <code>try...catch</code> 来处理错误。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isValidJSON</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isValidJSON</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;name&quot;:&quot;Adam&quot;,&quot;age&quot;:20}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isValidJSON</span><span class="token punctuation">(</span><span class="token string">&#39;{&quot;name&quot;:&quot;Adam&quot;,age:&quot;20&quot;}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isValidJSON</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="处理" tabindex="-1"><a class="header-anchor" href="#处理" aria-hidden="true">#</a> 处理</h2><h3 id="_1-gettype-获取类型" tabindex="-1"><a class="header-anchor" href="#_1-gettype-获取类型" aria-hidden="true">#</a> 1. getType（获取类型）</h3><p><strong>FROM</strong></p>',9),W={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},V=o("30 seconds of code (Type)"),D=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getType</span> <span class="token operator">=</span> <span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>v <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">:</span> v <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&#39;null&#39;</span> <span class="token operator">:</span> v<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">getType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Set&#39;</span>\n</code></pre></div><h3 id="_2-castarray-转为数组" tabindex="-1"><a class="header-anchor" href="#_2-castarray-转为数组" aria-hidden="true">#</a> 2. castArray（转为数组）</h3><p><strong>FROM</strong></p>',6),z={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},G=o("30 seconds of code (Type)"),H=e('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">castArray</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> val <span class="token operator">:</span> <span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">castArray</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;foo&#39;]</span>\n<span class="token function">castArray</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1]</span>\n</code></pre></div><h3 id="_3-coalescefactory-指定返回类型" tabindex="-1"><a class="header-anchor" href="#_3-coalescefactory-指定返回类型" aria-hidden="true">#</a> 3. coalesceFactory（指定返回类型）</h3><p><strong>FROM</strong></p>',6),K={href:"https://www.30secondsofcode.org/js/t/type/a/1",target:"_blank",rel:"noopener noreferrer"},Q=o("30 seconds of code (Type)"),Y=e('<p><strong>DETAIL：</strong></p><p>自定判断函数，<code>includes</code> 方法果然好用。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">coalesceFactory</span> <span class="token operator">=</span> <span class="token parameter">valid</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> args<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> customCoalesce <span class="token operator">=</span> <span class="token function">coalesceFactory</span><span class="token punctuation">(</span><span class="token parameter">_</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">customCoalesce</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Waldo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Waldo&quot;</span>\n</code></pre></div>',6);var Z=l(u,[["render",function(o,e){const l=n("OutboundLink");return c(),s(t,null,[r,i,k,a("p",null,[a("a",d,[g,p(l)])]),f,a("p",null,[a("a",m,[v,p(l)])]),y,a("p",null,[a("a",b,[h,p(l)])]),j,a("p",null,[a("a",w,[x,p(l)])]),N,a("p",null,[a("a",O,[_,p(l)])]),E,a("p",null,[a("a",S,[A,p(l)])]),F,a("p",null,[a("a",M,[T,p(l)])]),L,a("p",null,[a("a",U,[P,p(l)])]),q,a("p",null,[a("a",C,[I,p(l)])]),R,a("p",null,[a("a",X,[B,p(l)])]),J,a("p",null,[a("a",W,[V,p(l)])]),D,a("p",null,[a("a",z,[G,p(l)])]),H,a("p",null,[a("a",K,[Q,p(l)])]),Y],64)}]]);export{Z as default};
