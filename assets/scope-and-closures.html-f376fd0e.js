import{_ as l,M as e,p as u,q as i,a1 as p,R as s,t as a,N as t,V as r}from"./framework-e3e34937.js";const k={},d={href:"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/scope%20%26%20closures/ch1.md#enginescope-conversation",target:"_blank",rel:"noopener noreferrer"},f={href:"https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope_vs._dynamic_scope",target:"_blank",rel:"noopener noreferrer"},m={href:"https://en.wikipedia.org/wiki/Closure_(computer_programming)",target:"_blank",rel:"noopener noreferrer"};function g(v,n){const o=e("ExternalLinkIcon"),c=e("RouterLink");return u(),i("div",null,[n[11]||(n[11]=p(`<h1 id="作用域与闭包" tabindex="-1"><a class="header-anchor" href="#作用域与闭包" aria-hidden="true">#</a> 作用域与闭包</h1><h2 id="编译器理论" tabindex="-1"><a class="header-anchor" href="#编译器理论" aria-hidden="true">#</a> 编译器理论</h2><p>尽管 JavaScript 被划分到 “动态” 或 “解释型” 语言的范畴，但是其实他是一个编译型语言。它不像许多传统意义上的编译型语言那样预先被编译好，编译的结果也不能在各种不同的分布式系统间移植。</p><p>传统的编译型语言 “编译” 步骤：</p><ol><li><strong>分词/词法分析</strong>：将一连串字符打断成有意义的片段，称为 token（记号）。分词和词法分析区别在于 token 是否以 “无状态” 和 “有状态” 的方式被识别。</li><li><strong>解析</strong>：将一个 token 的流（数组）转换为一个嵌套元素的树，它综合地表示了程序的语法结构。这棵树被称为 “抽象语法树（AST -- <strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree）”。</li><li><strong>代码生成</strong>：这个处理将 “抽象语法树” 转为可执行的代码。</li></ol><p>对于 JavaScript 来说，在许多情况下，编译发生在代码被执行前的仅仅几微妙（甚至更少）。为了确保最快的性能，JavaScript 引擎将使用所有的招数（比如 JIT，它可以懒编译甚至是热编译，等等）。</p><p>编译器处理一个简单的示例：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre></div><ol><li>遇到 <code>var a</code>，编译器让作用域去查看对于这个特定的作用域集合，变量 <code>a</code> 是否已经存在了。如果是，编译器就忽略这个声明并继续前进；否则，编译器就让作用域集合声明一个称为 <code>a</code> 的变量。</li><li>然后编译器为引擎生成稍后执行的代码，来处理赋值 <code>a = 2</code>,。引擎运行的代码首先让作用域去查看在当前作用域集合中是否有一个称为 <code>a</code> 的变量可以访问。如果有，引擎就使用这个变量；如果没有，引擎就查看其他地方。</li><li>如果引擎最终找到变量 <code>a</code>，就会将 2 赋值给 <code>a</code>。否则引擎就会抛出一个异常。</li></ol><h2 id="编译器术语" tabindex="-1"><a class="header-anchor" href="#编译器术语" aria-hidden="true">#</a> 编译器术语</h2><p>在上面的示例中，引擎将会对变量 <code>a</code> 进行一个 “LHS(left-hand side)” 查询，另一种查询称为 “RHS(right-hand side)”。总得来说，就是变量出现在赋值操作左边时，进行 “LHS” 查询，当变量出现在赋值操作右边时，进行 “RHS” 查询。准确来说，“RHS” 是查询变量的值，“LHS” 查询则是找到变量的容器本身，从而可以对其赋值。</p>`,11)),s("p",null,[n[1]||(n[1]=a("术语示例说明（更形象的")),s("a",d,[n[0]||(n[0]=a("对话")),t(o)]),n[2]||(n[2]=a("）："))]),n[12]||(n[12]=p('<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 这个指向 `a` 的引用是一个 RHS 引用，因为此处没有东西赋值给 `a`，而是在查询 `a` 并取得它的值。</span>\n\na <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token comment">// 这里指向 `a` 的引用是一个 LHS 引用，因为我们实际上不关心当前的值是什么，我们只是想找到这个变量，将它作为 `= 2` 赋值操作的目标。</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 这段程序既有 LHS 引用，也有 RHS 引用。</span>\n<span class="token comment">// 调用 `foo()` 的最后一行作为一个函数调用指向 `foo` 的 RHS 引用，意味着 “去找到 foo 的值，并把它给我”，另外 `()` 意味着 `foo` 的值应当被执行，所以它最好实际上是一个函数。</span>\n<span class="token comment">// 代码中还隐含着 `a = 2` 的操作，即当值 2 作为参数传递给 `foo()` 函数时，值 2 被赋值给了参数 `a`，此处进行了 LHS 查询。</span>\n<span class="token comment">// 最后的 `console.log(a)` 同上。 </span>\n</code></pre></div><blockquote><p>失败的 ”RHS“ 引用会导致抛出 ReferenceError 异常，如查询成功，但进行不正确的操作，例如引用 null 或 undefined 的属性，则会抛出 TypeError。</p><p>非严格模式下，失败的 &quot;LHS&quot; 引用会导致隐式地创建一个全局变量；严格模式下， 失败的 &quot;LHS&quot; 引用会抛出 ReferenceError 异常。</p></blockquote><h2 id="词法作用域" tabindex="-1"><a class="header-anchor" href="#词法作用域" aria-hidden="true">#</a> 词法作用域</h2>',3)),s("p",null,[n[5]||(n[5]=a("JavaScript 也采用")),s("a",f,[n[3]||(n[3]=a("词法作用域")),t(o)]),n[6]||(n[6]=a("（Lexical Scope 又称 Static Scope，另外一种是动态作用域 Dynamic Scope），也就是说，函数的执行依赖于变量作用域，这个作用域是在函数定义时决定的，而不是函数调用时决定的。为了实现这个词法作用域，JavaScript 函数对象的内部状态不仅包含函数的代码逻辑，还必须引用当前的作用域链。函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，这种特性在计算机科学中称为 “")),s("a",m,[n[4]||(n[4]=a("闭包")),t(o)]),n[7]||(n[7]=a("”，又称为 “词法闭包（Lexical Closure）”。"))]),n[13]||(n[13]=p(`<blockquote><p>个人理解：</p><p>词法作用域定义了如何解析函数中嵌套的变量名，即使父（函数）已经返回（执行完毕），子函数依然保有父作用域。</p></blockquote><p>从技术角度上来说，所有的 JavaScript 函数都是闭包：当调用函数时作用域链和定义函数时的作用域链不是同一个作用域链时。</p><p>所有函数都是闭包？</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 借助一个常见的示例：</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 此处 foo 函数可以访问变量 a，但是 a 并非 foo 定义时作用域链中的变量</span>
<span class="token comment">// 即构成了一个闭包</span>
</code></pre></div><blockquote><p>作用域链：作用域链被描述为一个对象列表，而非绑定的栈。</p></blockquote><p>每次调用 JavaScript 函数的时候，都会为之创建一个新的对象用来保存局部变量，把这个对象添加至作用域链中。当函数返回的时候，就从作用域链中将这个绑定变量的对象删除。如果不存在嵌套函数，也没有其他引用指向这个绑定对象，它就会被当做垃圾回收掉。如果定义了嵌套的函数，每个嵌套的函数都各自对应一个作用域链，并且这个作用域链指向一个变量绑定对象。但如果这些嵌套的函数对象在外部函数中保存下来，那么它们也会和所指向的变量绑定对象一样被垃圾回收。但是如果这个函数顶一个嵌套的函数，并将它作为返回值返回或者存储在某处的属性里，这时就会有一个外部引用指向这个嵌套的函数。它就不会被当做垃圾回收，并且它所指向的变量绑定对象也不会被当做垃圾回收。</p><h3 id="_1-词法分析" tabindex="-1"><a class="header-anchor" href="#_1-词法分析" aria-hidden="true">#</a> 1. 词法分析</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> a <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">bar</span><span class="token punctuation">(</span>b <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">foo</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2 4 12</span>
</code></pre></div><p>以上存在三个作用域：</p><ol><li>全局作用域，一个标识符：<code>foo</code>。</li><li><code>foo</code> 作用域，三个标识符：<code>a</code>、<code>bar</code>、<code>b</code>。</li><li><code>bar</code> 作用域，一个标识符：<code>c</code>。</li></ol><h2 id="执行上下文" tabindex="-1"><a class="header-anchor" href="#执行上下文" aria-hidden="true">#</a> 执行上下文</h2><p>执行上下文是执行 JavaScript 代码环境的抽象概念。</p><h3 id="_1-类型" tabindex="-1"><a class="header-anchor" href="#_1-类型" aria-hidden="true">#</a> 1. 类型</h3><p>JavaScript 中存在三种执行上下文类型：</p><ol><li>全局执行上下文：默认的上下文，其执行会创建一个全局的 window 对象（浏览器下，V8 下为 global），并且设置 <code>this = window</code>。</li><li>函数执行上下文：每当一个函数被调用时，都会为该函数创建一个新的上下文。</li><li>Eval 函数执行上下文：同上。</li></ol><h3 id="_2-执行栈" tabindex="-1"><a class="header-anchor" href="#_2-执行栈" aria-hidden="true">#</a> 2. 执行栈</h3><p>其拥有栈的性质。</p><p>当 JavaScript 开始解释执行代码（进入 JS 文件）时，首先遇到的自然是全局代码，所以全局执行上下文永远在栈底，直到关闭浏览器时最后被抛出。</p><h2 id="编译在先" tabindex="-1"><a class="header-anchor" href="#编译在先" aria-hidden="true">#</a> 编译在先</h2><h3 id="_1-变量提升示例" tabindex="-1"><a class="header-anchor" href="#_1-变量提升示例" aria-hidden="true">#</a> 1. 变量提升示例</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// 上面常常被误认为结果是抛出一个 ReferenceError</span>
</code></pre></div>`,21)),s("p",null,[n[9]||(n[9]=a("要理解上面的示例，就需要回顾下之前的")),t(c,{to:"/frontend/javascript/scope-and-closures.html#%E7%BC%96%E8%AF%91%E5%99%A8%E7%90%86%E8%AE%BA"},{default:r(()=>n[8]||(n[8]=[a("编译器理论")])),_:1}),n[10]||(n[10]=a("，引擎实际上将会在它解释执行你的 JavaScript 代码前编译它。编译过程的一部分就是找到所有声明（当前作用域内的声明？待验证），变将它们关联在合适的作用域上。即，在你的代码的任何部分被执行之前，所有的声明、变量和函数都会首先被处理。"))]),n[14]||(n[14]=p(`<p>因此，示例的实际执行为：</p><ol><li><p>编译：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a<span class="token punctuation">;</span>
</code></pre></div></li><li><p>执行：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre></div></li></ol><p>由此就产生了 “变量提升” 这个概念。</p><blockquote><p>注意：只有声明被提升了，而任何赋值或其他的执行逻辑都会被留在原处。</p><p>补充：函数声明也是声明，并且函数声明优先于变量声明。</p></blockquote><h3 id="_2-函数提升示例" tabindex="-1"><a class="header-anchor" href="#_2-函数提升示例" aria-hidden="true">#</a> 2. 函数提升示例</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: foo is not a function</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: bar is not defined</span>

<span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>将其解析一下便很容易得出原因：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> foo<span class="token punctuation">;</span>

<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>

<span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token operator">...</span>self<span class="token operator">...</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="定时器影响" tabindex="-1"><a class="header-anchor" href="#定时器影响" aria-hidden="true">#</a> 定时器影响</h2><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">wait</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, closure!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, closure!</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 6 6 6 6 6</span>
</code></pre></div><p>第二段代码与预期的 12345 不一致，是由于作用域的问题，闭包都作用在全局作用域上了，所以所有的 <code>console.log(i)</code> 的 <code>i</code> 都指向全局同一个变量 <code>i</code>。</p><p>可以利用 IFEE 为每个 <code>console.log</code> 创建独立的作用域：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>由于是作用域的问题，所以也可以利用新增的 <code>let</code>、<code>const</code> 生成块级作用域。</p>`,14))])}const b=l(k,[["render",g],["__file","scope-and-closures.html.vue"]]);export{b as default};
