import{_ as s,c as a,a as p,o as t}from"./app-BCSwjUcF.js";const o={};function e(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="二叉树中第二小的节点" tabindex="-1"><a class="header-anchor" href="#二叉树中第二小的节点"><span>二叉树中第二小的节点</span></a></h1><h2 id="递归" tabindex="-1"><a class="header-anchor" href="#递归"><span>递归</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">findSecondMinimumValue</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> min <span class="token operator">=</span> root<span class="token punctuation">.</span>val</span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">dfs</span> <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> root<span class="token punctuation">.</span>val <span class="token operator">&gt;=</span> ret<span class="token punctuation">)</span> <span class="token keyword">return</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&gt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      ret <span class="token operator">=</span> root<span class="token punctuation">.</span>val</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  </span>
<span class="line">  <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> ret</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,3)]))}const r=s(o,[["render",e]]),i=JSON.parse('{"path":"/algorithms/671-second-minimum-node-in-a-binary-tree.html","title":"二叉树中第二小的节点","lang":"zh-CN","frontmatter":{"autoSort":-671},"headers":[{"level":2,"title":"递归","slug":"递归","link":"#递归","children":[]}],"git":{"updatedTime":1638457703000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/671-second-minimum-node-in-a-binary-tree.md"}');export{r as comp,i as data};
