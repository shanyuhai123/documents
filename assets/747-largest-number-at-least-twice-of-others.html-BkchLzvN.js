import{_ as n,c as a,a as p,o as t}from"./app-CQrWi6O2.js";const e={};function o(l,s){return t(),a("div",null,[...s[0]||(s[0]=[p(`<h1 id="至少是其他数字两倍的最大数" tabindex="-1"><a class="header-anchor" href="#至少是其他数字两倍的最大数"><span>至少是其他数字两倍的最大数</span></a></h1><p>参考<a href="./414-third-maximum-number">第三大的数</a>。</p><h2 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历"><span>遍历</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">dominantIndex</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> mi <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line">  <span class="token keyword">let</span> next <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      next <span class="token operator">=</span> max</span>
<span class="line">      max <span class="token operator">=</span> num</span>
<span class="line">      mi <span class="token operator">=</span> i</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> max <span class="token operator">&amp;&amp;</span> num <span class="token operator">&gt;</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      next <span class="token operator">=</span> num</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> next <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span></span>
<span class="line">    <span class="token operator">?</span> mi</span>
<span class="line">    <span class="token operator">:</span> max <span class="token operator">&gt;=</span> next <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line">      <span class="token operator">?</span> mi</span>
<span class="line">      <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,4)])])}const r=n(e,[["render",o]]),i=JSON.parse('{"path":"/algorithms/747-largest-number-at-least-twice-of-others.html","title":"至少是其他数字两倍的最大数","lang":"zh-CN","frontmatter":{"autoSort":-747},"headers":[{"level":2,"title":"遍历","slug":"遍历","link":"#遍历","children":[]}],"git":{"updatedTime":1638973728000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/747-largest-number-at-least-twice-of-others.md"}');export{r as comp,i as data};
