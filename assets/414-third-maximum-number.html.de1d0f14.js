import{e as n}from"./app.09683e95.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const a={},p=n('<h1 id="第三大的数" tabindex="-1"><a class="header-anchor" href="#第三大的数" aria-hidden="true">#</a> 第三大的数</h1><h2 id="三个数" tabindex="-1"><a class="header-anchor" href="#三个数" aria-hidden="true">#</a> 三个数</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">thirdMax</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      c <span class="token operator">=</span> b\n      b <span class="token operator">=</span> a\n      a <span class="token operator">=</span> num\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> a <span class="token operator">&amp;&amp;</span> num <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      c <span class="token operator">=</span> b\n      b <span class="token operator">=</span> num\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> num <span class="token operator">&gt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      c <span class="token operator">=</span> num\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> c <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span> <span class="token operator">?</span> a <span class="token operator">:</span> c\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="去重排序" tabindex="-1"><a class="header-anchor" href="#去重排序" aria-hidden="true">#</a> 去重排序</h2><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">thirdMax</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> ret<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> ret<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token operator">:</span> ret<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',5);var t=s(a,[["render",function(n,s){return p}]]);export{t as default};
