import{_ as s,c as a,a as e,o as t}from"./app-DNXRdI82.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="你好-d3" tabindex="-1"><a class="header-anchor" href="#你好-d3"><span>你好 D3</span></a></h1><p>关于 D3 的一些笔记，使用较少易忘。</p><h2 id="始于svg" tabindex="-1"><a class="header-anchor" href="#始于svg"><span>始于SVG</span></a></h2><p>可缩放矢量图形（Scalable Vector Graphics，SVG）是一种基于可扩展标记语言（XML），用于描述二维矢量图形的图形格式。</p><p><code>D3</code> 是一个可以基于数据来操作文档的 JavaScript 库。可以使用 HTML、CSS、SVG 以及 Canvas 来展示数据。</p><blockquote><p>配合 Vue 使用时常用 computed 属性，以数据驱动数据。</p></blockquote><h3 id="_1-svg" tabindex="-1"><a class="header-anchor" href="#_1-svg"><span>1. svg</span></a></h3><p><code>svg</code> 元素（容器元素、结构元素）可以在文档内嵌套一个独立的 <code>svg</code> 片段，这个片段具有独立的视口和坐标系统。<code>svg</code> 嵌套时彼此的视口和坐标系统也独立。</p><p>其 <code>xmlns</code> 属性定义了命名空间，可以区别与 HTML 冲突的元素。</p><h3 id="_2-g" tabindex="-1"><a class="header-anchor" href="#_2-g"><span>2. g</span></a></h3><p><code>g</code> 元素常用于对图形进行分组，添加到 <code>g</code> 元素上的变换会应用到所有的子元素上。</p><p>此外，最重要的一点是可以利用 <code>use</code> 来对元素进行复用。</p><h3 id="_3-path" tabindex="-1"><a class="header-anchor" href="#_3-path"><span>3. path</span></a></h3><p><code>path</code> 是 SVG 基本形状中最强大的一个。</p><ol><li><p>移动（Move to，M）：</p><p><code>&lt;path d=&quot;M10 10&quot;/&gt;</code>。</p></li><li><p>划线（Line，L）：</p><p>简写，<code>H</code> 绘制水平线，<code>V</code> 绘制垂直线，<code>&lt;path d=&quot;M10 10 H 90 V 90 H 10 L 10 10&quot;/&gt;</code>。</p></li><li><p>闭合路径（Z）：</p><p><code>&lt;path d=&quot;M10 10 H 90 V 90 H 10 Z&quot; fill=&quot;transparent&quot; stroke=&quot;black&quot;/&gt;</code>。</p></li><li><p>曲线（C）：</p><p>三次贝塞尔曲线需要定义一个点和两个控制点，<code>&lt;path d=&quot;M10 10 C 20 20, 40 20, 50 10&quot; stroke=&quot;black&quot; fill=&quot;transparent&quot;/&gt;</code>。</p></li><li><p>更长的曲线（S）：</p><p>S 命令跟在一个 C 或 S 命令后面时，则它的第一个控制点会被假设为前一个命令曲线的第二个控制点的中心对称点。</p><p>同理可得二次贝塞尔曲线（Q）和对应的 （T）。</p></li><li><p>弧形（A）：</p><p>弧形可视为圆形或椭圆的一部分，<code>&lt;path d=&quot;M80 80 A 45 45, 0, 0, 0, 125 125 L 125 80 Z&quot; fill=&quot;green&quot;/&gt;</code>。</p></li></ol><h3 id="_3-basic-shapes" tabindex="-1"><a class="header-anchor" href="#_3-basic-shapes"><span>3. basic shapes</span></a></h3><p><code>rect</code>、<code>circle</code>、<code>Ellipse</code>、<code>Line</code>、<code>Polyline</code>、<code>Path</code>。</p><h2 id="svg-样式" tabindex="-1"><a class="header-anchor" href="#svg-样式"><span>SVG 样式</span></a></h2><p>SVG 支持的样式方式与 CSS 相似：内联样式、内部样式表、外部样式表及表现属性。</p><h3 id="_1-内联样式" tabindex="-1"><a class="header-anchor" href="#_1-内联样式"><span>1. 内联样式</span></a></h3><p>元素内部使用 style 属性即可。</p><h3 id="_2-内部样式表" tabindex="-1"><a class="header-anchor" href="#_2-内部样式表"><span>2. 内部样式表</span></a></h3><p>内部样式定义在 <code>svg</code> 元素下的 <code>def</code> 元素中。</p><div class="language-css" data-highlighter="prismjs" data-ext="css" data-title="css"><pre><code><span class="line">&lt;svg width=<span class="token string">&quot;200px&quot;</span> height=<span class="token string">&quot;200px&quot;</span> xmlns=&quot;<span class="token property">http</span><span class="token punctuation">:</span>//www.w3.org/2000/svg&gt;</span>
<span class="line">  <span class="token selector">&lt;defs&gt;</span>
<span class="line">    &lt;style type=&quot;text/css&quot;&gt;&lt;![CDATA[</span>
<span class="line">      circle</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">fill</span><span class="token punctuation">:</span>#ccc</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    ]]&gt;&lt;/style&gt;</span>
<span class="line">  &lt;/defs&gt;</span>
<span class="line">  &lt;circle cx=<span class="token string">&quot;10&quot;</span> cy=<span class="token string">&quot;10&quot;</span> r=<span class="token string">&quot;5&quot;</span>/&gt;</span>
<span class="line">&lt;/svg&gt;</span>
<span class="line"></span></code></pre></div><h3 id="_3-外部样式表" tabindex="-1"><a class="header-anchor" href="#_3-外部样式表"><span>3. 外部样式表</span></a></h3><p>样式定义在 CSS 文件中，使用选择器来设置相应的样式。</p><h3 id="_4-表现属性" tabindex="-1"><a class="header-anchor" href="#_4-表现属性"><span>4. 表现属性</span></a></h3><p>以属性的形式指定样式，但是优先级最低，易被其余样式方式覆盖。</p><h2 id="d3-概念" tabindex="-1"><a class="header-anchor" href="#d3-概念"><span>D3 概念</span></a></h2><p>随着代码量的增多，越来越理解到设计理念的区别，一如 jQuery 的 DOM 操作，一如 MVVM 框架的数据驱动，理解了这些概念再学习起来才算是找到了门路。</p><p>然而一般只有熟悉某一个后才能切身体会到它的设计理念，所以目前关于其概念为空。</p><h3 id="_1-选择集-selections" tabindex="-1"><a class="header-anchor" href="#_1-选择集-selections"><span>1. 选择集（Selections）</span></a></h3><p>与 jQuery 的 <code>$</code> 基本一致。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>d3</span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;.selection-binding&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 仅选中匹配的第一个元素</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 选中所有匹配的元素</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span> <span class="token comment">// 插入数据</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token parameter">d</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> d<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-enter-和-exit" tabindex="-1"><a class="header-anchor" href="#_2-enter-和-exit"><span>2. enter 和 exit</span></a></h3><blockquote><p>其中留给人印象最深的莫过于这两个方法。</p></blockquote><p>在利用数据绑定时，可能出现 DOM 元素不匹配的问题。<code>enter</code> 操作用于添加新的 DOM 元素，<code>exit</code> 操作用于移除多余的 DOM 元素。</p><p>然而实际应用中，不可能先去统计元素的个数，记住以数据驱动的思想。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">d3<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">d</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token string">&quot;I’m number &quot;</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/SVG/Element" target="_blank" rel="noopener noreferrer">SVG 元素</a></li><li><a href="https://d3js.org/" target="_blank" rel="noopener noreferrer">D3js</a></li><li><a href="http://wiki.jikexueyuan.com/project/d3wiki/introduction.html" target="_blank" rel="noopener noreferrer">极客学院 D3</a></li><li><a href="https://github.com/shanyuhai123/d3-docs" target="_blank" rel="noopener noreferrer">d3-doc</a></li></ol>`,41)]))}const i=s(p,[["render",o],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/frontend/d3js/","title":"你好 D3","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"始于SVG","slug":"始于svg","link":"#始于svg","children":[{"level":3,"title":"1. svg","slug":"_1-svg","link":"#_1-svg","children":[]},{"level":3,"title":"2. g","slug":"_2-g","link":"#_2-g","children":[]},{"level":3,"title":"3. path","slug":"_3-path","link":"#_3-path","children":[]},{"level":3,"title":"3. basic shapes","slug":"_3-basic-shapes","link":"#_3-basic-shapes","children":[]}]},{"level":2,"title":"SVG 样式","slug":"svg-样式","link":"#svg-样式","children":[{"level":3,"title":"1. 内联样式","slug":"_1-内联样式","link":"#_1-内联样式","children":[]},{"level":3,"title":"2. 内部样式表","slug":"_2-内部样式表","link":"#_2-内部样式表","children":[]},{"level":3,"title":"3. 外部样式表","slug":"_3-外部样式表","link":"#_3-外部样式表","children":[]},{"level":3,"title":"4. 表现属性","slug":"_4-表现属性","link":"#_4-表现属性","children":[]}]},{"level":2,"title":"D3 概念","slug":"d3-概念","link":"#d3-概念","children":[{"level":3,"title":"1. 选择集（Selections）","slug":"_1-选择集-selections","link":"#_1-选择集-selections","children":[]},{"level":3,"title":"2. enter 和 exit","slug":"_2-enter-和-exit","link":"#_2-enter-和-exit","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"updatedTime":1637396731000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":3,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"frontend/d3js/README.md"}');export{i as comp,u as data};
