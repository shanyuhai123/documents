import{_ as n,c as a,a as p,o as t}from"./app-CQrWi6O2.js";const e={};function o(c,s){return t(),a("div",null,[...s[0]||(s[0]=[p(`<h1 id="Â≠óÁ¨¶‰∏≤" tabindex="-1"><a class="header-anchor" href="#Â≠óÁ¨¶‰∏≤"><span>Â≠óÁ¨¶‰∏≤</span></a></h1><h2 id="ÈïøÂ∫¶" tabindex="-1"><a class="header-anchor" href="#ÈïøÂ∫¶"><span>ÈïøÂ∫¶</span></a></h2><h3 id="_1-bytesize" tabindex="-1"><a class="header-anchor" href="#_1-bytesize"><span>1. byteSize</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>Ê≤°ÊÉ≥Âà∞ÈïøÂ∫¶ÊòØ‰∫§Áî± <code>Blob</code> Â§ÑÁêÜ„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">byteSize</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">byteSize</span><span class="token punctuation">(</span><span class="token string">&#39;üòÄ&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span></span>
<span class="line"><span class="token function">byteSize</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span></span>
<span class="line"></span></code></pre></div><h2 id="Âà§Êñ≠" tabindex="-1"><a class="header-anchor" href="#Âà§Êñ≠"><span>Âà§Êñ≠</span></a></h2><h3 id="_1-isabsoluteurl-url" tabindex="-1"><a class="header-anchor" href="#_1-isabsoluteurl-url"><span>1. isAbsoluteURLÔºàURLÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isAbsoluteURL</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z][a-z0-9+.-]*:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;https://google.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;ftp://www.myserver.net&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;/foo/bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-isanagram" tabindex="-1"><a class="header-anchor" href="#_2-isanagram"><span>2. isAnagram</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isAnagram</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">normalize</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span></span>
<span class="line">    str</span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^a-z0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">normalize</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">normalize</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token string">&#39;iceman&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cinema&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-isuppercase-islowercase" tabindex="-1"><a class="header-anchor" href="#_3-isuppercase-islowercase"><span>3. isUpperCase/isLowerCase</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isUpperCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str <span class="token operator">===</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isLowerCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str <span class="token operator">===</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;A3@$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;aB4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;a3@$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;Ab4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-palindrome-ÂõûÊñá" tabindex="-1"><a class="header-anchor" href="#_4-palindrome-ÂõûÊñá"><span>4. palindromeÔºàÂõûÊñáÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">palindrome</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\W_]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> s <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token string">&#39;taco cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="_5-yesno" tabindex="-1"><a class="header-anchor" href="#_5-yesno"><span>5. yesNo</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">yesNo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> def <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(y|yes)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(n|no)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> def<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;No&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;Foo&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h2 id="Ê†ºÂºè" tabindex="-1"><a class="header-anchor" href="#Ê†ºÂºè"><span>Ê†ºÂºè</span></a></h2><h3 id="_1-capitalize-È¶ñÂ≠óÊØçÂ§ßÂÜô" tabindex="-1"><a class="header-anchor" href="#_1-capitalize-È¶ñÂ≠óÊØçÂ§ßÂÜô"><span>1. capitalizeÔºàÈ¶ñÂ≠óÊØçÂ§ßÂÜôÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">capitalize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> lowerRest <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  first<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lowerRest <span class="token operator">?</span> rest<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> rest<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;FooBar&#39;</span></span>
<span class="line"><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Foobar&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-expandtabs-Êç¢Ë°åÁ¨¶" tabindex="-1"><a class="header-anchor" href="#_2-expandtabs-Êç¢Ë°åÁ¨¶"><span>2. expandTabsÔºàÊç¢Ë°åÁ¨¶Ôºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">expandTabs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\t</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">expandTabs</span><span class="token punctuation">(</span><span class="token string">&#39;\\t\\tlorem&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;      lorem&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-capitalizeeveryword-ÂçïËØçÂ§ßÂÜô" tabindex="-1"><a class="header-anchor" href="#_3-capitalizeeveryword-ÂçïËØçÂ§ßÂÜô"><span>3. capitalizeEveryWordÔºàÂçïËØçÂ§ßÂÜôÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">capitalizeEveryWord</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">char</span> <span class="token operator">=&gt;</span> char<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">capitalizeEveryWord</span><span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hello World!&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-fromcamelcase-È©ºÂ≥∞" tabindex="-1"><a class="header-anchor" href="#_4-fromcamelcase-È©ºÂ≥∞"><span>4. fromCamelCaseÔºàÈ©ºÂ≥∞Ôºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> fromCamelCase <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> separator <span class="token operator">=</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  str</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-z\\d])([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span> <span class="token operator">+</span> separator <span class="token operator">+</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z]+)([A-Z][a-z\\d]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span> <span class="token operator">+</span> separator <span class="token operator">+</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someDatabaseFieldName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some database field name&#39;</span></span>
<span class="line"><span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someLabelThatNeedsToBeCamelized&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-label-that-needs-to-be-camelized&#39;</span></span>
<span class="line"><span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someJavascriptProperty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_javascript_property&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_5-indentstring-Áº©Ëøõ" tabindex="-1"><a class="header-anchor" href="#_5-indentstring-Áº©Ëøõ"><span>5. indentStringÔºàÁº©ËøõÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> indentString <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> count<span class="token punctuation">,</span> indent <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> indent<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">indentString</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem\\nIpsum&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;  Lorem\\n  Ipsum&#39;</span></span>
<span class="line"><span class="token function">indentString</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem\\nIpsum&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;__Lorem\\n__Ipsum&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_6-mapstring-Ëá™ÂÆö‰πâ" tabindex="-1"><a class="header-anchor" href="#_6-mapstring-Ëá™ÂÆö‰πâ"><span>6. mapStringÔºàËá™ÂÆö‰πâÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">mapString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  str</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> i<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">mapString</span><span class="token punctuation">(</span><span class="token string">&#39;lorem ipsum&#39;</span><span class="token punctuation">,</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;LOREM IPSUM&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_7-tocamelcase-È©ºÂ≥∞" tabindex="-1"><a class="header-anchor" href="#_7-tocamelcase-È©ºÂ≥∞"><span>7. toCamelCaseÔºàÈ©ºÂ≥∞Ôºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">toCamelCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> s <span class="token operator">=</span></span>
<span class="line">    str <span class="token operator">&amp;&amp;</span></span>
<span class="line">    str</span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some_database_field_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someDatabaseFieldName&#39;</span></span>
<span class="line"><span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;Some label that needs to be camelized&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someLabelThatNeedsToBeCamelized&#39;</span></span>
<span class="line"><span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-javascript-property&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someJavascriptProperty&#39;</span></span>
<span class="line"><span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string with spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someMixedStringWithSpacesUnderscoresAndHyphens&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_8-tokebabcase-Ê®™Á∫ø" tabindex="-1"><a class="header-anchor" href="#_8-tokebabcase-Ê®™Á∫ø"><span>8. toKebabCaseÔºàÊ®™Á∫øÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">toKebabCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span></span>
<span class="line">  str <span class="token operator">&amp;&amp;</span></span>
<span class="line">  str</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;camelCase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;camel-case&#39;</span></span>
<span class="line"><span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-text&#39;</span></span>
<span class="line"><span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string With spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-mixed-string-with-spaces-underscores-and-hyphens&#39;</span></span>
<span class="line"><span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;AllThe-small Things&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;all-the-small-things&quot;</span></span>
<span class="line"><span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-xml-and-html&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="_9-tosnakecase-‰∏ãÂàíÁ∫ø" tabindex="-1"><a class="header-anchor" href="#_9-tosnakecase-‰∏ãÂàíÁ∫ø"><span>9. toSnakeCaseÔºà‰∏ãÂàíÁ∫øÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">toSnakeCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span></span>
<span class="line">  str <span class="token operator">&amp;&amp;</span></span>
<span class="line">  str</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;camelCase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;camel_case&#39;</span></span>
<span class="line"><span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_text&#39;</span></span>
<span class="line"><span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string With spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_mixed_string_with_spaces_underscores_and_hyphens&#39;</span></span>
<span class="line"><span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;AllThe-small Things&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;all_the_small_things&quot;</span></span>
<span class="line"><span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="_10-totitlecase-Ê†áÈ¢ò" tabindex="-1"><a class="header-anchor" href="#_10-totitlecase-Ê†áÈ¢ò"><span>10. toTitleCaseÔºàÊ†áÈ¢òÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">toTitleCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span></span>
<span class="line">  str</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some_database_field_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Database Field Name&#39;</span></span>
<span class="line"><span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;Some label that needs to be title-cased&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Label That Needs To Be Title Cased&#39;</span></span>
<span class="line"><span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-package-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Package Name&#39;</span></span>
<span class="line"><span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string with spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Mixed String With Spaces Underscores And Hyphens&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="Á©∫Ê†º" tabindex="-1"><a class="header-anchor" href="#Á©∫Ê†º"><span>Á©∫Ê†º</span></a></h2><h3 id="_1-containswhitespace" tabindex="-1"><a class="header-anchor" href="#_1-containswhitespace"><span>1. containsWhitespace</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">containsWhitespace</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;lorem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"><span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;lorem ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-compactwhitespace" tabindex="-1"><a class="header-anchor" href="#_2-compactwhitespace"><span>2. compactWhitespace</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">compactWhitespace</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s{2,}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">compactWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem    Ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Lorem Ipsum&#39;</span></span>
<span class="line"><span class="token function">compactWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem \\n Ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Lorem Ipsum&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="csv" tabindex="-1"><a class="header-anchor" href="#csv"><span>CSV</span></a></h2><h3 id="_1-csvtoarray" tabindex="-1"><a class="header-anchor" href="#_1-csvtoarray"><span>1. CSVToArray</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> CSVToArray <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> omitFirstRow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  data</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>omitFirstRow <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;a,b\\nc,d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span></span>
<span class="line"><span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;a;b\\nc;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span></span>
<span class="line"><span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;col1,col2\\na,b\\nc,d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-csvtojson" tabindex="-1"><a class="header-anchor" href="#_2-csvtojson"><span>2. CSVToJSON</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> CSVToJSON <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> titles <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> data</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> values <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">return</span> titles<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> title<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>title<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">CSVToJSON</span><span class="token punctuation">(</span><span class="token string">&#39;col1,col2\\na,b\\nc,d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{&#39;col1&#39;: &#39;a&#39;, &#39;col2&#39;: &#39;b&#39;}, {&#39;col1&#39;: &#39;c&#39;, &#39;col2&#39;: &#39;d&#39;}];</span></span>
<span class="line"><span class="token function">CSVToJSON</span><span class="token punctuation">(</span><span class="token string">&#39;col1;col2\\na;b\\nc;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{&#39;col1&#39;: &#39;a&#39;, &#39;col2&#39;: &#39;b&#39;}, {&#39;col1&#39;: &#39;c&#39;, &#39;col2&#39;: &#39;d&#39;}];</span></span>
<span class="line"></span></code></pre></div><h2 id="ËΩ¨‰πâ" tabindex="-1"><a class="header-anchor" href="#ËΩ¨‰πâ"><span>ËΩ¨‰πâ</span></a></h2><h3 id="_1-escapehtml-html" tabindex="-1"><a class="header-anchor" href="#_1-escapehtml-html"><span>1. escapeHTMLÔºàHTMLÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">escapeHTML</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span></span>
<span class="line">  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&amp;&lt;&gt;&#39;&quot;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token parameter">tag</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&#39;&amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;amp;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&#39;&lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;lt;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&#39;&gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;gt;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&quot;&#39;&quot;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;#39;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&#39;&quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;quot;&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">||</span> tag<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Me &amp;amp; you&amp;lt;/a&amp;gt;&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-unescapehtml-html" tabindex="-1"><a class="header-anchor" href="#_2-unescapehtml-html"><span>2. unescapeHTMLÔºàHTMLÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">unescapeHTML</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span></span>
<span class="line">  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;amp;|&amp;lt;|&amp;gt;|&amp;#39;|&amp;quot;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token parameter">tag</span> <span class="token operator">=&gt;</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token string-property property">&#39;&amp;amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&#39;&amp;lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&#39;&amp;gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&#39;&amp;#39;&#39;</span><span class="token operator">:</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string-property property">&#39;&amp;quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&quot;&#39;</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">||</span> tag<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">unescapeHTML</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Me &amp;amp; you&amp;lt;/a&amp;gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-escaperegexp-Ê≠£Âàô" tabindex="-1"><a class="header-anchor" href="#_3-escaperegexp-Ê≠£Âàô"><span>3. escapeRegExpÔºàÊ≠£ÂàôÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">escapeRegExp</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.*+?^\${}()|[\\]\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">escapeRegExp</span><span class="token punctuation">(</span><span class="token string">&#39;(test)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\\\(test\\\\)</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-striphtmltags-html" tabindex="-1"><a class="header-anchor" href="#_4-striphtmltags-html"><span>4. stripHTMLTagsÔºàHTMLÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">stripHTMLTags</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^&gt;]*&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">stripHTMLTags</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;&lt;em&gt;lorem&lt;/em&gt; &lt;strong&gt;ipsum&lt;/strong&gt;&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;lorem ipsum&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="Êâ©Â±ï" tabindex="-1"><a class="header-anchor" href="#Êâ©Â±ï"><span>Êâ©Â±ï</span></a></h2><h3 id="_1-extendhex-È¢úËâ≤" tabindex="-1"><a class="header-anchor" href="#_1-extendhex-È¢úËâ≤"><span>1. extendHexÔºàÈ¢úËâ≤Ôºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">extendHex</span> <span class="token operator">=</span> <span class="token parameter">shortHex</span> <span class="token operator">=&gt;</span></span>
<span class="line">  <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span></span>
<span class="line">  shortHex</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>shortHex<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">extendHex</span><span class="token punctuation">(</span><span class="token string">&#39;#03f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;#0033ff&#39;</span></span>
<span class="line"><span class="token function">extendHex</span><span class="token punctuation">(</span><span class="token string">&#39;05a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;#0055aa&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-hextorgb-rgb" tabindex="-1"><a class="header-anchor" href="#_2-hextorgb-rgb"><span>2. hexToRGBÔºàRGBÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">hexToRGB</span> <span class="token operator">=</span> <span class="token parameter">hex</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> alpha <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    h <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">8</span><span class="token punctuation">)</span> alpha <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line">  h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&#39;rgb&#39;</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">24</span> <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">0x00ff0000</span> <span class="token operator">:</span> <span class="token number">0x00ff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">16</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">0x0000ff00</span> <span class="token operator">:</span> <span class="token number">0x0000ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">8</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>h <span class="token operator">&amp;</span> <span class="token number">0x000000ff</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span></span>
<span class="line">    <span class="token string">&#39;)&#39;</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;#27ae60ff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgba(39, 174, 96, 255)&#39;</span></span>
<span class="line"><span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;27ae60&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgb(39, 174, 96)&#39;</span></span>
<span class="line"><span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;#fff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgb(255, 255, 255)&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-rgbtohex-hex" tabindex="-1"><a class="header-anchor" href="#_3-rgbtohex-hex"><span>3. RGBToHexÔºàhexÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">RGBToHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">RGBToHex</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;ffa501&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-mask-Âä†ÂØÜ" tabindex="-1"><a class="header-anchor" href="#_4-mask-Âä†ÂØÜ"><span>4. maskÔºàÂä†ÂØÜÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span>cc<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> mask <span class="token operator">=</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>cc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;******7890&#39;</span></span>
<span class="line"><span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;*******890&#39;</span></span>
<span class="line"><span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;$$$$567890&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_5-prettybytes-Â≠óËäÇ" tabindex="-1"><a class="header-anchor" href="#_5-prettybytes-Â≠óËäÇ"><span>5. prettyBytesÔºàÂ≠óËäÇÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">prettyBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> addSpace <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token constant">UNITS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;KB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;YB&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token punctuation">(</span>addSpace <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">UNITS</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> exponent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>num <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">UNITS</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>num <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">**</span> exponent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span>precision<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token punctuation">(</span>addSpace <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">UNITS</span><span class="token punctuation">[</span>exponent<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1 KB&quot;</span></span>
<span class="line"><span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">27145424323.5821</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;-27.145 GB&quot;</span></span>
<span class="line"><span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123MB&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="_6-removenonascii-ascii" tabindex="-1"><a class="header-anchor" href="#_6-removenonascii-ascii"><span>6. removeNonASCIIÔºàASCIIÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">removeNonASCII</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\x20-\\x7E]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">removeNonASCII</span><span class="token punctuation">(</span><span class="token string">&#39;√§√Ñ√ß√á√©√â√™lorem-ipsum√∂√ñ√ê√æ√∫√ö&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;lorem-ipsum&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_7-splitlines-Êç¢Ë°å" tabindex="-1"><a class="header-anchor" href="#_7-splitlines-Êç¢Ë°å"><span>7. splitLinesÔºàÊç¢Ë°åÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">splitLines</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\r?\\n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">splitLines</span><span class="token punctuation">(</span><span class="token string">&#39;This\\nis a\\nmultiline\\nstring.\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;This&#39;, &#39;is a&#39;, &#39;multiline&#39;, &#39;string.&#39; , &#39;&#39;]</span></span>
<span class="line"></span></code></pre></div><h3 id="_8-stringpermutations-ÊéíÂ∫è" tabindex="-1"><a class="header-anchor" href="#_8-stringpermutations-ÊéíÂ∫è"><span>8. stringPermutationsÔºàÊéíÂ∫èÔºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">stringPermutations</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> str</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> letter<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">stringPermutations</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=&gt;</span> letter <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">stringPermutations</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;abc&#39;,&#39;acb&#39;,&#39;bac&#39;,&#39;bca&#39;,&#39;cab&#39;,&#39;cba&#39;]</span></span>
<span class="line"></span></code></pre></div><h3 id="_9-truncatestring-ÁúÅÁï•" tabindex="-1"><a class="header-anchor" href="#_9-truncatestring-ÁúÅÁï•"><span>9. truncateStringÔºàÁúÅÁï•Ôºâ</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/string" target="_blank" rel="noopener noreferrer">30 seconds of code (String)</a></p><p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">truncateString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> num <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> num <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span> <span class="token operator">:</span> str<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">truncateString</span><span class="token punctuation">(</span><span class="token string">&#39;boomerang&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boom...&#39;</span></span>
<span class="line"></span></code></pre></div>`,305)])])}const i=n(e,[["render",o]]),r=JSON.parse('{"path":"/frontend/utils/code-string.html","title":"Â≠óÁ¨¶‰∏≤","lang":"zh-CN","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"ÈïøÂ∫¶","slug":"ÈïøÂ∫¶","link":"#ÈïøÂ∫¶","children":[{"level":3,"title":"1. byteSize","slug":"_1-bytesize","link":"#_1-bytesize","children":[]}]},{"level":2,"title":"Âà§Êñ≠","slug":"Âà§Êñ≠","link":"#Âà§Êñ≠","children":[{"level":3,"title":"1. isAbsoluteURLÔºàURLÔºâ","slug":"_1-isabsoluteurl-url","link":"#_1-isabsoluteurl-url","children":[]},{"level":3,"title":"2. isAnagram","slug":"_2-isanagram","link":"#_2-isanagram","children":[]},{"level":3,"title":"3. isUpperCase/isLowerCase","slug":"_3-isuppercase-islowercase","link":"#_3-isuppercase-islowercase","children":[]},{"level":3,"title":"4. palindromeÔºàÂõûÊñáÔºâ","slug":"_4-palindrome-ÂõûÊñá","link":"#_4-palindrome-ÂõûÊñá","children":[]},{"level":3,"title":"5. yesNo","slug":"_5-yesno","link":"#_5-yesno","children":[]}]},{"level":2,"title":"Ê†ºÂºè","slug":"Ê†ºÂºè","link":"#Ê†ºÂºè","children":[{"level":3,"title":"1. capitalizeÔºàÈ¶ñÂ≠óÊØçÂ§ßÂÜôÔºâ","slug":"_1-capitalize-È¶ñÂ≠óÊØçÂ§ßÂÜô","link":"#_1-capitalize-È¶ñÂ≠óÊØçÂ§ßÂÜô","children":[]},{"level":3,"title":"2. expandTabsÔºàÊç¢Ë°åÁ¨¶Ôºâ","slug":"_2-expandtabs-Êç¢Ë°åÁ¨¶","link":"#_2-expandtabs-Êç¢Ë°åÁ¨¶","children":[]},{"level":3,"title":"3. capitalizeEveryWordÔºàÂçïËØçÂ§ßÂÜôÔºâ","slug":"_3-capitalizeeveryword-ÂçïËØçÂ§ßÂÜô","link":"#_3-capitalizeeveryword-ÂçïËØçÂ§ßÂÜô","children":[]},{"level":3,"title":"4. fromCamelCaseÔºàÈ©ºÂ≥∞Ôºâ","slug":"_4-fromcamelcase-È©ºÂ≥∞","link":"#_4-fromcamelcase-È©ºÂ≥∞","children":[]},{"level":3,"title":"5. indentStringÔºàÁº©ËøõÔºâ","slug":"_5-indentstring-Áº©Ëøõ","link":"#_5-indentstring-Áº©Ëøõ","children":[]},{"level":3,"title":"6. mapStringÔºàËá™ÂÆö‰πâÔºâ","slug":"_6-mapstring-Ëá™ÂÆö‰πâ","link":"#_6-mapstring-Ëá™ÂÆö‰πâ","children":[]},{"level":3,"title":"7. toCamelCaseÔºàÈ©ºÂ≥∞Ôºâ","slug":"_7-tocamelcase-È©ºÂ≥∞","link":"#_7-tocamelcase-È©ºÂ≥∞","children":[]},{"level":3,"title":"8. toKebabCaseÔºàÊ®™Á∫øÔºâ","slug":"_8-tokebabcase-Ê®™Á∫ø","link":"#_8-tokebabcase-Ê®™Á∫ø","children":[]},{"level":3,"title":"9. toSnakeCaseÔºà‰∏ãÂàíÁ∫øÔºâ","slug":"_9-tosnakecase-‰∏ãÂàíÁ∫ø","link":"#_9-tosnakecase-‰∏ãÂàíÁ∫ø","children":[]},{"level":3,"title":"10. toTitleCaseÔºàÊ†áÈ¢òÔºâ","slug":"_10-totitlecase-Ê†áÈ¢ò","link":"#_10-totitlecase-Ê†áÈ¢ò","children":[]}]},{"level":2,"title":"Á©∫Ê†º","slug":"Á©∫Ê†º","link":"#Á©∫Ê†º","children":[{"level":3,"title":"1. containsWhitespace","slug":"_1-containswhitespace","link":"#_1-containswhitespace","children":[]},{"level":3,"title":"2. compactWhitespace","slug":"_2-compactwhitespace","link":"#_2-compactwhitespace","children":[]}]},{"level":2,"title":"CSV","slug":"csv","link":"#csv","children":[{"level":3,"title":"1. CSVToArray","slug":"_1-csvtoarray","link":"#_1-csvtoarray","children":[]},{"level":3,"title":"2. CSVToJSON","slug":"_2-csvtojson","link":"#_2-csvtojson","children":[]}]},{"level":2,"title":"ËΩ¨‰πâ","slug":"ËΩ¨‰πâ","link":"#ËΩ¨‰πâ","children":[{"level":3,"title":"1. escapeHTMLÔºàHTMLÔºâ","slug":"_1-escapehtml-html","link":"#_1-escapehtml-html","children":[]},{"level":3,"title":"2. unescapeHTMLÔºàHTMLÔºâ","slug":"_2-unescapehtml-html","link":"#_2-unescapehtml-html","children":[]},{"level":3,"title":"3. escapeRegExpÔºàÊ≠£ÂàôÔºâ","slug":"_3-escaperegexp-Ê≠£Âàô","link":"#_3-escaperegexp-Ê≠£Âàô","children":[]},{"level":3,"title":"4. stripHTMLTagsÔºàHTMLÔºâ","slug":"_4-striphtmltags-html","link":"#_4-striphtmltags-html","children":[]}]},{"level":2,"title":"Êâ©Â±ï","slug":"Êâ©Â±ï","link":"#Êâ©Â±ï","children":[{"level":3,"title":"1. extendHexÔºàÈ¢úËâ≤Ôºâ","slug":"_1-extendhex-È¢úËâ≤","link":"#_1-extendhex-È¢úËâ≤","children":[]},{"level":3,"title":"2. hexToRGBÔºàRGBÔºâ","slug":"_2-hextorgb-rgb","link":"#_2-hextorgb-rgb","children":[]},{"level":3,"title":"3. RGBToHexÔºàhexÔºâ","slug":"_3-rgbtohex-hex","link":"#_3-rgbtohex-hex","children":[]},{"level":3,"title":"4. maskÔºàÂä†ÂØÜÔºâ","slug":"_4-mask-Âä†ÂØÜ","link":"#_4-mask-Âä†ÂØÜ","children":[]},{"level":3,"title":"5. prettyBytesÔºàÂ≠óËäÇÔºâ","slug":"_5-prettybytes-Â≠óËäÇ","link":"#_5-prettybytes-Â≠óËäÇ","children":[]},{"level":3,"title":"6. removeNonASCIIÔºàASCIIÔºâ","slug":"_6-removenonascii-ascii","link":"#_6-removenonascii-ascii","children":[]},{"level":3,"title":"7. splitLinesÔºàÊç¢Ë°åÔºâ","slug":"_7-splitlines-Êç¢Ë°å","link":"#_7-splitlines-Êç¢Ë°å","children":[]},{"level":3,"title":"8. stringPermutationsÔºàÊéíÂ∫èÔºâ","slug":"_8-stringpermutations-ÊéíÂ∫è","link":"#_8-stringpermutations-ÊéíÂ∫è","children":[]},{"level":3,"title":"9. truncateStringÔºàÁúÅÁï•Ôºâ","slug":"_9-truncatestring-ÁúÅÁï•","link":"#_9-truncatestring-ÁúÅÁï•","children":[]}]}],"git":{"updatedTime":1637398280000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":7,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"frontend/utils/code-string.md"}');export{i as comp,r as data};
