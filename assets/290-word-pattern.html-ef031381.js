import{_ as n,p as s,q as a,a1 as p}from"./framework-49860b1b.js";const t={},o=p(`<h1 id="单词规律" tabindex="-1"><a class="header-anchor" href="#单词规律" aria-hidden="true">#</a> 单词规律</h1><h2 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h2><div class="language-typescript" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">wordPattern</span><span class="token punctuation">(</span>pattern<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> words <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>length <span class="token operator">!==</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span>

  <span class="token keyword">const</span> patternMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> wordMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> p <span class="token operator">=</span> pattern<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> w <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> pm <span class="token operator">=</span> patternMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
    <span class="token keyword">const</span> wm <span class="token operator">=</span> wordMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pm <span class="token operator">&amp;&amp;</span> w <span class="token operator">!==</span> pm<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>wm <span class="token operator">&amp;&amp;</span> p <span class="token operator">!==</span> wm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>

    patternMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> w<span class="token punctuation">)</span>
    wordMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div>`,3),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","290-word-pattern.html.vue"]]);export{r as default};
