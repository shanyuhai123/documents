import{r as n,c as a,a as s,b as t,F as p,d as o,e,o as c}from"./app.f8e1a42d.js";import{_ as l}from"./plugin-vue_export-helper.5a098b48.js";const u={},i=s("h1",{id:"从-cli-开始",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#从-cli-开始","aria-hidden":"true"},"#"),o(" 从 CLI 开始")],-1),r=s("blockquote",null,[s("p",null,"CLI(Command-Line Interface) 虽可手动监听用户输入，但从头开始则显得过于麻烦了，借助社区的力量吧。")],-1),k=s("h2",{id:"工具包",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#工具包","aria-hidden":"true"},"#"),o(" 工具包")],-1),d=s("thead",null,[s("tr",null,[s("th",{style:{"text-align":"center"}},"工具"),s("th",null,"作用")])],-1),g={style:{"text-align":"center"}},m={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},h=o("commander"),f=s("td",null,"解析用户命令行的输入、参数",-1),b={style:{"text-align":"center"}},w={href:"https://www.npmjs.com/package/chalk",target:"_blank",rel:"noopener noreferrer"},y=o("chalk"),v=s("td",null,"美化控制台的输出内容：字体、颜色、背景色",-1),j={style:{"text-align":"center"}},x={href:"https://www.npmjs.com/package/inquirer",target:"_blank",rel:"noopener noreferrer"},q=o("inquirer"),L=s("td",null,"命令行交互",-1),_={style:{"text-align":"center"}},C={href:"https://www.npmjs.com/package/slash",target:"_blank",rel:"noopener noreferrer"},I=o("slash"),O=s("td",null,"在 Windows 中使用 / 路径",-1),$={style:{"text-align":"center"}},E={href:"https://www.npmjs.com/package/minimist",target:"_blank",rel:"noopener noreferrer"},F=o("minimist"),H=s("td",null,"解析参数",-1),G={style:{"text-align":"center"}},V={href:"https://www.npmjs.com/package/ora",target:"_blank",rel:"noopener noreferrer"},T=o("ora"),U=s("td",null,"优雅的加载效果",-1),W={style:{"text-align":"center"}},z={href:"https://www.npmjs.com/package/dotenv",target:"_blank",rel:"noopener noreferrer"},A=o("dotenv"),B=s("td",null,[o("从 "),s("code",null,".env"),o(" 文件中加载环境变量到 "),s("code",null,[o("p"),s("wbr"),o("rocess.env")])],-1),D={style:{"text-align":"center"}},J={href:"https://www.npmjs.com/package/yaml-front-matter",target:"_blank",rel:"noopener noreferrer"},K=o("yaml-front-matter"),M=s("td",null,[o("解析文件内的 "),s("code",null,"frontmatter")],-1),N={style:{"text-align":"center"}},P={href:"https://www.npmjs.com/package/portfinder",target:"_blank",rel:"noopener noreferrer"},Q=o("portfinder"),R=s("td",null,"寻找可用端口号",-1),S={style:{"text-align":"center"}},X={href:"https://www.npmjs.com/package/semver",target:"_blank",rel:"noopener noreferrer"},Y=o("semver"),Z=s("td",null,"校验版本",-1),nn=e('<h2 id="简单-cli" tabindex="-1"><a class="header-anchor" href="#简单-cli" aria-hidden="true">#</a> 简单 CLI</h2><h3 id="从-hello-cli-开始" tabindex="-1"><a class="header-anchor" href="#从-hello-cli-开始" aria-hidden="true">#</a> 从 HELLO CLI 开始</h3><p>初始化：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">mkdir</span> -p hello-cli/bin \n<span class="token builtin class-name">cd</span> hello-cli <span class="token operator">&amp;&amp;</span> <span class="token function">npm</span> init -y\n</code></pre></div><p>添加文件：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span> bin/cli.js <span class="token operator">&lt;&lt;</span> <span class="token string">EOF\n#! /usr/bin/env node\n\nconsole.log(&quot;Hello CLI&quot;)\nEOF</span>\n</code></pre></div><p>在 <code>package.json</code> 中指定入口：</p><div class="language-json ext-json"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./bin/cli.js&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>链接到全局并执行：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># 链接到全局</span>\n<span class="token function">npm</span> <span class="token function">link</span>\n\n<span class="token comment"># 执行</span>\nhello-cli\n<span class="token comment"># Hello CLI</span>\n</code></pre></div><h3 id="解析命令-commander" tabindex="-1"><a class="header-anchor" href="#解析命令-commander" aria-hidden="true">#</a> 解析命令 commander</h3><p>引入依赖：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> commander\n</code></pre></div><p>修改 <code>cli.js</code>：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token hashbang comment">#! /usr/bin/env node</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> program <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;commander&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token keyword">package</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../package.json&#39;</span><span class="token punctuation">)</span>\n\nprogram\n  <span class="token punctuation">.</span><span class="token function">version</span><span class="token punctuation">(</span><span class="token keyword">package</span><span class="token punctuation">.</span>version<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span><span class="token string">&#39;create &lt;app-name&gt;&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&#39;create a new project powered by cli-test&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">project name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nprogram<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>argv<span class="token punctuation">)</span>\n</code></pre></div><p>测试：</p><div class="language-bash ext-sh"><pre class="language-bash"><code>hello-cli\n\n<span class="token comment"># 输出</span>\nUsage: hello-cli <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span>\n\nOptions:\n  -V, --version      output the version number\n  -h, --help         display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span>\n\nCommands:\n  create <span class="token operator">&lt;</span>app-name<span class="token operator">&gt;</span>  create a new project powered by cli-test\n  <span class="token builtin class-name">help</span> <span class="token punctuation">[</span>command<span class="token punctuation">]</span>     display <span class="token builtin class-name">help</span> <span class="token keyword">for</span> <span class="token builtin class-name">command</span>\n  \nhello-cli -V\n<span class="token comment"># 1.0.0</span>\n\nhello-cli create my-app\n<span class="token comment"># project name is my-app</span>\n</code></pre></div><h3 id="交互及美化输出" tabindex="-1"><a class="header-anchor" href="#交互及美化输出" aria-hidden="true">#</a> 交互及美化输出</h3><p>引入依赖：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># 交互</span>\n<span class="token function">yarn</span> <span class="token function">add</span> inquirer\n<span class="token comment"># 美化</span>\n<span class="token function">yarn</span> <span class="token function">add</span> chalk\n</code></pre></div><p>修改 <code>action</code> 内容：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>program\n\t<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> ok<span class="token punctuation">,</span> color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;confirm&#39;</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Generate project in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chalk<span class="token punctuation">.</span><span class="token function">cyan</span><span class="token punctuation">(</span><span class="token string">&#39;current&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> directory?</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token string">&#39;input color&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">your project is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chalk<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="加载效果" tabindex="-1"><a class="header-anchor" href="#加载效果" aria-hidden="true">#</a> 加载效果</h3><p>引入依赖：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> ora\n</code></pre></div><p>再调整 <code>action</code>：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code>program\n\t<span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> ok<span class="token punctuation">,</span> color <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> inquirer<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;ok&#39;</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;confirm&#39;</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Generate project in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chalk<span class="token punctuation">.</span><span class="token function">cyan</span><span class="token punctuation">(</span><span class="token string">&#39;current&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> directory?</span><span class="token template-punctuation string">`</span></span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;color&#39;</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>\n        message<span class="token operator">:</span> <span class="token string">&#39;input color&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n    \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> spinner <span class="token operator">=</span> <span class="token function">ora</span><span class="token punctuation">(</span><span class="token string">&#39;Loading unicorns&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      spinner<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span>\n\n      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        spinner<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        spinner<span class="token punctuation">.</span><span class="token function">succeed</span><span class="token punctuation">(</span><span class="token string">&#39;Loading succeed&#39;</span><span class="token punctuation">)</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">your project is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>chalk<span class="token punctuation">[</span>color<span class="token punctuation">]</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre></div>',27);var an=l(u,[["render",function(o,e){const l=n("OutboundLink");return c(),a(p,null,[i,r,k,s("table",null,[d,s("tbody",null,[s("tr",null,[s("td",g,[s("a",m,[h,t(l)])]),f]),s("tr",null,[s("td",b,[s("a",w,[y,t(l)])]),v]),s("tr",null,[s("td",j,[s("a",x,[q,t(l)])]),L]),s("tr",null,[s("td",_,[s("a",C,[I,t(l)])]),O]),s("tr",null,[s("td",$,[s("a",E,[F,t(l)])]),H]),s("tr",null,[s("td",G,[s("a",V,[T,t(l)])]),U]),s("tr",null,[s("td",W,[s("a",z,[A,t(l)])]),B]),s("tr",null,[s("td",D,[s("a",J,[K,t(l)])]),M]),s("tr",null,[s("td",N,[s("a",P,[Q,t(l)])]),R]),s("tr",null,[s("td",S,[s("a",X,[Y,t(l)])]),Z])])]),nn],64)}]]);export{an as default};
