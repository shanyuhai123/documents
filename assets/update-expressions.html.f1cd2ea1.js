import{r as e,c as a,a as n,b as s,F as t,e as l,d as o,o as r}from"./app.7c508f0c.js";import{_ as p}from"./plugin-vue_export-helper.5a098b48.js";const u={},c=l('<h2 id="自增-减" tabindex="-1"><a class="header-anchor" href="#自增-减" aria-hidden="true">#</a> 自增/减</h2><p>自增/减操作分为两种：</p><ul><li>前置递增/减：<code>a++/a--</code></li><li>后置递增/减：<code>++a/--a</code></li></ul><p>对于自增/减操作，初学时总是看到这样错误的说明：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> uid <span class="token operator">=</span> id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token comment">// 赋值运算符优先于算数运算符，先执行赋值操作，再执行++操作</span>\n\n<span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> uid <span class="token operator">=</span> <span class="token operator">++</span>id<span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token comment">// 算数运算符优先于赋值运算符，先执行++操作，再执行赋值操作</span>\n</code></pre></div>',5),d=o("其实稍微翻一下 "),i={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"},k=o("MDN"),h=o(" 或其余的书都可以得到：后置递增/减的优先级为 18，前置递增/减的优先级为 17，而赋值操作的优先级为 3。"),m=n("h2",{id:"原理定义",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#原理定义","aria-hidden":"true"},"#"),o(" 原理定义")],-1),x=o("在 "),g={href:"https://tc39.es/ecma262/#sec-update-expressions",target:"_blank",rel:"noopener noreferrer"},f=o("ECMA"),V=o(" 标准中可以找到如下："),b=n("div",{class:"language-text ext-text"},[n("pre",{class:"language-text"},[n("code",null,"# 12.4.5 Postfix Decrement Operator（后置递增）\n1. Let lhs be the result of evaluating LeftHandSideExpression.\n\n2. Let oldValue be ? ToNumeric(? GetValue(lhs)).\n\n3. Let newValue be ! Type(oldValue)::subtract(oldValue, Type(oldValue)::unit).\n\n4. Perform ? PutValue(lhs, newValue).\n\n5. Return oldValue.\n")])],-1),v=n("div",{class:"language-text ext-text"},[n("pre",{class:"language-text"},[n("code",null,"# 12.4.7 Prefix Decrement Operator（前置递增）\n1. Let expr be the result of evaluating UnaryExpression.\n\n2. Let oldValue be ? ToNumeric(? GetValue(expr)).\n\n3. Let newValue be ! Type(oldValue)::add(oldValue, Type(oldValue)::unit).\n\n4. Perform ? PutValue(expr, newValue).\n\n5. Return newValue.\n")])],-1),w=n("p",null,[o("对比两个第五项返回值操作，可以发现"),n("strong",null,"后置递增是返回旧的值"),o("，而"),n("strong",null,"前置递增是返回新的值"),o("。")],-1),y=n("p",null,"赋值操作是将返回值赋给对应的变量，那么结果就很明确了。",-1);var L=p(u,[["render",function(l,o){const p=e("OutboundLink");return r(),a(t,null,[c,n("p",null,[d,n("a",i,[k,s(p)]),h]),m,n("p",null,[x,n("a",g,[f,s(p)]),V]),b,v,w,y],64)}]]);export{L as default};
