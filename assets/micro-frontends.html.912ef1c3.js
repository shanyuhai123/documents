import{r as e,c as a,a as r,b as i,F as d,d as n,e as h,o}from"./app.bbd424e3.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const t={},l=r("h1",{id:"微前端",tabindex:"-1"},[r("a",{class:"header-anchor",href:"#微前端","aria-hidden":"true"},"#"),n(" 微前端")],-1),c=n("随着前端业务场景越来越复杂，而"),f={href:"https://micro-frontends.org/",target:"_blank",rel:"noopener noreferrer"},u=n("微前端"),p=n("这一概念则提供了一种解决方案。"),m=h('<h2 id="iframe" tabindex="-1"><a class="header-anchor" href="#iframe" aria-hidden="true">#</a> iframe</h2><p><code>iframe</code> 彻底隔绝了应用间的上下文：</p><ul><li>父子之间的网页链接是不同的，浏览器一刷新，<code>iframe</code> 中的状态就没了，后退、前进按钮无法使用</li><li>父子之间的 UI 难以同步，内嵌的 <code>iframe</code> 并不会自动调节宽高，而且通信困难</li><li>全局上下文完全隔离，内存变量不共享，则需要完成 <code>iframe</code> 之间的通信及变量同步设计</li><li>慢，每次进子应用，浏览器都需要重新完整加载资源</li></ul><h2 id="方案" tabindex="-1"><a class="header-anchor" href="#方案" aria-hidden="true">#</a> 方案</h2><h3 id="qiankun" tabindex="-1"><a class="header-anchor" href="#qiankun" aria-hidden="true">#</a> qiankun</h3><h3 id="emp" tabindex="-1"><a class="header-anchor" href="#emp" aria-hidden="true">#</a> emp</h3>',6);var b=s(t,[["render",function(n,h){const s=e("OutboundLink");return o(),a(d,null,[l,r("p",null,[c,r("a",f,[u,i(s)]),p]),m],64)}]]);export{b as default};
