import{_ as a,p as s,q as t,a1 as p}from"./framework-e3e34937.js";const o={};function c(e,n){return s(),t("div",null,n[0]||(n[0]=[p(`<h1 id="es6-的简单使用" tabindex="-1"><a class="header-anchor" href="#es6-的简单使用" aria-hidden="true">#</a> ES6 的简单使用</h1><blockquote><p>作为一个前端，你需要牢记 ES6 的每个 API，尤其是数组、对象、字符串。</p></blockquote><h2 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h2><h3 id="_1-从箭头函数开始" tabindex="-1"><a class="header-anchor" href="#_1-从箭头函数开始" aria-hidden="true">#</a> 1. 从箭头函数开始</h3><p>认识 ES6 便被箭头函数的简洁所惊艳了。</p><p>但在使用中也有一些注意事项。</p><h4 id="返回对象" tabindex="-1"><a class="header-anchor" href="#返回对象" aria-hidden="true">#</a> 返回对象</h4><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>由于语法解析的问题，大括号会被解释为代码块，直接返回对象时需小括号进行包裹。</p><h4 id="禁止构造函数" tabindex="-1"><a class="header-anchor" href="#禁止构造函数" aria-hidden="true">#</a> 禁止构造函数</h4><p>箭头函数都没有自己的 <code>this</code>、<code>arguments</code>、<code>super</code> 和 <code>new.target</code>，你是要搞哪样？</p><h2 id="数组方法" tabindex="-1"><a class="header-anchor" href="#数组方法" aria-hidden="true">#</a> 数组方法</h2><h3 id="_1-转化为数组" tabindex="-1"><a class="header-anchor" href="#_1-转化为数组" aria-hidden="true">#</a> 1. 转化为数组</h3><p>字符串转化，其实只要是类数组对象（拥有一个 <code>length</code> 属性和若干索引属性的任意对象）都行：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 不要对 split 念念不忘了</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span>
</code></pre></div><h3 id="_2-生成连续值" tabindex="-1"><a class="header-anchor" href="#_2-生成连续值" aria-hidden="true">#</a> 2. 生成连续值</h3><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">range</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> step</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token punctuation">(</span>stop <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> step<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [0, 1, 2, 3, 4] </span>

<span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// [1, 3, 5, 7, 9]</span>

<span class="token function">range</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;Z&#39;</span><span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;I&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;M&quot;, &quot;N&quot;, &quot;O&quot;, &quot;P&quot;, &quot;Q&quot;, &quot;R&quot;, &quot;S&quot;, &quot;T&quot;, &quot;U&quot;, &quot;V&quot;, &quot;W&quot;, &quot;X&quot;, &quot;Y&quot;, &quot;Z&quot;]</span>
</code></pre></div><h3 id="_3-修改方法" tabindex="-1"><a class="header-anchor" href="#_3-修改方法" aria-hidden="true">#</a> 3. 修改方法</h3><p>需要小心一部分方法会修改原数组对象：</p><ul><li><code>Array.prototype.copyWithin</code></li><li><code>Array.prototype.fill</code></li><li><code>Array.prototype.pop</code></li><li><code>Array.prototype.push</code></li><li><code>Array.prototype.shift</code></li><li><code>Array.prototype.unshift</code></li><li><code>Array.prototype.reverse</code></li><li><code>Array.prototype.sort</code></li><li><code>Array.prototype.splice</code></li></ul><h2 id="对象方法" tabindex="-1"><a class="header-anchor" href="#对象方法" aria-hidden="true">#</a> 对象方法</h2><p>在 ES5 时存在三种：</p><ol><li><code>native object</code>（原生对象），指语义完全由规范定义且不掺杂任何宿主环境定义的对象。</li><li><code>built-in object</code> （内置对象），如 Math、Date 等。</li><li><code>host object</code> （宿主对象），由执行环境提供，如浏览器的 window 和 V8 的 global。</li></ol><p>而 ES6 时划分更细，更新为四种：</p><ol><li><code>ordinary object</code> （普通对象），需要具备了对象的所有基本内置方法。</li><li><code>exotic object</code> （外来对象），与“普通对象”相反，所以一个对象不是“普通对象”，就是“外来对象”。</li><li><code>standard object</code> （标准对象），规范定义的对象（？）。</li><li><code>built-in object</code> （内置对象），同 ES5。</li></ol><h2 id="字符串方法" tabindex="-1"><a class="header-anchor" href="#字符串方法" aria-hidden="true">#</a> 字符串方法</h2><h3 id="_1-字符串补全" tabindex="-1"><a class="header-anchor" href="#_1-字符串补全" aria-hidden="true">#</a> 1. 字符串补全</h3><p>补全很简单，使用 <code>padStart</code> 和 <code>padEnd</code> 即可：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;foofoofabc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&quot;123465&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123abc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// &quot;00000abc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// &quot;abc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// &quot; abc&quot;</span>
<span class="token string">&#39;abc&#39;</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// &quot;       abc&quot;</span>

<span class="token comment">// \`padEnd\` 在末尾添加</span>
</code></pre></div><h3 id="_2-获取字符及对应的unicode" tabindex="-1"><a class="header-anchor" href="#_2-获取字符及对应的unicode" aria-hidden="true">#</a> 2. 获取字符及对应的Unicode</h3><p>字符串取值与数组一致，都是根据索引：</p><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> anyString <span class="token operator">=</span> <span class="token string">&quot;Brave new world&quot;</span><span class="token punctuation">;</span>

anyString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;B&quot;</span>
anyString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;B&quot;</span>
anyString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;r&quot;</span>
anyString<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;&quot;</span>

anyString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 66</span>
anyString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 114</span>
anyString<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>

<span class="token comment">// 比 charCodeAt 更强</span>
anyString<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 66</span>
anyString<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 114</span>
anyString<span class="token punctuation">.</span><span class="token function">codePointAt</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre></div>`,32)]))}const l=a(o,[["render",c],["__file","easy-to-use-es6.html.vue"]]);export{l as default};
