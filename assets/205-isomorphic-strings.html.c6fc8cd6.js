import{e as n}from"./app.b7a98728.js";import{_ as s}from"./plugin-vue_export-helper.5a098b48.js";const a={},p=n(`<h1 id="\u540C\u6784\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u540C\u6784\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u540C\u6784\u5B57\u7B26\u4E32</h1><h2 id="\u54C8\u5E0C\u8868" tabindex="-1"><a class="header-anchor" href="#\u54C8\u5E0C\u8868" aria-hidden="true">#</a> \u54C8\u5E0C\u8868</h2><p>\u6620\u5C04\u4E0D\u4E00\u5B9A\u76F8\u540C\uFF0C\u9700\u8981\u51C6\u5907\u4E24\u4E2A\u54C8\u5E0C\u8868\u3002</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> t<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> sVal <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> tVal <span class="token operator">=</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">const</span> msVal <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sVal<span class="token punctuation">)</span>
    <span class="token keyword">const</span> mtVal <span class="token operator">=</span> mt<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tVal<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>msVal <span class="token operator">!==</span> tVal <span class="token operator">&amp;&amp;</span> msVal <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>mtVal <span class="token operator">!==</span> sVal <span class="token operator">&amp;&amp;</span> mtVal <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>

    ms<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>sVal<span class="token punctuation">,</span> tVal<span class="token punctuation">)</span>
    mt<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tVal<span class="token punctuation">,</span> sVal<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre></div>`,4);function t(o,e){return p}var k=s(a,[["render",t]]);export{k as default};
