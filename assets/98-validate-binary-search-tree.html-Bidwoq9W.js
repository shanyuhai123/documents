import{_ as s,c as a,a as p,o as t}from"./app-BoSqM2g3.js";const e={};function o(l,n){return t(),a("div",null,[...n[0]||(n[0]=[p(`<h1 id="验证二叉搜索树" tabindex="-1"><a class="header-anchor" href="#验证二叉搜索树"><span>验证二叉搜索树</span></a></h1><h2 id="中序遍历" tabindex="-1"><a class="header-anchor" href="#中序遍历"><span>中序遍历</span></a></h2><p>二叉搜索树的中序遍历是递增的，利用该特性进行处理。</p><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> prev <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> rec <span class="token operator">=</span> <span class="token punctuation">(</span>root<span class="token operator">:</span> TreeNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">rec</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> prev<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    prev <span class="token operator">=</span> root<span class="token punctuation">.</span>val</span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">rec</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,4)])])}const r=s(e,[["render",o]]),i=JSON.parse('{"path":"/algorithms/98-validate-binary-search-tree.html","title":"验证二叉搜索树","lang":"zh-CN","frontmatter":{"autoSort":-98},"headers":[{"level":2,"title":"中序遍历","slug":"中序遍历","link":"#中序遍历","children":[]}],"git":{"updatedTime":1640272311000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/98-validate-binary-search-tree.md"}');export{r as comp,i as data};
