import{r as o,c as e,a as n,b as t,F as c,d as s,e as p,o as l}from"./app.76f1a631.js";import{_ as i}from"./plugin-vue_export-helper.5a098b48.js";const r={},u=n("h2",{id:"base64",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#base64","aria-hidden":"true"},"#"),s(" base64")],-1),k=n("h3",{id:"_1-btoa-\u7F16\u7801",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-btoa-\u7F16\u7801","aria-hidden":"true"},"#"),s(" 1. btoa\uFF08\u7F16\u7801\uFF09")],-1),g=n("p",null,[n("strong",null,"FROM")],-1),d={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},f=s("30 seconds of code (Node)"),m=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">btoa</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">&#39;foobar1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Zm9vYmFyMQ==&#39;</span>
</code></pre></div><h3 id="_2-atob-\u89E3\u7801" tabindex="-1"><a class="header-anchor" href="#_2-atob-\u89E3\u7801" aria-hidden="true">#</a> 2. atob\uFF08\u89E3\u7801\uFF09</h3><p><strong>FROM</strong></p>`,6),h={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},_=s("30 seconds of code (Node)"),v=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">atob</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">&#39;Zm9vYmFyMQ==&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foobar1&#39;1</span>
</code></pre></div><h2 id="\u63A7\u5236\u53F0" tabindex="-1"><a class="header-anchor" href="#\u63A7\u5236\u53F0" aria-hidden="true">#</a> \u63A7\u5236\u53F0</h2><h3 id="_1-colorize-\u8272\u5F69" tabindex="-1"><a class="header-anchor" href="#_1-colorize-\u8272\u5F69" aria-hidden="true">#</a> 1. colorize\uFF08\u8272\u5F69\uFF09</h3><p><strong>FROM</strong></p>`,7),b={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},j=s("30 seconds of code (Node)"),w=n("p",null,[n("strong",null,"DETAIL\uFF1A")],-1),x={href:"https://www.npmjs.com/package/colors",target:"_blank",rel:"noopener noreferrer"},y=s("colors"),N=s(" \u66F4\u8BE6\u7EC6\u3002"),S=p('<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">colorize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  black<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[30m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  red<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[31m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  green<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[32m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  yellow<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[33m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  blue<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[34m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  magenta<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[35m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  cyan<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[36m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  white<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[37m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgBlack<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[40m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgRed<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[41m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgGreen<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[42m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgYellow<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[43m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgBlue<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[44m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgMagenta<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[45m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgCyan<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[46m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgWhite<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[47m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo&#39; (red letters)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bgBlue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo bar&#39; (blue background)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">.</span>bgWhite<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo bar&#39; (first word in yellow letters, second word in green letters, white background for both)</span>\n</code></pre></div><h2 id="\u64CD\u4F5C" tabindex="-1"><a class="header-anchor" href="#\u64CD\u4F5C" aria-hidden="true">#</a> \u64CD\u4F5C</h2><h3 id="_1-createdirifnotexists-\u521B\u5EFA\u76EE\u5F55" tabindex="-1"><a class="header-anchor" href="#_1-createdirifnotexists-\u521B\u5EFA\u76EE\u5F55" aria-hidden="true">#</a> 1. createDirIfNotExists\uFF08\u521B\u5EFA\u76EE\u5F55\uFF09</h3><p><strong>FROM</strong></p>',7),F={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},O=s("30 seconds of code (Node)"),E=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">createDirIfNotExists</span> <span class="token operator">=</span> <span class="token parameter">dir</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">?</span> fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">createDirIfNotExists</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// creates the directory &#39;test&#39;, if it doesn&#39;t exist</span>
</code></pre></div><h3 id="_2-jsontofile-\u521B\u5EFA\u6587\u4EF6" tabindex="-1"><a class="header-anchor" href="#_2-jsontofile-\u521B\u5EFA\u6587\u4EF6" aria-hidden="true">#</a> 2. JSONToFile\uFF08\u521B\u5EFA\u6587\u4EF6\uFF09</h3><p><strong>FROM</strong></p>`,6),M={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},I=s("30 seconds of code (Node)"),T=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">JSONToFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">JSONToFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token string">&#39;is passed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;testJsonFile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// writes the object to &#39;testJsonFile.json&#39;</span>
</code></pre></div><h3 id="_3-readfilelines-\u8BFB\u53D6\u6587\u4EF6\u884C" tabindex="-1"><a class="header-anchor" href="#_3-readfilelines-\u8BFB\u53D6\u6587\u4EF6\u884C" aria-hidden="true">#</a> 3. readFileLines\uFF08\u8BFB\u53D6\u6587\u4EF6\u884C\uFF09</h3><p><strong>FROM</strong></p>`,6),U={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},C=s("30 seconds of code (Node)"),R=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">readFileLines</span> <span class="token operator">=</span> <span class="token parameter">filename</span> <span class="token operator">=&gt;</span>
  fs
    <span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;UTF8&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">/*
contents of test.txt :
  line1
  line2
  line3
  ___________________________
*/</span>
<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">readFileLines</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;line1&#39;, &#39;line2&#39;, &#39;line3&#39;]</span>
</code></pre></div><h3 id="_4-untildify-\u66FF\u6362\u6CE2\u6D6A\u53F7" tabindex="-1"><a class="header-anchor" href="#_4-untildify-\u66FF\u6362\u6CE2\u6D6A\u53F7" aria-hidden="true">#</a> 4. untildify\uFF08\u66FF\u6362\u6CE2\u6D6A\u53F7\uFF09</h3><p><strong>FROM</strong></p>`,6),L={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},$=s("30 seconds of code (Node)"),A=p('<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">untildify</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^~($|\\/|\\\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">homedir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">$1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">untildify</span><span class="token punctuation">(</span><span class="token string">&#39;~/node&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/Users/aUser/node&#39;</span>\n</code></pre></div><h2 id="crypto" tabindex="-1"><a class="header-anchor" href="#crypto" aria-hidden="true">#</a> crypto</h2><h3 id="_1-hashnode-\u54C8\u5E0C" tabindex="-1"><a class="header-anchor" href="#_1-hashnode-\u54C8\u5E0C" aria-hidden="true">#</a> 1. hashNode\uFF08\u54C8\u5E0C\uFF09</h3><p><strong>FROM</strong></p>',7),P={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},X=s("30 seconds of code (Node)"),D=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;crypto&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">hashNode</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>
  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>
          crypto
            <span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&#39;sha256&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token number">0</span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">hashNode</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> foo<span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;04aa106279f5977f59f9067fa9712afc4aedc6f5862a8defc34552d8c7206393&#39;</span>
</code></pre></div><h3 id="_2-uuidgeneratornode-uuid" tabindex="-1"><a class="header-anchor" href="#_2-uuidgeneratornode-uuid" aria-hidden="true">#</a> 2. UUIDGeneratorNode\uFF08UUID\uFF09</h3><p><strong>FROM</strong></p>`,6),q={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},z=s("30 seconds of code (Node)"),B=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;crypto&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">UUIDGeneratorNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1e7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">1e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">4e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">8e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">1e11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[018]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span>
    <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">UUIDGeneratorNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;79c7c136-60ee-40a2-beb2-856f1feabefc&#39;</span>
</code></pre></div><h2 id="\u73AF\u5883" tabindex="-1"><a class="header-anchor" href="#\u73AF\u5883" aria-hidden="true">#</a> \u73AF\u5883</h2><h3 id="_1-hasflags" tabindex="-1"><a class="header-anchor" href="#_1-hasflags" aria-hidden="true">#</a> 1. hasFlags</h3><p><strong>FROM</strong></p>`,7),J={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},W=s("30 seconds of code (Node)"),V=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">hasFlags</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>flags</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  flags<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">flag</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-{1,2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">?</span> flag <span class="token operator">:</span> <span class="token string">&#39;--&#39;</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// node myScript.js -s --test --cool=true</span>
<span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;-s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;--test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cool=true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;special&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><h3 id="_2-istravisci" tabindex="-1"><a class="header-anchor" href="#_2-istravisci" aria-hidden="true">#</a> 2. isTravisCI</h3><p><strong>FROM</strong></p>`,6),G={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},Y=s("30 seconds of code (Node)"),Q=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isTravisCI</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;TRAVIS&#39;</span> <span class="token keyword">in</span> process<span class="token punctuation">.</span>env <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;CI&#39;</span> <span class="token keyword">in</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isTravisCI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true (if code is running on Travis CI)</span>
</code></pre></div><h2 id="\u5224\u65AD\u6D41" tabindex="-1"><a class="header-anchor" href="#\u5224\u65AD\u6D41" aria-hidden="true">#</a> \u5224\u65AD\u6D41</h2><h3 id="_1-isduplexstream" tabindex="-1"><a class="header-anchor" href="#_1-isduplexstream" aria-hidden="true">#</a> 1. isDuplexStream</h3><p><strong>FROM</strong></p>`,7),Z={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},H=s("30 seconds of code (Node)"),K=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isDuplexStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>
  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_read <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_readableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_write <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_writableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Stream <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;stream&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">isDuplexStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Stream<span class="token punctuation">.</span>Duplex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h3 id="_2-isreadablestream" tabindex="-1"><a class="header-anchor" href="#_2-isreadablestream" aria-hidden="true">#</a> 2. isReadableStream</h3><p><strong>FROM</strong></p>`,6),nn={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},sn=s("30 seconds of code (Node)"),an=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isReadableStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>
  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_read <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_readableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">isReadableStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h3 id="_3-isstream" tabindex="-1"><a class="header-anchor" href="#_3-isstream" aria-hidden="true">#</a> 3. isStream</h3><p><strong>FROM</strong></p>`,6),tn={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},pn=s("30 seconds of code (Node)"),on=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">isStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h3 id="_4-iswritablestream" tabindex="-1"><a class="header-anchor" href="#_4-iswritablestream" aria-hidden="true">#</a> 4. isWritableStream</h3><p><strong>FROM</strong></p>`,6),en={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},cn=s("30 seconds of code (Node)"),ln=p(`<p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isWritableStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>
  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_write <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>
  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_writableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">isWritableStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div>`,4);function rn(un,kn){const a=o("OutboundLink");return l(),e(c,null,[u,k,g,n("p",null,[n("a",d,[f,t(a)])]),m,n("p",null,[n("a",h,[_,t(a)])]),v,n("p",null,[n("a",b,[j,t(a)])]),w,n("p",null,[n("a",x,[y,t(a)]),N]),S,n("p",null,[n("a",F,[O,t(a)])]),E,n("p",null,[n("a",M,[I,t(a)])]),T,n("p",null,[n("a",U,[C,t(a)])]),R,n("p",null,[n("a",L,[$,t(a)])]),A,n("p",null,[n("a",P,[X,t(a)])]),D,n("p",null,[n("a",q,[z,t(a)])]),B,n("p",null,[n("a",J,[W,t(a)])]),V,n("p",null,[n("a",G,[Y,t(a)])]),Q,n("p",null,[n("a",Z,[H,t(a)])]),K,n("p",null,[n("a",nn,[sn,t(a)])]),an,n("p",null,[n("a",tn,[pn,t(a)])]),on,n("p",null,[n("a",en,[cn,t(a)])]),ln],64)}var fn=i(r,[["render",rn]]);export{fn as default};
