import{_ as s,c as a,a as t,o as p}from"./app-CQrWi6O2.js";const e={};function o(c,n){return p(),a("div",null,[...n[0]||(n[0]=[t(`<h1 id="node" tabindex="-1"><a class="header-anchor" href="#node"><span>Node</span></a></h1><h2 id="base64" tabindex="-1"><a class="header-anchor" href="#base64"><span>base64</span></a></h2><h3 id="_1-btoa-编码" tabindex="-1"><a class="header-anchor" href="#_1-btoa-编码"><span>1. btoa（编码）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">btoa</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">&#39;foobar1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Zm9vYmFyMQ==&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-atob-解码" tabindex="-1"><a class="header-anchor" href="#_2-atob-解码"><span>2. atob（解码）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">atob</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">&#39;Zm9vYmFyMQ==&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foobar1&#39;1</span></span>
<span class="line"></span></code></pre></div><h2 id="控制台" tabindex="-1"><a class="header-anchor" href="#控制台"><span>控制台</span></a></h2><h3 id="_1-colorize-色彩" tabindex="-1"><a class="header-anchor" href="#_1-colorize-色彩"><span>1. colorize（色彩）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>DETAIL：</strong></p><p><a href="https://www.npmjs.com/package/colors" target="_blank" rel="noopener noreferrer">colors</a> 更详细。</p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">colorize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">black</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[30m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">red</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[31m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">green</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[32m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">yellow</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[33m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">blue</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[34m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">magenta</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[35m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">cyan</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[36m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">white</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[37m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bgBlack</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[40m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bgRed</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[41m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bgGreen</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[42m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bgYellow</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[43m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bgBlue</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[44m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bgMagenta</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[45m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bgCyan</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[46m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">bgWhite</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">\\x1b[47m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo&#39; (red letters)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bgBlue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo bar&#39; (blue background)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">.</span>bgWhite<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo bar&#39; (first word in yellow letters, second word in green letters, white background for both)</span></span>
<span class="line"></span></code></pre></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作"><span>操作</span></a></h2><h3 id="_1-createdirifnotexists-创建目录" tabindex="-1"><a class="header-anchor" href="#_1-createdirifnotexists-创建目录"><span>1. createDirIfNotExists（创建目录）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">createDirIfNotExists</span> <span class="token operator">=</span> <span class="token parameter">dir</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">?</span> fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">createDirIfNotExists</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// creates the directory &#39;test&#39;, if it doesn&#39;t exist</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-jsontofile-创建文件" tabindex="-1"><a class="header-anchor" href="#_2-jsontofile-创建文件"><span>2. JSONToFile（创建文件）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">JSONToFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">JSONToFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token string">&#39;is passed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;testJsonFile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// writes the object to &#39;testJsonFile.json&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-readfilelines-读取文件行" tabindex="-1"><a class="header-anchor" href="#_3-readfilelines-读取文件行"><span>3. readFileLines（读取文件行）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">readFileLines</span> <span class="token operator">=</span> <span class="token parameter">filename</span> <span class="token operator">=&gt;</span></span>
<span class="line">  fs</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;UTF8&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">/*</span>
<span class="line">contents of test.txt :</span>
<span class="line">  line1</span>
<span class="line">  line2</span>
<span class="line">  line3</span>
<span class="line">  ___________________________</span>
<span class="line">*/</span></span>
<span class="line"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">readFileLines</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;line1&#39;, &#39;line2&#39;, &#39;line3&#39;]</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-untildify-替换波浪号" tabindex="-1"><a class="header-anchor" href="#_4-untildify-替换波浪号"><span>4. untildify（替换波浪号）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">untildify</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^~($|\\/|\\\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">homedir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">$1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">untildify</span><span class="token punctuation">(</span><span class="token string">&#39;~/node&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/Users/aUser/node&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="crypto" tabindex="-1"><a class="header-anchor" href="#crypto"><span>crypto</span></a></h2><h3 id="_1-hashnode-哈希" tabindex="-1"><a class="header-anchor" href="#_1-hashnode-哈希"><span>1. hashNode（哈希）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;crypto&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">hashNode</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span></span>
<span class="line">  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">        <span class="token function">resolve</span><span class="token punctuation">(</span></span>
<span class="line">          crypto</span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&#39;sha256&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token number">0</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">hashNode</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;04aa106279f5977f59f9067fa9712afc4aedc6f5862a8defc34552d8c7206393&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-uuidgeneratornode-uuid" tabindex="-1"><a class="header-anchor" href="#_2-uuidgeneratornode-uuid"><span>2. UUIDGeneratorNode（UUID）</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;crypto&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">UUIDGeneratorNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1e7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">1e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">4e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">8e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">1e11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[018]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span></span>
<span class="line">    <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">UUIDGeneratorNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;79c7c136-60ee-40a2-beb2-856f1feabefc&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境"><span>环境</span></a></h2><h3 id="_1-hasflags" tabindex="-1"><a class="header-anchor" href="#_1-hasflags"><span>1. hasFlags</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">hasFlags</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>flags</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">  flags<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">flag</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-{1,2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">?</span> flag <span class="token operator">:</span> <span class="token string">&#39;--&#39;</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// node myScript.js -s --test --cool=true</span></span>
<span class="line"><span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;-s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;--test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cool=true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"><span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;special&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-istravisci" tabindex="-1"><a class="header-anchor" href="#_2-istravisci"><span>2. isTravisCI</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isTravisCI</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;TRAVIS&#39;</span> <span class="token keyword">in</span> process<span class="token punctuation">.</span>env <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;CI&#39;</span> <span class="token keyword">in</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token function">isTravisCI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true (if code is running on Travis CI)</span></span>
<span class="line"></span></code></pre></div><h2 id="判断流" tabindex="-1"><a class="header-anchor" href="#判断流"><span>判断流</span></a></h2><h3 id="_1-isduplexstream" tabindex="-1"><a class="header-anchor" href="#_1-isduplexstream"><span>1. isDuplexStream</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isDuplexStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span></span>
<span class="line">  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_read <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_readableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_write <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_writableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> Stream <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;stream&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">isDuplexStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Stream<span class="token punctuation">.</span>Duplex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-isreadablestream" tabindex="-1"><a class="header-anchor" href="#_2-isreadablestream"><span>2. isReadableStream</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isReadableStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span></span>
<span class="line">  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_read <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_readableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">isReadableStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="_3-isstream" tabindex="-1"><a class="header-anchor" href="#_3-isstream"><span>3. isStream</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">isStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div><h3 id="_4-iswritablestream" tabindex="-1"><a class="header-anchor" href="#_4-iswritablestream"><span>4. isWritableStream</span></a></h3><p><strong>FROM</strong></p><p><a href="https://www.30secondsofcode.org/tag/node" target="_blank" rel="noopener noreferrer">30 seconds of code (Node)</a></p><p><strong>FUNCTION：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">isWritableStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span></span>
<span class="line">  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_write <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_writableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">isWritableStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span></span>
<span class="line"></span></code></pre></div>`,114)])])}const i=s(e,[["render",o]]),r=JSON.parse('{"path":"/frontend/utils/code-node.html","title":"Node","lang":"zh-CN","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"base64","slug":"base64","link":"#base64","children":[{"level":3,"title":"1. btoa（编码）","slug":"_1-btoa-编码","link":"#_1-btoa-编码","children":[]},{"level":3,"title":"2. atob（解码）","slug":"_2-atob-解码","link":"#_2-atob-解码","children":[]}]},{"level":2,"title":"控制台","slug":"控制台","link":"#控制台","children":[{"level":3,"title":"1. colorize（色彩）","slug":"_1-colorize-色彩","link":"#_1-colorize-色彩","children":[]}]},{"level":2,"title":"操作","slug":"操作","link":"#操作","children":[{"level":3,"title":"1. createDirIfNotExists（创建目录）","slug":"_1-createdirifnotexists-创建目录","link":"#_1-createdirifnotexists-创建目录","children":[]},{"level":3,"title":"2. JSONToFile（创建文件）","slug":"_2-jsontofile-创建文件","link":"#_2-jsontofile-创建文件","children":[]},{"level":3,"title":"3. readFileLines（读取文件行）","slug":"_3-readfilelines-读取文件行","link":"#_3-readfilelines-读取文件行","children":[]},{"level":3,"title":"4. untildify（替换波浪号）","slug":"_4-untildify-替换波浪号","link":"#_4-untildify-替换波浪号","children":[]}]},{"level":2,"title":"crypto","slug":"crypto","link":"#crypto","children":[{"level":3,"title":"1. hashNode（哈希）","slug":"_1-hashnode-哈希","link":"#_1-hashnode-哈希","children":[]},{"level":3,"title":"2. UUIDGeneratorNode（UUID）","slug":"_2-uuidgeneratornode-uuid","link":"#_2-uuidgeneratornode-uuid","children":[]}]},{"level":2,"title":"环境","slug":"环境","link":"#环境","children":[{"level":3,"title":"1. hasFlags","slug":"_1-hasflags","link":"#_1-hasflags","children":[]},{"level":3,"title":"2. isTravisCI","slug":"_2-istravisci","link":"#_2-istravisci","children":[]}]},{"level":2,"title":"判断流","slug":"判断流","link":"#判断流","children":[{"level":3,"title":"1. isDuplexStream","slug":"_1-isduplexstream","link":"#_1-isduplexstream","children":[]},{"level":3,"title":"2. isReadableStream","slug":"_2-isreadablestream","link":"#_2-isreadablestream","children":[]},{"level":3,"title":"3. isStream","slug":"_3-isstream","link":"#_3-isstream","children":[]},{"level":3,"title":"4. isWritableStream","slug":"_4-iswritablestream","link":"#_4-iswritablestream","children":[]}]}],"git":{"updatedTime":1637398280000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":6,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"frontend/utils/code-node.md"}');export{i as comp,r as data};
