import{_ as s,c as a,a as t,o as p}from"./app-CQrWi6O2.js";const o={};function e(c,n){return p(),a("div",null,[...n[0]||(n[0]=[t(`<h1 id="字符串转换整数-atoi" tabindex="-1"><a class="header-anchor" href="#字符串转换整数-atoi"><span>字符串转换整数 (atoi)</span></a></h1><p>一开始写了一堆判断，看到官方题解就默默删除了原答案，太 low 了。</p><h2 id="自动机" tabindex="-1"><a class="header-anchor" href="#自动机"><span>自动机</span></a></h2><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">‘ ’</th><th style="text-align:center;">+/-</th><th style="text-align:center;">number</th><th style="text-align:center;">other</th></tr></thead><tbody><tr><td style="text-align:center;">start</td><td style="text-align:center;">start</td><td style="text-align:center;">signed</td><td style="text-align:center;">in_number</td><td style="text-align:center;">end</td></tr><tr><td style="text-align:center;">signed</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">in_number</td><td style="text-align:center;">end</td></tr><tr><td style="text-align:center;">in_number</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">in_number</td><td style="text-align:center;">end</td></tr><tr><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td><td style="text-align:center;">end</td></tr></tbody></table><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">enum</span> <span class="token constant">STATES</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">START</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">SIGNED</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">IN_NUMBER</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">END</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">enum</span> <span class="token constant">SIGNS</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">POSITIVE</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">NEGATIVE</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> max <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span> <span class="token operator">-</span> <span class="token number">1</span></span>
<span class="line"><span class="token keyword">const</span> min <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">31</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">AutoMaton</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> sign <span class="token operator">=</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span></span>
<span class="line">  <span class="token keyword">public</span> ans <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> state <span class="token operator">=</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">START</span></span>
<span class="line">  <span class="token keyword">private</span> table <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">START</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">START</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">SIGNED</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">SIGNED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">,</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">END</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">private</span> <span class="token function">getColIndex</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span> <span class="token operator">||</span> c <span class="token operator">===</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">3</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token function">process</span><span class="token punctuation">(</span>c<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>table<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getColIndex</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">IN_NUMBER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>ans <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sign <span class="token operator">===</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span></span>
<span class="line">        <span class="token operator">?</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ans<span class="token punctuation">,</span> max<span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>ans<span class="token punctuation">,</span> <span class="token operator">-</span>min<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">===</span> <span class="token constant">STATES</span><span class="token punctuation">.</span><span class="token constant">SIGNED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>sign <span class="token operator">=</span> c <span class="token operator">===</span> <span class="token string">&#39;+&#39;</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span></span>
<span class="line">        <span class="token operator">:</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">NEGATIVE</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>s<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> automaton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoMaton</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> char <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    automaton<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">(</span>automaton<span class="token punctuation">.</span>sign <span class="token operator">===</span> <span class="token constant">SIGNS</span><span class="token punctuation">.</span><span class="token constant">POSITIVE</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> automaton<span class="token punctuation">.</span>ans</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,5)])])}const k=s(o,[["render",e]]),u=JSON.parse('{"path":"/algorithms/8-string-to-integer-atoi.html","title":"字符串转换整数 (atoi)","lang":"zh-CN","frontmatter":{"autoSort":-8},"headers":[{"level":2,"title":"自动机","slug":"自动机","link":"#自动机","children":[]}],"git":{"updatedTime":1640188382000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/8-string-to-integer-atoi.md"}');export{k as comp,u as data};
