import{_ as n,c as a,a as p,o as t}from"./app-BoSqM2g3.js";const o={};function e(l,s){return t(),a("div",null,[...s[0]||(s[0]=[p(`<h1 id="typescript-类型挑战" tabindex="-1"><a class="header-anchor" href="#typescript-类型挑战"><span>TypeScript 类型挑战</span></a></h1><p>以下来自于 <a href="https://github.com/type-challenges/type-challenges" target="_blank" rel="noopener noreferrer">type-challenges</a> 这个项目，来点 TypeScript 类型体操练习吧。</p><h2 id="辅助工具" tabindex="-1"><a class="header-anchor" href="#辅助工具"><span>辅助工具</span></a></h2><p>该项目提供了一些基础的工具来帮助测试。</p><h3 id="对错" tabindex="-1"><a class="header-anchor" href="#对错"><span>对错</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Expect<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ExpectTrue<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ExpectFalse<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token boolean">false</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IsTrue<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">IsFalse<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token boolean">true</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span></span>
<span class="line"></span></code></pre></div><h3 id="相等" tabindex="-1"><a class="header-anchor" href="#相等"><span>相等</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">Equal<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">extends</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">NotEqual<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token keyword">extends</span> <span class="token class-name">Equal<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre></div><h3 id="any" tabindex="-1"><a class="header-anchor" href="#any"><span>any</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">type</span> <span class="token class-name">IsAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">NotAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token keyword">extends</span> <span class="token class-name">IsAny<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"></span></code></pre></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Debug<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">MergeInsertions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name">object</span></span>
<span class="line">    <span class="token operator">?</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> MergeInsertions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token punctuation">}</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Alike<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token punctuation">,</span> <span class="token constant">Y</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> Equal<span class="token operator">&lt;</span>MergeInsertions<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> MergeInsertions<span class="token operator">&lt;</span><span class="token constant">Y</span><span class="token operator">&gt;&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ExpectExtends<span class="token operator">&lt;</span><span class="token constant">VALUE</span><span class="token punctuation">,</span> <span class="token constant">EXPECTED</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">EXPECTED</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">VALUE</span></span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ExpectValidArgs<span class="token operator">&lt;</span><span class="token constant">FUNC</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token constant">ARGS</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token constant">ARGS</span> <span class="token keyword">extends</span> <span class="token class-name">Parameters<span class="token operator">&lt;</span><span class="token constant">FUNC</span><span class="token operator">&gt;</span></span></span>
<span class="line">  <span class="token operator">?</span> <span class="token boolean">true</span></span>
<span class="line">  <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">UnionToIntersection<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">any</span></span> <span class="token operator">?</span> <span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token constant">U</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">:</span> <span class="token builtin">never</span><span class="token punctuation">)</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span>k<span class="token operator">:</span> <span class="token keyword">infer</span> <span class="token constant">I</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">?</span> <span class="token constant">I</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span></code></pre></div><h2 id="开始练习" tabindex="-1"><a class="header-anchor" href="#开始练习"><span>开始练习</span></a></h2><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world"><span>Hello World</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect<span class="token punctuation">,</span> NotAny <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">HelloWorld</span> <span class="token operator">=</span> <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>NotAny<span class="token operator">&lt;</span>HelloWorld<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>HelloWorld<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;&gt;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="pick" tabindex="-1"><a class="header-anchor" href="#pick"><span>Pick</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MyPick<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">P</span> <span class="token keyword">in</span> <span class="token constant">K</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">P</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  description<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  completed<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Expected1</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Expected2</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  completed<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Expected1<span class="token punctuation">,</span> MyPick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Expected2<span class="token punctuation">,</span> MyPick<span class="token operator">&lt;</span>Todo<span class="token punctuation">,</span> <span class="token string">&#39;title&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;completed&#39;</span><span class="token operator">&gt;&gt;&gt;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="readonly" tabindex="-1"><a class="header-anchor" href="#readonly"><span>Readonly</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MyReadonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">readonly</span> <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token keyword">keyof</span> <span class="token constant">T</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">interface</span> <span class="token class-name">Todo1</span> <span class="token punctuation">{</span></span>
<span class="line">  title<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  description<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  completed<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>MyReadonly<span class="token operator">&lt;</span>Todo1<span class="token operator">&gt;</span><span class="token punctuation">,</span> Readonly<span class="token operator">&lt;</span>Todo1<span class="token operator">&gt;&gt;&gt;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="tuple-to-object" tabindex="-1"><a class="header-anchor" href="#tuple-to-object"><span>Tuple to Object</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">TupleToObject<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">K</span> <span class="token keyword">in</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token constant">K</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> tuple <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tesla&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model Y&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>TupleToObject<span class="token operator">&lt;</span><span class="token keyword">typeof</span> tuple<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> tesla<span class="token operator">:</span> <span class="token string">&#39;tesla&#39;</span><span class="token punctuation">;</span> <span class="token string">&#39;model 3&#39;</span><span class="token operator">:</span> <span class="token string">&#39;model 3&#39;</span><span class="token punctuation">;</span> <span class="token string">&#39;model X&#39;</span><span class="token operator">:</span> <span class="token string">&#39;model X&#39;</span><span class="token punctuation">;</span> <span class="token string">&#39;model Y&#39;</span><span class="token operator">:</span> <span class="token string">&#39;model Y&#39;</span><span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="first-of-array" tabindex="-1"><a class="header-anchor" href="#first-of-array"><span>First of Array</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">First<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>First<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>First<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">123</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>First<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token builtin">never</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>First<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token operator">&gt;&gt;</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="length-of-tuple" tabindex="-1"><a class="header-anchor" href="#length-of-tuple"><span>Length of Tuple</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Length<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">readonly</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> tesla <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;tesla&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model 3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model X&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;model Y&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span></span>
<span class="line"><span class="token keyword">const</span> spaceX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;FALCON 9&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;FALCON HEAVY&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DRAGON&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;STARSHIP&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;HUMAN SPACEFLIGHT&#39;</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Length<span class="token operator">&lt;</span><span class="token keyword">typeof</span> tesla<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Length<span class="token operator">&lt;</span><span class="token keyword">typeof</span> spaceX<span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="exclude" tabindex="-1"><a class="header-anchor" href="#exclude"><span>Exclude</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MyExclude<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">U</span></span> <span class="token operator">?</span> <span class="token builtin">never</span> <span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>MyExclude<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>MyExclude<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>MyExclude<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Exclude<span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="awaited" tabindex="-1"><a class="header-anchor" href="#awaited"><span>Awaited</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Awaited<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token operator">&gt;</span></span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">never</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">X</span></span> <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">Y</span></span> <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Awaited<span class="token operator">&lt;</span><span class="token constant">X</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Awaited<span class="token operator">&lt;</span><span class="token constant">Y</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> field<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">}</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="if" tabindex="-1"><a class="header-anchor" href="#if"><span>If</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">If<span class="token operator">&lt;</span><span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">F</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">C</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> <span class="token constant">T</span> <span class="token operator">:</span> <span class="token constant">F</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>If<span class="token operator">&lt;</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>If<span class="token operator">&lt;</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// @ts-expect-error</span></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">error</span> <span class="token operator">=</span> If<span class="token operator">&lt;</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="concat" tabindex="-1"><a class="header-anchor" href="#concat"><span>Concat</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Concat<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token constant">U</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Concat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Concat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Concat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Concat<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;3&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="includes" tabindex="-1"><a class="header-anchor" href="#includes"><span>Includes</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">Includes<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">U</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token constant">T</span></span><span class="token punctuation">[</span><span class="token builtin">number</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;Kars&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Esidisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Wamuu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Santana&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;Kars&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token string">&#39;Kars&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Esidisi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Wamuu&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Santana&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;Dio&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>Includes<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div><h3 id="get-return-type" tabindex="-1"><a class="header-anchor" href="#get-return-type"><span>Get Return Type</span></a></h3><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> Equal<span class="token punctuation">,</span> Expect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@type-challenges/utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">ComplexObject</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  a<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span></span>
<span class="line">  bar<span class="token operator">:</span> <span class="token string">&#39;hello&#39;</span></span>
<span class="line">  <span class="token function">prev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token punctuation">(</span>v<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span> w<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> v <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">2</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">MyReturnType<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">infer</span> <span class="token constant">R</span> <span class="token operator">?</span> <span class="token constant">R</span> <span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> <span class="token class-name">cases</span> <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> MyReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">string</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span><span class="token number">123</span><span class="token punctuation">,</span> MyReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">123</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span>ComplexObject<span class="token punctuation">,</span> MyReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> ComplexObject<span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span><span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> MyReturnType<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">MyReturnType</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span></span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;foo&#39;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">,</span> MyReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fn<span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">  Expect<span class="token operator">&lt;</span>Equal<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span><span class="token punctuation">,</span> MyReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> fn1<span class="token operator">&gt;&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div>`,37)])])}const k=n(o,[["render",e]]),r=JSON.parse('{"path":"/frontend/typescript/type-challenges.html","title":"TypeScript 类型挑战","lang":"zh-CN","frontmatter":{"description":"TypeScript 类型挑战"},"headers":[{"level":2,"title":"辅助工具","slug":"辅助工具","link":"#辅助工具","children":[{"level":3,"title":"对错","slug":"对错","link":"#对错","children":[]},{"level":3,"title":"相等","slug":"相等","link":"#相等","children":[]},{"level":3,"title":"any","slug":"any","link":"#any","children":[]},{"level":3,"title":"其他","slug":"其他","link":"#其他","children":[]}]},{"level":2,"title":"开始练习","slug":"开始练习","link":"#开始练习","children":[{"level":3,"title":"Hello World","slug":"hello-world","link":"#hello-world","children":[]},{"level":3,"title":"Pick","slug":"pick","link":"#pick","children":[]},{"level":3,"title":"Readonly","slug":"readonly","link":"#readonly","children":[]},{"level":3,"title":"Tuple to Object","slug":"tuple-to-object","link":"#tuple-to-object","children":[]},{"level":3,"title":"First of Array","slug":"first-of-array","link":"#first-of-array","children":[]},{"level":3,"title":"Length of Tuple","slug":"length-of-tuple","link":"#length-of-tuple","children":[]},{"level":3,"title":"Exclude","slug":"exclude","link":"#exclude","children":[]},{"level":3,"title":"Awaited","slug":"awaited","link":"#awaited","children":[]},{"level":3,"title":"If","slug":"if","link":"#if","children":[]},{"level":3,"title":"Concat","slug":"concat","link":"#concat","children":[]},{"level":3,"title":"Includes","slug":"includes","link":"#includes","children":[]},{"level":3,"title":"Get Return Type","slug":"get-return-type","link":"#get-return-type","children":[]}]}],"git":{"updatedTime":1637398040000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":4,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"frontend/typescript/type-challenges.md"}');export{k as comp,r as data};
