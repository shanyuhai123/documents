import{_ as t,M as r,p as l,q as c,Q as e,t as o,N as a,a1 as s}from"./framework-49860b1b.js";const p={},i=e("h1",{id:"使用-lerna-维护关联的模块",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#使用-lerna-维护关联的模块","aria-hidden":"true"},"#"),o(" 使用 Lerna 维护关联的模块")],-1),d=e("p",null,"Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.",-1),u={href:"https://github.com/lerna/lerna",target:"_blank",rel:"noopener noreferrer"},h=e("code",null,"package",-1),m=e("code",null,"mono-repo",-1),_=e("code",null,"multi-repo",-1),k=e("code",null,"multi-repo",-1),g=e("code",null,"mono-repo",-1),b={href:"https://en.wikipedia.org/wiki/Monorepo",target:"_blank",rel:"noopener noreferrer"},f=s(`<h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h2><p><code>lerna</code> 初始化分为两种模式：<code>fix</code>（默认，锁定模式，项目内的所有 package 共用版本号）、<code>independent</code>（独立模式，每个 <code>package</code> 拥有独立版本号）。个人认为大部分情况下都应该使用独立模式，即每个 <code>package</code> 都有自己的版本号。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 安装</span>
<span class="token function">npm</span> i lerna <span class="token parameter variable">-g</span>

<span class="token comment"># git</span>
<span class="token function">git</span> init lerna-repo <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> lerna-repo

<span class="token comment"># lerna</span>
lerna init <span class="token punctuation">[</span>--independent<span class="token punctuation">]</span> <span class="token comment"># 生成下方文件夹</span>
<span class="token comment">#lerna-repo</span>
<span class="token comment">#├── lerna.json</span>
<span class="token comment">#├── package.json</span>
<span class="token comment">#└── packages</span>

<span class="token comment"># 创建 packages</span>
lerna create pkg-1 <span class="token parameter variable">-y</span>
lerna create pkg-2 <span class="token parameter variable">-y</span>
</code></pre></div><h2 id="依赖" tabindex="-1"><a class="header-anchor" href="#依赖" aria-hidden="true">#</a> 依赖</h2><h3 id="_1-工具依赖" tabindex="-1"><a class="header-anchor" href="#_1-工具依赖" aria-hidden="true">#</a> 1. 工具依赖</h3><p>对于 <code>eslint</code>、<code>commit-lint</code> 等工具依赖，可以直接使用 <code>yarn</code> 或 <code>npm</code> 安装到顶层。</p><h3 id="_2-package-依赖" tabindex="-1"><a class="header-anchor" href="#_2-package-依赖" aria-hidden="true">#</a> 2. package 依赖</h3><p>针对 package 的依赖可以交由 <code>lerna</code> 安装。</p><ol><li><p>所有 packages</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>lerna <span class="token function">add</span> module1
</code></pre></div></li><li><p>单独 package</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>lerna <span class="token function">add</span> module1 packages/pkg-1
</code></pre></div></li><li><p>卸载</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 所有</span>
lerna <span class="token builtin class-name">exec</span> -- <span class="token string">&quot;yarn remove pkg-2&quot;</span>
<span class="token comment"># 指定</span>
lerna <span class="token builtin class-name">exec</span> <span class="token parameter variable">--scope</span><span class="token operator">=</span>pkg-1 <span class="token string">&quot;yarn remove pkg-2&quot;</span>
<span class="token comment"># 或使用空格替代 \`=\`</span>
lerna <span class="token builtin class-name">exec</span> <span class="token parameter variable">--scope</span> pkg-1 <span class="token string">&quot;yarn remove pkg-2&quot;</span>
</code></pre></div></li></ol><h3 id="_3-workspaces" tabindex="-1"><a class="header-anchor" href="#_3-workspaces" aria-hidden="true">#</a> 3. workspaces</h3><p>为了减少子模块的重复依赖可以使用 <code>workspaces</code> 将依赖提取到上级目录。</p><p>启用该模式非常简单：</p><ol><li><p>在 <code>lerna.json</code> 中添加 <code>&quot;useWorkspaces&quot;: true</code></p></li><li><p>在 <code>package.json</code> 中添加 <code>&quot;workspaces&quot;: [&quot;packages/*&quot;]</code></p><p>按照约定俗成将模块放置于 <code>packages</code> 目录下</p></li></ol>`,13),q={href:"https://classic.yarnpkg.com/blog/2018/02/15/nohoist/",target:"_blank",rel:"noopener noreferrer"},v=s(`<blockquote><p>注意，需要模块为 <code>private</code></p></blockquote><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;nohoist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/vue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;**/vue/**&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div><p>也可以在模块中进行设置：</p><div class="language-json" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;nohoist&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;vue&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;vue/**&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>`,4),x=e("code",null,"lerna bootstrap",-1),y={href:"https://github.com/chinanf-boy/lerna-zh/blob/master/commands/bootstrap/README.zh.md#--nohoist-glob",target:"_blank",rel:"noopener noreferrer"},w=e("h2",{id:"更多命令",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#更多命令","aria-hidden":"true"},"#"),o(" 更多命令")],-1),j={href:"https://github.com/lerna/lerna/blob/master/commands/publish#readme",target:"_blank",rel:"noopener noreferrer"},E=e("code",null,"lerna publish",-1),N={href:"https://github.com/lerna/lerna/blob/master/commands/version#readme",target:"_blank",rel:"noopener noreferrer"},L=e("code",null,"lerna version",-1),V={href:"https://github.com/lerna/lerna/blob/master/commands/bootstrap#readme",target:"_blank",rel:"noopener noreferrer"},z=e("code",null,"lerna bootstrap",-1),B={href:"https://github.com/lerna/lerna/blob/master/commands/list#readme",target:"_blank",rel:"noopener noreferrer"},M=e("code",null,"lerna list",-1),I={href:"https://github.com/lerna/lerna/blob/master/commands/changed#readme",target:"_blank",rel:"noopener noreferrer"},A=e("code",null,"lerna changed",-1),C={href:"https://github.com/lerna/lerna/blob/master/commands/diff#readme",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"lerna diff",-1),Q={href:"https://github.com/lerna/lerna/blob/master/commands/exec#readme",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"lerna exec",-1),S={href:"https://github.com/lerna/lerna/blob/master/commands/run#readme",target:"_blank",rel:"noopener noreferrer"},T=e("code",null,"lerna run",-1),W={href:"https://github.com/lerna/lerna/blob/master/commands/init#readme",target:"_blank",rel:"noopener noreferrer"},F=e("code",null,"lerna init",-1),G={href:"https://github.com/lerna/lerna/blob/master/commands/add#readme",target:"_blank",rel:"noopener noreferrer"},H=e("code",null,"lerna add",-1),J={href:"https://github.com/lerna/lerna/blob/master/commands/clean#readme",target:"_blank",rel:"noopener noreferrer"},K=e("code",null,"lerna clean",-1),O={href:"https://github.com/lerna/lerna/blob/master/commands/import#readme",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"lerna import",-1),U={href:"https://github.com/lerna/lerna/blob/master/commands/link#readme",target:"_blank",rel:"noopener noreferrer"},X=e("code",null,"lerna link",-1),Y={href:"https://github.com/lerna/lerna/blob/master/commands/create#readme",target:"_blank",rel:"noopener noreferrer"},Z=e("code",null,"lerna create",-1),$={href:"https://github.com/lerna/lerna/blob/master/commands/info#readme",target:"_blank",rel:"noopener noreferrer"},ee=e("code",null,"lerna info",-1);function ne(ae,oe){const n=r("ExternalLinkIcon");return l(),c("div",null,[i,e("blockquote",null,[d,e("p",null,[o("-- "),e("a",u,[o("lerna"),a(n)])])]),e("p",null,[o("对于维护多个 "),h,o(" 来说，都会遇到一个选择，是选择 "),m,o(" 还是 "),_,o("。"),k,o(" 一个模块（module）一个仓库（repository），而 "),g,o(" 是所有模块整合在一个仓库，"),e("a",b,[o("语义来源"),a(n)]),o("。")]),f,e("p",null,[o("有时候也会希望不同的模块走不同的依赖版本，这需要使用 "),e("a",q,[o("nohoist"),a(n)]),o("：")]),v,e("p",null,[x,o(" 也提供了参数 "),e("a",y,[o("--nohoist"),a(n)]),o("。")]),w,e("ul",null,[e("li",null,[e("a",j,[E,a(n)])]),e("li",null,[e("a",N,[L,a(n)])]),e("li",null,[e("a",V,[z,a(n)])]),e("li",null,[e("a",B,[M,a(n)])]),e("li",null,[e("a",I,[A,a(n)])]),e("li",null,[e("a",C,[D,a(n)])]),e("li",null,[e("a",Q,[R,a(n)])]),e("li",null,[e("a",S,[T,a(n)])]),e("li",null,[e("a",W,[F,a(n)])]),e("li",null,[e("a",G,[H,a(n)])]),e("li",null,[e("a",J,[K,a(n)])]),e("li",null,[e("a",O,[P,a(n)])]),e("li",null,[e("a",U,[X,a(n)])]),e("li",null,[e("a",Y,[Z,a(n)])]),e("li",null,[e("a",$,[ee,a(n)])])])])}const te=t(p,[["render",ne],["__file","lerna.html.vue"]]);export{te as default};
