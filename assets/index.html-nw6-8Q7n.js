import{_ as a,c as n,a as p,o as e}from"./app-DNXRdI82.js";const t="/assets/git-lifecycle-BvXNtkD_.png",l="/assets/git-state-model-CxG7Lxl9.png",o={};function i(c,s){return e(),n("div",null,s[0]||(s[0]=[p('<h1 id="版本控制工具-git" tabindex="-1"><a class="header-anchor" href="#版本控制工具-git"><span>版本控制工具 Git</span></a></h1><p>版本控制可以记录文件的变化，方便快捷的查看、回退指定版本的内容。</p><h2 id="git-生命周期" tabindex="-1"><a class="header-anchor" href="#git-生命周期"><span>Git 生命周期</span></a></h2><p>随着使用你会渐渐加深对其生命周期的理解。</p><p><img src="'+t+'" alt="git 生命周期"></p><p>Git 仓库中，工作目录下的每一个文件不外乎两种状态：未跟踪（Untracked）或已跟踪（Tracked）。</p><p>已跟踪的文件是指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或存入暂存区。</p><p>工作目录中除已跟踪文件以外都属于未跟踪文件，它们即不存在于上次快照的记录中，也没有放入暂存区。</p><p>初次克隆某个仓库时，工作目录中所有的文件都属于已跟踪文件，并处于未修改状态。</p><h2 id="git-状态模型" tabindex="-1"><a class="header-anchor" href="#git-状态模型"><span>Git 状态模型</span></a></h2><p>在状态模型中进行了更详细的说明。</p><p><img src="'+l+`" alt="git 状态模型"></p><p>关于上图一些概念的说明。</p><h3 id="_1-工作区-workspace" tabindex="-1"><a class="header-anchor" href="#_1-工作区-workspace"><span>1. 工作区（workspace）</span></a></h3><p>当前工作空间，即当前能在本地文件夹下面可以看到的文件结构。初始化工作空间或者工作空间 <code>clean</code> 的时候，文件内容和暂存区（index）是一致的，随着修改，工作区文件没有执行 <code>git add</code> 到暂存区的时候，工作区域将和暂存区不一致。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># clean 状态</span></span>
<span class="line">$ <span class="token function">git</span> status</span>
<span class="line"></span>
<span class="line"><span class="token comment">#On branch master</span></span>
<span class="line"><span class="token comment">#nothing to commit, working tree clean</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-暂存区-index" tabindex="-1"><a class="header-anchor" href="#_2-暂存区-index"><span>2. 暂存区（index）</span></a></h3><p>老版本的概念也叫 Cache 区，就是文件暂时存放的地方，所有暂时存放在暂存区中的文件将随着 <code>git commit</code> 一起提交到本地仓库（local repository），此时本地仓库的文件将会被暂存区所取代。</p><h3 id="_3-本地仓库-local-repository" tabindex="-1"><a class="header-anchor" href="#_3-本地仓库-local-repository"><span>3. 本地仓库（local repository）</span></a></h3><p>git 是分布式版本控制系统，和其他版本控制系统不同的是他可以完全去中心化操作，你可以不用和远程仓库（remote repository）进行通信，在本地即可进行全部离线操作，包括 log、history、commit、diff 等。</p><p>能实现以上功能是由于 git 有一个几乎和远程一样的本地仓库。</p><p>所以离线操作都可以本地完成，等需要的时候再和远程仓库进行交互。</p><h3 id="_4-远程仓库-remote-repository" tabindex="-1"><a class="header-anchor" href="#_4-远程仓库-remote-repository"><span>4. 远程仓库（remote repository）</span></a></h3><p>远程中心仓库，可使得仓库分享给其他人。结构大体和本地仓库一样。</p><h2 id="git-常用命令" tabindex="-1"><a class="header-anchor" href="#git-常用命令"><span>Git 常用命令</span></a></h2><p>Git 的操作指令非常多，此处仅选一些简单的日常操作。</p><h3 id="查看帮助" tabindex="-1"><a class="header-anchor" href="#查看帮助"><span>查看帮助</span></a></h3><p>所有命令行最重要的当然是查看帮助文档：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token builtin class-name">help</span></span>
<span class="line"></span></code></pre></div><p>结果：</p><div class="language-vim" data-highlighter="prismjs" data-ext="vim" data-title="vim"><pre><code><span class="line">用法：git <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">version</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">help</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>C <span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">c</span> <span class="token operator">&lt;</span>名称<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>取值<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">           <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>exec<span class="token operator">-</span><span class="token builtin">path</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>html<span class="token operator">-</span><span class="token builtin">path</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>man<span class="token operator">-</span><span class="token builtin">path</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>info<span class="token operator">-</span><span class="token builtin">path</span><span class="token punctuation">]</span></span>
<span class="line">           <span class="token punctuation">[</span><span class="token operator">-</span><span class="token keyword">p</span> | <span class="token operator">-</span><span class="token operator">-</span>paginate | <span class="token operator">-</span><span class="token keyword">P</span> | <span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>pager<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>no<span class="token operator">-</span>replace<span class="token operator">-</span>objects<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>bare<span class="token punctuation">]</span></span>
<span class="line">           <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>git<span class="token operator">-</span><span class="token builtin">dir</span><span class="token operator">=</span><span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>work<span class="token operator">-</span>tree<span class="token operator">=</span><span class="token operator">&lt;</span>路径<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token operator">-</span>namespace<span class="token operator">=</span><span class="token operator">&lt;</span>名称<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line">           <span class="token operator">&lt;</span>命令<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span>参数<span class="token operator">&gt;</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">这些是各种场合常见的 Git 命令：</span>
<span class="line"></span>
<span class="line">开始一个工作区（参见：git <span class="token keyword">help</span> tutorial）</span>
<span class="line">   clone      克隆仓库到一个新目录</span>
<span class="line">   init       创建一个空的 Git 仓库或重新初始化一个已存在的仓库</span>
<span class="line"></span>
<span class="line">在当前变更上工作（参见：git <span class="token keyword">help</span> everyday）</span>
<span class="line">   add        添加文件内容至索引</span>
<span class="line">   mv         移动或重命名一个文件、目录或符号链接</span>
<span class="line">   reset      重置当前 HEAD 到指定状态</span>
<span class="line">   rm         从工作区和索引中删除文件</span>
<span class="line"></span>
<span class="line">检查历史和状态（参见：git <span class="token keyword">help</span> revisions）</span>
<span class="line">   bisect     通过二分查找定位引入 bug 的提交</span>
<span class="line">   <span class="token keyword">grep</span>       输出和模式匹配的行</span>
<span class="line">   log        显示提交日志</span>
<span class="line">   show       显示各种类型的对象</span>
<span class="line">   status     显示工作区状态</span>
<span class="line"></span>
<span class="line">扩展、标记和调校您的历史记录</span>
<span class="line">   branch     列出、创建或删除分支</span>
<span class="line">   checkout   切换分支或恢复工作区文件</span>
<span class="line">   commit     记录变更到仓库</span>
<span class="line">   <span class="token builtin">diff</span>       显示提交之间、提交和工作区之间等的差异</span>
<span class="line">   merge      合并两个或更多开发历史</span>
<span class="line">   rebase     在另一个分支上重新应用提交</span>
<span class="line">   <span class="token keyword">tag</span>        创建、列出、删除或校验一个 GPG 签名的标签对象</span>
<span class="line"></span>
<span class="line">协同（参见：git <span class="token keyword">help</span> workflows）</span>
<span class="line">   fetch      从另外一个仓库下载对象和引用</span>
<span class="line">   pull       获取并整合另外的仓库或一个本地分支</span>
<span class="line">   push       更新远程引用和相关的对象</span>
<span class="line"></span>
<span class="line">命令 <span class="token string">&#39;git help -a&#39;</span> 和 <span class="token string">&#39;git help -g&#39;</span> 显示可用的子命令和一些概念帮助。</span>
<span class="line">查看 <span class="token string">&#39;git help &lt;命令&gt;&#39;</span> 或 <span class="token string">&#39;git help &lt;概念&gt;&#39;</span> 以获取给定子命令或概念的</span>
<span class="line">帮助。</span>
<span class="line"></span></code></pre></div><h3 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用"><span>简单使用</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 检查文件是否有更新</span></span>
<span class="line"><span class="token function">git</span> status</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 将新增的文件进行跟踪</span></span>
<span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 提交本次修改内容（请尽量详细），方便日后修改 bug 时快速定位</span></span>
<span class="line"><span class="token comment"># 此处 commit 仅为示例，请修改为你项目的提交信息</span></span>
<span class="line"><span class="token function">git</span> commit  -m<span class="token string">&quot;docs(git): 新增 git 简单使用&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 提交到仓库</span></span>
<span class="line"><span class="token function">git</span> push</span>
<span class="line"></span></code></pre></div><h3 id="统计信息" tabindex="-1"><a class="header-anchor" href="#统计信息"><span>统计信息</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 所有分支指定用户指定时间范围提交信息</span></span>
<span class="line"><span class="token comment"># 更多的 formats 可见 https://git-scm.com/docs/pretty-formats</span></span>
<span class="line"><span class="token function">git</span> log <span class="token parameter variable">--all</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">&quot;你的名称&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--after</span><span class="token operator">=</span><span class="token string">&quot;2022-07-16&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  <span class="token parameter variable">--before</span><span class="token operator">=</span><span class="token string">&quot;2022-07-23&quot;</span> <span class="token punctuation">\\</span></span>
<span class="line">  --no-merges <span class="token parameter variable">--pretty</span><span class="token operator">=</span>format:<span class="token string">&quot;%an(%ae) %as: %s&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="清理分支" tabindex="-1"><a class="header-anchor" href="#清理分支"><span>清理分支</span></a></h3><p>一个多人长期合作的项目会有很多的远程分支，影响命令行提示及 VSCode 分支管理混乱的界面。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> fetch <span class="token parameter variable">--prune</span></span>
<span class="line"></span></code></pre></div><p>还可利用 <a href="/os/linux/xargs">xargs</a> 配合 <code>grep</code> 清理指定条件分支：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> branch <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&#39;fix/*&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">git</span> branch <span class="token parameter variable">-D</span></span>
<span class="line"></span></code></pre></div><h3 id="git-飞行规则" tabindex="-1"><a class="header-anchor" href="#git-飞行规则"><span>Git 飞行规则</span></a></h3><p><a href="https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-CN.md" target="_blank" rel="noopener noreferrer">Git飞行规则(Flight Rules)</a> 可以用来指导一些常见的问题。</p><h2 id="为-git-添加代理" tabindex="-1"><a class="header-anchor" href="#为-git-添加代理"><span>为 Git 添加代理</span></a></h2><p>clone 大项目时总是乏力，下载速度极慢，这时就需要为其设置代理了。</p><h3 id="全局代理" tabindex="-1"><a class="header-anchor" href="#全局代理"><span>全局代理</span></a></h3><p>该项可参考 alias 部分内容。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">gfw</span>
<span class="line"></span></code></pre></div><h3 id="git-代理" tabindex="-1"><a class="header-anchor" href="#git-代理"><span>Git 代理</span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 设置代理 </span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy <span class="token string">&#39;socks5://127.0.0.1:1080&#39;</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy <span class="token string">&#39;socks5://127.0.0.1:1080&#39;</span></span>
<span class="line"><span class="token comment"># 取消代理</span></span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy</span>
<span class="line"><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 更好的形式当然是设置为 alias</span></span>
<span class="line"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">proxygit</span><span class="token operator">=</span><span class="token string">&quot;git config --global http.proxy socks5://127.0.0.1:1080&quot;</span></span>
<span class="line"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">uproxygit</span><span class="token operator">=</span><span class="token string">&quot;git config --global --unset http.proxy&quot;</span></span>
<span class="line"></span></code></pre></div><h3 id="git-代理协议的补充" tabindex="-1"><a class="header-anchor" href="#git-代理协议的补充"><span>Git 代理协议的补充</span></a></h3><p>git 代理支持多种协议：http、https、socks、socks5，本机通过 ss 启用了 socks5。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://help.github.com/en" target="_blank" rel="noopener noreferrer">Github</a></li><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener noreferrer">Git-scm</a></li><li><a href="https://shafiul.github.io/gitbook/index.html" target="_blank" rel="noopener noreferrer">shafiul Community Book</a></li></ul>`,53)]))}const k=a(o,[["render",i],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/tools/git/","title":"版本控制工具 Git","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Git 生命周期","slug":"git-生命周期","link":"#git-生命周期","children":[]},{"level":2,"title":"Git 状态模型","slug":"git-状态模型","link":"#git-状态模型","children":[{"level":3,"title":"1. 工作区（workspace）","slug":"_1-工作区-workspace","link":"#_1-工作区-workspace","children":[]},{"level":3,"title":"2. 暂存区（index）","slug":"_2-暂存区-index","link":"#_2-暂存区-index","children":[]},{"level":3,"title":"3. 本地仓库（local repository）","slug":"_3-本地仓库-local-repository","link":"#_3-本地仓库-local-repository","children":[]},{"level":3,"title":"4. 远程仓库（remote repository）","slug":"_4-远程仓库-remote-repository","link":"#_4-远程仓库-remote-repository","children":[]}]},{"level":2,"title":"Git 常用命令","slug":"git-常用命令","link":"#git-常用命令","children":[{"level":3,"title":"查看帮助","slug":"查看帮助","link":"#查看帮助","children":[]},{"level":3,"title":"简单使用","slug":"简单使用","link":"#简单使用","children":[]},{"level":3,"title":"统计信息","slug":"统计信息","link":"#统计信息","children":[]},{"level":3,"title":"清理分支","slug":"清理分支","link":"#清理分支","children":[]},{"level":3,"title":"Git 飞行规则","slug":"git-飞行规则","link":"#git-飞行规则","children":[]}]},{"level":2,"title":"为 Git 添加代理","slug":"为-git-添加代理","link":"#为-git-添加代理","children":[{"level":3,"title":"全局代理","slug":"全局代理","link":"#全局代理","children":[]},{"level":3,"title":"Git 代理","slug":"git-代理","link":"#git-代理","children":[]},{"level":3,"title":"Git 代理协议的补充","slug":"git-代理协议的补充","link":"#git-代理协议的补充","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"updatedTime":1726199393000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":15,"url":"https://github.com/shanyuhai123"},{"name":"shanyuhai","username":"shanyuhai","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai"}]},"filePathRelative":"tools/git/README.md"}');export{k as comp,h as data};
