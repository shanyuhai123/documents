import{_ as n,c as s,a as e,o as t}from"./app-DLCc4AGN.js";const p={};function o(c,a){return t(),s("div",null,[...a[0]||(a[0]=[e(`<h1 id="运算符优先级" tabindex="-1"><a class="header-anchor" href="#运算符优先级"><span>运算符优先级</span></a></h1><p>运算符的优先级决定了表达式中运算执行的先后顺序，优先级高的运算符最先被执行。</p><p>虽然这句话是这么的直白，但总是会遗忘。</p><h2 id="一次错误" tabindex="-1"><a class="header-anchor" href="#一次错误"><span>一次错误</span></a></h2><p>来源于一个 15年（五年前）的<a href="https://segmentfault.com/q/1010000002637728" target="_blank" rel="noopener noreferrer">提问</a>，没想到我第一反应还是错了。</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span> </span>
<span class="line">a<span class="token punctuation">.</span>x <span class="token operator">=</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; undefined</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// --&gt; {n:2}</span></span>
<span class="line"></span></code></pre></div><p>在这里我忽略了 <code>.</code> 的执行优先级是高于 <code>=</code> 操作的，也就是一开始 <code>a.x</code> 就指向了 <code>{n: 1}</code> 的 <code>heap 空间</code>，最后的结果也显而易见了。</p>`,7)])])}const l=n(p,[["render",o]]),i=JSON.parse('{"path":"/frontend/javascript/operator-precedence.html","title":"运算符优先级","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一次错误","slug":"一次错误","link":"#一次错误","children":[]}],"git":{"updatedTime":1637397829000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":2,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"frontend/javascript/operator-precedence.md"}');export{l as comp,i as data};
