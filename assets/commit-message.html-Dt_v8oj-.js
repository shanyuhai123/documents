import{_ as a,c as n,a as e,o as p}from"./app-DLCc4AGN.js";const t={};function o(l,s){return p(),n("div",null,[...s[0]||(s[0]=[e(`<h1 id="规范-git-提交信息并生成日志" tabindex="-1"><a class="header-anchor" href="#规范-git-提交信息并生成日志"><span>规范 Git 提交信息并生成日志</span></a></h1><h2 id="commit-规范化" tabindex="-1"><a class="header-anchor" href="#commit-规范化"><span>Commit 规范化</span></a></h2><p>大家都使用 <a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0" target="_blank" rel="noopener noreferrer">Angular 规范</a>。</p><p>Commit message 包括三个部分：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span> <span class="token comment"># 必填</span></span>
<span class="line"><span class="token operator">&lt;</span>BLANK LINE<span class="token operator">&gt;</span> <span class="token comment"># 空一行</span></span>
<span class="line"><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span> <span class="token comment"># 可选</span></span>
<span class="line"><span class="token operator">&lt;</span>BLANK LINE<span class="token operator">&gt;</span> <span class="token comment"># 空一行</span></span>
<span class="line"><span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span> <span class="token comment"># 可选</span></span>
<span class="line"></span></code></pre></div><ul><li><p>type：必填，<code>commit</code> 的类型</p><ul><li>feat：新功能</li><li>fix：修复 bug</li><li>docs：文档修改</li><li>style：格式修改，例如空格、分号等</li><li>refactor：不增加功能也不修复 bug 的代码更改</li><li>perf：性能提升、交互优化</li><li>test：测试相关修改</li><li>build：外部依赖项的修改，如 gulp、npm</li><li>ci：ci 的修改</li><li>chore：关于构建项目相关的修改，非代码和测试</li><li>revert：版本回滚</li></ul></li><li><p>scope：选填，<code>commit</code> 的影响范围，常指定模块或文件名</p></li><li><p>subject：必填，<code>commit</code> 的简短描述</p></li><li><p>body：选填，<code>commit</code> 的详细描述</p></li><li><p>footer：选填，备注信息，通常是破坏性更新或关闭 Issue</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">BREAKING CHANGE: 变动的描述</span>
<span class="line">Close <span class="token comment">#ISSUE_ID</span></span>
<span class="line">Closes <span class="token comment">#ISSUE_ID, #ISSUE_ID</span></span>
<span class="line"></span></code></pre></div></li></ul><h3 id="_1-模板" tabindex="-1"><a class="header-anchor" href="#_1-模板"><span>1. 模板</span></a></h3><p>提交信息最好在在<a href="https://www.npmjs.com/package/commitizen" target="_blank" rel="noopener noreferrer">模板</a>的约束下：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> i commitizen <span class="token parameter variable">-D</span></span>
<span class="line"></span></code></pre></div><p>初始化适配器：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">npx commitizen init cz-conventional-changelog <span class="token parameter variable">--yarn</span> <span class="token parameter variable">--dev</span> <span class="token parameter variable">--exact</span></span>
<span class="line"></span></code></pre></div><p>在 <code>package.json</code> 中添加 <code>script</code>：</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;commit&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;commitizen&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;cz-conventional-changelog&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>当执行 <code>yarn run commit</code> 就可以使用提交模板了。</p><h3 id="_2-强制规范" tabindex="-1"><a class="header-anchor" href="#_2-强制规范"><span>2. 强制规范</span></a></h3><p>为了在各种姿势使 commit 符合规范，<a href="https://github.com/conventional-changelog/commitlint#readme" target="_blank" rel="noopener noreferrer">校验</a>是必要的。注意 <strong>husky v5</strong> 配置有所<a href="https://typicode.github.io/husky/#/?id=migrate-from-v4-to-v6" target="_blank" rel="noopener noreferrer">更改</a>。</p><p><strong>如何校验：</strong></p><ul><li><p>安装依赖</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> i @commitlint/cli @commitlint/config-conventional <span class="token parameter variable">-D</span></span>
<span class="line"></span></code></pre></div></li><li><p>指定校验模板</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token builtin class-name">echo</span> <span class="token string">&quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot;</span> <span class="token operator">&gt;</span> commitlint.config.js</span>
<span class="line"></span></code></pre></div></li></ul><p><strong>何时校验：</strong></p><p>很明显需要在 <code>git commit</code> 前的生命周期内进行校验。</p><ul><li><p>安装 husky</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> i husky <span class="token parameter variable">-D</span></span>
<span class="line"></span></code></pre></div></li><li><p>拦截 git hook</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># Active hooks</span></span>
<span class="line">npx husky <span class="token function">install</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Add hook</span></span>
<span class="line">npx husky <span class="token function">add</span> .husky/commit-msg <span class="token string">&quot;npx --no-install commitlint --edit <span class="token variable">$1</span>&quot;</span></span>
<span class="line"></span></code></pre></div></li><li><p>测试</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span></span>
<span class="line"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&quot;hello husky&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 拦截</span></span>
<span class="line">⧗   input: hello husky</span>
<span class="line">✖   subject may not be empty <span class="token punctuation">[</span>subject-empty<span class="token punctuation">]</span></span>
<span class="line">✖   <span class="token builtin class-name">type</span> may not be empty <span class="token punctuation">[</span>type-empty<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre></div></li></ul><h2 id="生成-changelog" tabindex="-1"><a class="header-anchor" href="#生成-changelog"><span>生成 CHANGELOG</span></a></h2><p>根据规则生成 CHANGELOG 的前提是 commit 规范化。</p><p>首先安装<a href="https://github.com/conventional-changelog/standard-version" target="_blank" rel="noopener noreferrer">依赖</a>，如果之前使用了其他模板，也应寻找对应的依赖。</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> i standard-version <span class="token parameter variable">-D</span></span>
<span class="line"></span></code></pre></div><p>在 <code>package.json</code> 中添加 <code>script</code>：</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;changelog&quot;</span><span class="token operator">:</span> <span class="token string">&quot;standard-version&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>执行 <code>npm run release</code> 得到的效果一般，那么自然希望加点料。</p><h3 id="_1-配置" tabindex="-1"><a class="header-anchor" href="#_1-配置"><span>1. 配置</span></a></h3><p>新增 <a href="https://github.com/conventional-changelog/conventional-changelog-config-spec/blob/master/versions/2.1.0/README.md" target="_blank" rel="noopener noreferrer"><code>.versionrc.js</code></a> 文件：</p><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token string-property property">&quot;header&quot;</span><span class="token operator">:</span> <span class="token string">&quot;# CHANGELOG\\n\\n这是一个有趣的 CHANGELOG。\\n\\n&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token string-property property">&quot;types&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;feat&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;section&quot;</span><span class="token operator">:</span> <span class="token string">&quot;✨ Features | 新功能&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fix&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;section&quot;</span><span class="token operator">:</span> <span class="token string">&quot;🐛 Fixes | Bug 修复&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token string-property property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;perf&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;section&quot;</span><span class="token operator">:</span> <span class="token string">&quot;🔥 Performance Improvements | 性能优化&quot;</span> <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h3 id="_2-指定版本" tabindex="-1"><a class="header-anchor" href="#_2-指定版本"><span>2. 指定版本</span></a></h3><p>npm 命令传参需要使用 <code>--</code>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> run changelog -- --release-as <span class="token number">1.6</span>.0</span>
<span class="line"><span class="token comment"># 或</span></span>
<span class="line"><span class="token function">npm</span> run changelog -- <span class="token parameter variable">-r</span> minor</span>
<span class="line"></span></code></pre></div><h3 id="_3-hash-链接" tabindex="-1"><a class="header-anchor" href="#_3-hash-链接"><span>3. hash 链接</span></a></h3><p>这需要为项目添加 <code>git remote</code> 地址：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">git</span> remote <span class="token function">add</span> origin git@github.com:yourname/project.git</span>
<span class="line"></span></code></pre></div><h2 id="代码校验" tabindex="-1"><a class="header-anchor" href="#代码校验"><span>代码校验</span></a></h2><p>前面已经打好了铺垫，加上代码校验也是顺理成章的事情。</p><p>一般代码校验只希望<a href="https://www.npmjs.com/package/lint-staged" target="_blank" rel="noopener noreferrer">校验更新的文件</a>：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">npm</span> i lint-staged <span class="token parameter variable">-D</span></span>
<span class="line"></span></code></pre></div><p>接着前往 <code>package.json</code> 增加 <code>lint-staged</code> 字段，以 vue-cli 创建的项目示例：</p><div class="language-json" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token property">&quot;lint-staged&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;*.{js,jsx,vue,ts,tsx}&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;vue-cli-service lint&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;git add&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><p>而 husky 校验同样不在 <code>package.json</code> 中设置了：</p><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">npx husky <span class="token function">add</span> .husky/pre-commit <span class="token string">&quot;npx --no-install lint-staged&quot;</span></span>
<span class="line"></span></code></pre></div><p>如果还想加些什么，可以手动追加，例如 <a href="https://github.com/stylelint/stylelint" target="_blank" rel="noopener noreferrer">stylelint</a>。</p>`,46)])])}const i=a(t,[["render",o]]),r=JSON.parse('{"path":"/tools/git/commit-message.html","title":"规范 Git 提交信息并生成日志","lang":"zh-CN","frontmatter":{"tags":["husky"]},"headers":[{"level":2,"title":"Commit 规范化","slug":"commit-规范化","link":"#commit-规范化","children":[{"level":3,"title":"1. 模板","slug":"_1-模板","link":"#_1-模板","children":[]},{"level":3,"title":"2. 强制规范","slug":"_2-强制规范","link":"#_2-强制规范","children":[]}]},{"level":2,"title":"生成 CHANGELOG","slug":"生成-changelog","link":"#生成-changelog","children":[{"level":3,"title":"1. 配置","slug":"_1-配置","link":"#_1-配置","children":[]},{"level":3,"title":"2. 指定版本","slug":"_2-指定版本","link":"#_2-指定版本","children":[]},{"level":3,"title":"3. hash 链接","slug":"_3-hash-链接","link":"#_3-hash-链接","children":[]}]},{"level":2,"title":"代码校验","slug":"代码校验","link":"#代码校验","children":[]}],"git":{"updatedTime":1652280369000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":4,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"tools/git/commit-message.md"}');export{i as comp,r as data};
