import{_ as s,c as a,a as p,o as t}from"./app-BCSwjUcF.js";const o={};function e(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="第三大的数" tabindex="-1"><a class="header-anchor" href="#第三大的数"><span>第三大的数</span></a></h1><h2 id="三个数" tabindex="-1"><a class="header-anchor" href="#三个数"><span>三个数</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">thirdMax</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">Infinity</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> num <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&gt;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      c <span class="token operator">=</span> b</span>
<span class="line">      b <span class="token operator">=</span> a</span>
<span class="line">      a <span class="token operator">=</span> num</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> a <span class="token operator">&amp;&amp;</span> num <span class="token operator">&gt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      c <span class="token operator">=</span> b</span>
<span class="line">      b <span class="token operator">=</span> num</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> num <span class="token operator">&gt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      c <span class="token operator">=</span> num</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> c <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span> <span class="token operator">?</span> a <span class="token operator">:</span> c</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div><h2 id="去重排序" tabindex="-1"><a class="header-anchor" href="#去重排序"><span>去重排序</span></a></h2><div class="language-typescript" data-highlighter="prismjs" data-ext="ts" data-title="ts"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">thirdMax</span><span class="token punctuation">(</span>nums<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> ret<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> ret<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span> <span class="token operator">:</span> ret<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre></div>`,5)]))}const u=s(o,[["render",e]]),r=JSON.parse('{"path":"/algorithms/414-third-maximum-number.html","title":"第三大的数","lang":"zh-CN","frontmatter":{"autoSort":-414},"headers":[{"level":2,"title":"三个数","slug":"三个数","link":"#三个数","children":[]},{"level":2,"title":"去重排序","slug":"去重排序","link":"#去重排序","children":[]}],"git":{"updatedTime":1636376001000,"contributors":[{"name":"shanyuhai123","username":"shanyuhai123","email":"864299347@qq.com","commits":1,"url":"https://github.com/shanyuhai123"}]},"filePathRelative":"algorithms/414-third-maximum-number.md"}');export{u as comp,r as data};
