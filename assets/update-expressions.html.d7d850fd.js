import{r as e,o as a,c as n,a as s,F as t,d as l,b as o}from"./app.234fe1d4.js";const r={},p=l('<h2 id="自增-减" tabindex="-1"><a class="header-anchor" href="#自增-减" aria-hidden="true">#</a> 自增/减</h2><p>自增/减操作分为两种：</p><ul><li>前置递增/减：<code>a++/a--</code></li><li>后置递增/减：<code>++a/--a</code></li></ul><p>对于自增/减操作，初学时总是看到这样错误的说明：</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> uid <span class="token operator">=</span> id<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>\n<span class="token comment">// 赋值运算符优先于算数运算符，先执行赋值操作，再执行++操作</span>\n\n<span class="token keyword">let</span> id <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> uid <span class="token operator">=</span> <span class="token operator">++</span>id<span class="token punctuation">;</span> <span class="token comment">// 1</span>\n<span class="token comment">// 算数运算符优先于赋值运算符，先执行++操作，再执行赋值操作</span>\n</code></pre></div>',5),u=o("其实稍微翻一下 "),c={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence",target:"_blank",rel:"noopener noreferrer"},d=o("MDN"),i=o(" 或其余的书都可以得到：后置递增/减的优先级为 18，前置递增/减的优先级为 17，而赋值操作的优先级为 3。"),k=s("h2",{id:"原理定义",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#原理定义","aria-hidden":"true"},"#"),o(" 原理定义")],-1),h=o("在 "),m={href:"https://tc39.es/ecma262/#sec-update-expressions",target:"_blank",rel:"noopener noreferrer"},x=o("ECMA"),g=o(" 标准中可以找到如下："),f=s("div",{class:"language-text ext-text"},[s("pre",{class:"language-text"},[s("code",null,"# 12.4.5 Postfix Decrement Operator（后置递增）\n1. Let lhs be the result of evaluating LeftHandSideExpression.\n\n2. Let oldValue be ? ToNumeric(? GetValue(lhs)).\n\n3. Let newValue be ! Type(oldValue)::subtract(oldValue, Type(oldValue)::unit).\n\n4. Perform ? PutValue(lhs, newValue).\n\n5. Return oldValue.\n")])],-1),V=s("div",{class:"language-text ext-text"},[s("pre",{class:"language-text"},[s("code",null,"# 12.4.7 Prefix Decrement Operator（前置递增）\n1. Let expr be the result of evaluating UnaryExpression.\n\n2. Let oldValue be ? ToNumeric(? GetValue(expr)).\n\n3. Let newValue be ! Type(oldValue)::add(oldValue, Type(oldValue)::unit).\n\n4. Perform ? PutValue(expr, newValue).\n\n5. Return newValue.\n")])],-1),b=s("p",null,[o("对比两个第五项返回值操作，可以发现"),s("strong",null,"后置递增是返回旧的值"),o("，而"),s("strong",null,"前置递增是返回新的值"),o("。")],-1),v=s("p",null,"赋值操作是将返回值赋给对应的变量，那么结果就很明确了。",-1);r.render=function(l,o){const r=e("OutboundLink");return a(),n(t,null,[p,s("p",null,[u,s("a",c,[d,s(r)]),i]),k,s("p",null,[h,s("a",m,[x,s(r)]),g]),f,V,b,v],64)};export default r;
