import{r as e,o as a,c as n,a as s,F as t,d as o,b as c}from"./app.f329c6d2.js";const l={},r=o('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>虽然 kubeadm 屏蔽了细节，遇到问题难以排查，但是它简单快捷。</p><p>规划为单 master 三 node 的集群，并在 master 中设置 hosts。</p><div class="language-text ext-text"><pre class="language-text"><code>hostnamectl set-hostname k8s-master\n</code></pre></div><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;&gt;</span> /etc/hosts <span class="token operator">&lt;&lt;</span> <span class="token string">EOF\n10.0.0.140 k8s-master\n10.0.0.141 k8s-node1\n10.0.0.142 k8s-node2\n10.0.0.143 k8s-node3\nEOF</span>\n</code></pre></div><h2 id="初始化操作" tabindex="-1"><a class="header-anchor" href="#初始化操作" aria-hidden="true">#</a> 初始化操作</h2><h3 id="_1-关闭防火墙" tabindex="-1"><a class="header-anchor" href="#_1-关闭防火墙" aria-hidden="true">#</a> 1. 关闭防火墙</h3>',7),p=c("方便测试，具体可根据 "),d={href:"https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports",target:"_blank",rel:"noopener noreferrer"},i=c("检查所需端口"),u=c("。"),h=o('<div class="language-bash ext-sh"><pre class="language-bash"><code>systemctl stop firewalld\nsystemctl disable firewalld\n</code></pre></div><h3 id="_2-关闭-selinux" tabindex="-1"><a class="header-anchor" href="#_2-关闭-selinux" aria-hidden="true">#</a> 2. 关闭 selinux</h3><p>这是允许容器访问主机文件系统所必需的，而这些操作时为了例如 Pod 网络工作正常。</p><div class="language-bash ext-sh"><pre class="language-bash"><code>setenforce <span class="token number">0</span>\n\n<span class="token function">sed</span> -i <span class="token string">&#39;s/enforcing/disabled/&#39;</span> /etc/selinux/config\n</code></pre></div><h3 id="_3-关闭-swap" tabindex="-1"><a class="header-anchor" href="#_3-关闭-swap" aria-hidden="true">#</a> 3. 关闭 swap</h3><div class="language-bash ext-sh"><pre class="language-bash"><code>swapoff -a\n\n<span class="token function">sed</span> -ri <span class="token string">&#39;s/.*swap.*/#&amp;/&#39;</span> /etc/fstab\n</code></pre></div><h3 id="_4-允许-iptables-检查桥接流量" tabindex="-1"><a class="header-anchor" href="#_4-允许-iptables-检查桥接流量" aria-hidden="true">#</a> 4. 允许 iptables 检查桥接流量</h3><p>确保 <code>br_netfilter</code> 模块被加载。</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/modules-load.d/k8s.conf</span>\nbr_netfilter\nEOF</span>\n\n<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/sysctl.d/k8s.conf</span>\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\nEOF</span>\nsysctl --system  <span class="token comment"># 生效</span>\n</code></pre></div><h3 id="_5-时间同步" tabindex="-1"><a class="header-anchor" href="#_5-时间同步" aria-hidden="true">#</a> 5. 时间同步</h3><div class="language-bash ext-sh"><pre class="language-bash"><code>yum <span class="token function">install</span> ntpdate -y\nntpdate ntp1.aliyun.com\n</code></pre></div><h2 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h2><h3 id="_1-安装-docker" tabindex="-1"><a class="header-anchor" href="#_1-安装-docker" aria-hidden="true">#</a> 1. 安装 docker</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">curl</span> -fsSL https://get.docker.com -o get-docker.sh\n<span class="token function">sh</span> get-docker.sh --mirror Aliyun\n\nsystemctl <span class="token builtin class-name">enable</span> docker <span class="token operator">&amp;&amp;</span> systemctl start docker\n\ndocker --version\n</code></pre></div><p>还需要配置 Docker 源</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span> <span class="token string">EOF\n{\n  &quot;registry-mirrors&quot;: [\n    &quot;https://hub-mirror.c.163.com&quot;,\n    &quot;https://docker.mirrors.ustc.edu.cn&quot;\n  ]\n}\nEOF</span>\n\nsystemctl daemon-reload\nsystemctl restart docker\n</code></pre></div><h3 id="_2-安装-kubeadm、kubelet-和-kubectl" tabindex="-1"><a class="header-anchor" href="#_2-安装-kubeadm、kubelet-和-kubectl" aria-hidden="true">#</a> 2. 安装 kubeadm、kubelet 和 kubectl</h3><p>说明：</p><ul><li><code>kubeadm</code>：用来初始化集群的指令</li><li><code>kubelet</code>：在集群中的每个节点上用来启动 Pod 和容器等</li><li><code>kubectl</code>：用来与集群通信的命令行工具</li></ul><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">cat</span> <span class="token operator">&gt;</span> /etc/yum.repos.d/kubernetes.repo <span class="token operator">&lt;&lt;</span> <span class="token string">EOF\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64\nenabled=1\ngpgcheck=0\nrepo_gpgcheck=0\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF</span>\n\n<span class="token comment"># 需确保以下工具版本相同</span>\nyum <span class="token function">install</span> -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0\n\nsystemctl <span class="token builtin class-name">enable</span> kubelet\nsystemctl daemon-reload\nsystemctl restart kubelet\n</code></pre></div><h2 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h2><h3 id="_1-在-master-进行-init" tabindex="-1"><a class="header-anchor" href="#_1-在-master-进行-init" aria-hidden="true">#</a> 1. 在 master 进行 init</h3><p>master 节点至少需要有2个 CPU。</p><div class="language-bash ext-sh"><pre class="language-bash"><code>kubeadm init <span class="token punctuation">\\</span>\n  --apiserver-advertise-address<span class="token operator">=</span><span class="token number">10.0</span>.0.140 <span class="token punctuation">\\</span>\n  --image-repository registry.aliyuncs.com/google_containers <span class="token punctuation">\\</span>\n  --kubernetes-version v1.18.0 <span class="token punctuation">\\</span>\n  --pod-network-cidr<span class="token operator">=</span><span class="token number">10.244</span>.0.0/16\n</code></pre></div><p>然后根据提示：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">mkdir</span> -p <span class="token environment constant">$HOME</span>/.kube\n<span class="token function">sudo</span> <span class="token function">cp</span> -i /etc/kubernetes/admin.conf <span class="token environment constant">$HOME</span>/.kube/config\n<span class="token function">sudo</span> <span class="token function">chown</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -u<span class="token variable">)</span></span><span class="token builtin class-name">:</span><span class="token variable"><span class="token variable">$(</span><span class="token function">id</span> -g<span class="token variable">)</span></span> <span class="token environment constant">$HOME</span>/.kube/config\n\n<span class="token comment"># 检查 nodes</span>\nkubectl get nodes\n</code></pre></div><h3 id="_2-在-node-申请加入" tabindex="-1"><a class="header-anchor" href="#_2-在-node-申请加入" aria-hidden="true">#</a> 2. 在 node 申请加入</h3><p>master init 后存在如下提示，切换到 node 节点</p><div class="language-bash ext-sh"><pre class="language-bash"><code>Then you can <span class="token function">join</span> any number of worker nodes by running the following on each as root:\n\nkubeadm <span class="token function">join</span> <span class="token number">10.0</span>.0.130:6443 --token 5q3hp6.bfy624lj790rb68n <span class="token punctuation">\\</span>\n    --discovery-token-ca-cert-hash sha256:49820391560bf7286be2ebf0d86fe0ba32352f1032b468896dc71383600cd697\n</code></pre></div><p>token 有效期为 12 小时。</p><div class="language-bash ext-sh"><pre class="language-bash"><code>kubeadm token create --print-join-command\n</code></pre></div><h3 id="_3-增加-cni-网络插件" tabindex="-1"><a class="header-anchor" href="#_3-增加-cni-网络插件" aria-hidden="true">#</a> 3. 增加 CNI 网络插件</h3><p>查看 nodes 的 STATUS 还是 NotReady。是由于必须部署一个基于 Pod 网络插件的 容器网络接口（CNI），以便于 Pod 之间互相通信。</p><div class="language-bash ext-sh"><pre class="language-bash"><code>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n\nkubectl get pods -n kube-system\n</code></pre></div>',34),k=c("如果存在 STATUS 为 Init:ImagePullBackOff，那么可前往 yml 配置文件寻找"),b={href:"https://github.com/coreos/flannel/releases",target:"_blank",rel:"noopener noreferrer"},g=c("对应的镜像"),m=c("，手动 "),f=s("code",null,"docker pull",-1),v=c(" 或 "),x=s("code",null,"docker load",-1),y=c("。"),_=o('<p>最后得到：</p><div class="language-text ext-text"><pre class="language-text"><code>NAME         STATUS     ROLES    AGE    VERSION\nk8s-master   Ready      master   3m8s   v1.18.0\nk8s-node1    Ready      &lt;none&gt;   55s    v1.18.0\nk8s-node2    Ready      &lt;none&gt;   54s    v1.18.0\nk8s-node3    Ready      &lt;none&gt;   51s    v1.18.0\n</code></pre></div><h2 id="清理" tabindex="-1"><a class="header-anchor" href="#清理" aria-hidden="true">#</a> 清理</h2><p>如果你在集群中使用了一次性服务器进行测试，则可以关闭这些服务器，而无需进一步清理。你可以使用 <code>kubectl config delete-cluster</code> 删除对集群的本地引用。</p><p>但是，如果要更干净地取消配置群集， 则应首先清空节点并确保该节点为空， 然后取消配置该节点。</p><h3 id="删除节点" tabindex="-1"><a class="header-anchor" href="#删除节点" aria-hidden="true">#</a> 删除节点</h3><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># kubectl drain &lt;node name&gt; --delete-local-data --force --ignore-daemonsets</span>\nkubectl drain k8s-node1 --delete-local-data --force --ignore-daemonsets\nkubectl drain k8s-node2 --delete-local-data --force --ignore-daemonsets\nkubectl drain k8s-node3 --delete-local-data --force --ignore-daemonsets\n</code></pre></div><p>在删除节点前重置状态：</p><div class="language-bash ext-sh"><pre class="language-bash"><code>kubeadm reset\n</code></pre></div><p>清除 iptables 规则及重置 IPVS 表：</p><div class="language-bash ext-sh"><pre class="language-bash"><code>iptables -F <span class="token operator">&amp;&amp;</span> iptables -t nat -F <span class="token operator">&amp;&amp;</span> iptables -t mangle -F <span class="token operator">&amp;&amp;</span> iptables -X\n\nipvsadm -C\n</code></pre></div><p>最后删除节点：</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token comment"># kubectl delete node &lt;node name&gt;</span>\nkubectl delete node k8s-node1\nkubectl delete node k8s-node2\nkubectl delete node k8s-node3\n</code></pre></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h2><div class="language-bash ext-sh"><pre class="language-bash"><code>kubectl create deployment nginx --image<span class="token operator">=</span>nginx\nkubectl expose deployment nginx --port<span class="token operator">=</span><span class="token number">80</span> --type<span class="token operator">=</span>NodePort\n\n<span class="token comment"># 根据提示访问对应端口</span>\nkubectl get pod,svc\n</code></pre></div>',15);l.render=function(o,c){const l=e("OutboundLink");return a(),n(t,null,[r,s("p",null,[p,s("a",d,[i,s(l)]),u]),h,s("p",null,[k,s("a",b,[g,s(l)]),m,f,v,x,y]),_],64)};export default l;
