import{r as n,o as s,c as a,a as t,b as p,w as e,F as o,d as c,e as u}from"./app.76ed24de.js";const l={},i=t("h2",{id:"描述",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#描述","aria-hidden":"true"},"#"),c(" 描述")],-1),d=t("div",{class:"custom-container danger"},[t("p",{class:"custom-container-title"},"要考的"),t("p",null,[t("code",null,"undefined"),c(" 是全局对象的一个属性。也就是说，它是全局作用域的一个变量。"),t("code",null,"undefiled"),c(" 的最初始值就是原始数据类型 "),t("code",null,"undefiled"),c("。")])],-1),k=c("一个没有被赋值的变量的类型是 "),r=t("code",null,"undefiled",-1),f=c("。如果方法或者语句中操作的变量没有赋值，则会返回 "),g=t("code",null,"undefiled",-1),m=c("（"),y=c("语句完成值"),w=c("）。"),h=u('<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n  <span class="token keyword">return</span> a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n</code></pre></div><h2 id="变量名" tabindex="-1"><a class="header-anchor" href="#变量名" aria-hidden="true">#</a> 变量名</h2><p>由于 <code>undefiled</code> 不是一个保留字，所以它可能在非全局作用域中被当作变量名来使用。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>\n\n<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">var</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a string</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',4);l.render=function(c,u){const l=n("RouterLink");return s(),a(o,null,[i,d,t("p",null,[k,r,f,g,m,p(l,{to:"/frontend/javascript/statements-and-expressions.html#%E8%AF%AD%E5%8F%A5%E5%AE%8C%E6%88%90%E5%80%BC"},{default:e((()=>[y])),_:1}),w]),h],64)};export{l as default};
