import{r as o,c as e,a as n,b as t,F as c,d as s,e as p,o as l}from"./app.7b865752.js";import{_ as r}from"./plugin-vue_export-helper.5a098b48.js";const u={},i=n("h2",{id:"\u957F\u5EA6",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u957F\u5EA6","aria-hidden":"true"},"#"),s(" \u957F\u5EA6")],-1),k=n("h3",{id:"_1-bytesize",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-bytesize","aria-hidden":"true"},"#"),s(" 1. byteSize")],-1),g=n("p",null,[n("strong",null,"FROM")],-1),d={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},m=s("30 seconds of code (String)"),h=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6CA1\u60F3\u5230\u957F\u5EA6\u662F\u4EA4\u7531 <code>Blob</code> \u5904\u7406\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">byteSize</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">byteSize</span><span class="token punctuation">(</span><span class="token string">&#39;\u{1F600}&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token function">byteSize</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>
</code></pre></div><h2 id="\u5224\u65AD" tabindex="-1"><a class="header-anchor" href="#\u5224\u65AD" aria-hidden="true">#</a> \u5224\u65AD</h2><h3 id="_1-isabsoluteurl-url" tabindex="-1"><a class="header-anchor" href="#_1-isabsoluteurl-url" aria-hidden="true">#</a> 1. isAbsoluteURL\uFF08URL\uFF09</h3><p><strong>FROM</strong></p>`,9),f={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},_=s("30 seconds of code (String)"),v=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAbsoluteURL</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z][a-z0-9+.-]*:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;https://google.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;ftp://www.myserver.net&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;/foo/bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><h3 id="_2-isanagram" tabindex="-1"><a class="header-anchor" href="#_2-isanagram" aria-hidden="true">#</a> 2. isAnagram</h3><p><strong>FROM</strong></p>`,8),x={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},b=s("30 seconds of code (String)"),j=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAnagram</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token function-variable function">normalize</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>
    str
      <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^a-z0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">normalize</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">normalize</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token string">&#39;iceman&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cinema&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h3 id="_3-isuppercase-islowercase" tabindex="-1"><a class="header-anchor" href="#_3-isuppercase-islowercase" aria-hidden="true">#</a> 3. isUpperCase/isLowerCase</h3><p><strong>FROM</strong></p>`,8),w={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},S=s("30 seconds of code (String)"),T=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isUpperCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str <span class="token operator">===</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isLowerCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str <span class="token operator">===</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;A3@$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;aB4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;a3@$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;Ab4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre></div><h3 id="_4-palindrome-\u56DE\u6587" tabindex="-1"><a class="header-anchor" href="#_4-palindrome-\u56DE\u6587" aria-hidden="true">#</a> 4. palindrome\uFF08\u56DE\u6587\uFF09</h3><p><strong>FROM</strong></p>`,8),L={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},y=s("30 seconds of code (String)"),C=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">palindrome</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\W_]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> s <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token string">&#39;taco cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h3 id="_5-yesno" tabindex="-1"><a class="header-anchor" href="#_5-yesno" aria-hidden="true">#</a> 5. yesNo</h3><p><strong>FROM</strong></p>`,8),A={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},E=s("30 seconds of code (String)"),M=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">yesNo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> def <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(y|yes)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(n|no)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> def<span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;No&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;Foo&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h2 id="\u683C\u5F0F" tabindex="-1"><a class="header-anchor" href="#\u683C\u5F0F" aria-hidden="true">#</a> \u683C\u5F0F</h2><h3 id="_1-capitalize-\u9996\u5B57\u6BCD\u5927\u5199" tabindex="-1"><a class="header-anchor" href="#_1-capitalize-\u9996\u5B57\u6BCD\u5927\u5199" aria-hidden="true">#</a> 1. capitalize\uFF08\u9996\u5B57\u6BCD\u5927\u5199\uFF09</h3><p><strong>FROM</strong></p>`,9),N={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},I=s("30 seconds of code (String)"),F=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">capitalize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> lowerRest <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  first<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lowerRest <span class="token operator">?</span> rest<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> rest<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;FooBar&#39;</span>
<span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Foobar&#39;</span>
</code></pre></div><h3 id="_2-expandtabs-\u6362\u884C\u7B26" tabindex="-1"><a class="header-anchor" href="#_2-expandtabs-\u6362\u884C\u7B26" aria-hidden="true">#</a> 2. expandTabs\uFF08\u6362\u884C\u7B26\uFF09</h3><p><strong>FROM</strong></p>`,8),O={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},U=s("30 seconds of code (String)"),R=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">expandTabs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\t</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">expandTabs</span><span class="token punctuation">(</span><span class="token string">&#39;\\t\\tlorem&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;      lorem&#39;</span>
</code></pre></div><h3 id="_3-capitalizeeveryword-\u5355\u8BCD\u5927\u5199" tabindex="-1"><a class="header-anchor" href="#_3-capitalizeeveryword-\u5355\u8BCD\u5927\u5199" aria-hidden="true">#</a> 3. capitalizeEveryWord\uFF08\u5355\u8BCD\u5927\u5199\uFF09</h3><p><strong>FROM</strong></p>`,8),P={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},B=s("30 seconds of code (String)"),z=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">capitalizeEveryWord</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">char</span> <span class="token operator">=&gt;</span> char<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">capitalizeEveryWord</span><span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hello World!&#39;</span>
</code></pre></div><h3 id="_4-fromcamelcase-\u9A7C\u5CF0" tabindex="-1"><a class="header-anchor" href="#_4-fromcamelcase-\u9A7C\u5CF0" aria-hidden="true">#</a> 4. fromCamelCase\uFF08\u9A7C\u5CF0\uFF09</h3><p><strong>FROM</strong></p>`,8),D={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},X=s("30 seconds of code (String)"),q=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fromCamelCase <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> separator <span class="token operator">=</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  str
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-z\\d])([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span> <span class="token operator">+</span> separator <span class="token operator">+</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z]+)([A-Z][a-z\\d]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span> <span class="token operator">+</span> separator <span class="token operator">+</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someDatabaseFieldName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some database field name&#39;</span>
<span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someLabelThatNeedsToBeCamelized&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-label-that-needs-to-be-camelized&#39;</span>
<span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someJavascriptProperty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_javascript_property&#39;</span>
</code></pre></div><h3 id="_5-indentstring-\u7F29\u8FDB" tabindex="-1"><a class="header-anchor" href="#_5-indentstring-\u7F29\u8FDB" aria-hidden="true">#</a> 5. indentString\uFF08\u7F29\u8FDB\uFF09</h3><p><strong>FROM</strong></p>`,8),H={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},W=s("30 seconds of code (String)"),Z=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> indentString <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> count<span class="token punctuation">,</span> indent <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> indent<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">indentString</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem\\nIpsum&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;  Lorem\\n  Ipsum&#39;</span>
<span class="token function">indentString</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem\\nIpsum&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;__Lorem\\n__Ipsum&#39;</span>
</code></pre></div><h3 id="_6-mapstring-\u81EA\u5B9A\u4E49" tabindex="-1"><a class="header-anchor" href="#_6-mapstring-\u81EA\u5B9A\u4E49" aria-hidden="true">#</a> 6. mapString\uFF08\u81EA\u5B9A\u4E49\uFF09</h3><p><strong>FROM</strong></p>`,8),$={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},V=s("30 seconds of code (String)"),G=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  str
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> i<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">mapString</span><span class="token punctuation">(</span><span class="token string">&#39;lorem ipsum&#39;</span><span class="token punctuation">,</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;LOREM IPSUM&#39;</span>
</code></pre></div><h3 id="_7-tocamelcase-\u9A7C\u5CF0" tabindex="-1"><a class="header-anchor" href="#_7-tocamelcase-\u9A7C\u5CF0" aria-hidden="true">#</a> 7. toCamelCase\uFF08\u9A7C\u5CF0\uFF09</h3><p><strong>FROM</strong></p>`,8),K={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},J=s("30 seconds of code (String)"),Y=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toCamelCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> s <span class="token operator">=</span>
    str <span class="token operator">&amp;&amp;</span>
    str
      <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some_database_field_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someDatabaseFieldName&#39;</span>
<span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;Some label that needs to be camelized&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someLabelThatNeedsToBeCamelized&#39;</span>
<span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-javascript-property&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someJavascriptProperty&#39;</span>
<span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string with spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someMixedStringWithSpacesUnderscoresAndHyphens&#39;</span>
</code></pre></div><h3 id="_8-tokebabcase-\u6A2A\u7EBF" tabindex="-1"><a class="header-anchor" href="#_8-tokebabcase-\u6A2A\u7EBF" aria-hidden="true">#</a> 8. toKebabCase\uFF08\u6A2A\u7EBF\uFF09</h3><p><strong>FROM</strong></p>`,8),Q={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},nn=s("30 seconds of code (String)"),sn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toKebabCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>
  str <span class="token operator">&amp;&amp;</span>
  str
    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;camelCase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;camel-case&#39;</span>
<span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-text&#39;</span>
<span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string With spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-mixed-string-with-spaces-underscores-and-hyphens&#39;</span>
<span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;AllThe-small Things&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;all-the-small-things&quot;</span>
<span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-xml-and-html&quot;</span>
</code></pre></div><h3 id="_9-tosnakecase-\u4E0B\u5212\u7EBF" tabindex="-1"><a class="header-anchor" href="#_9-tosnakecase-\u4E0B\u5212\u7EBF" aria-hidden="true">#</a> 9. toSnakeCase\uFF08\u4E0B\u5212\u7EBF\uFF09</h3><p><strong>FROM</strong></p>`,8),an={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},tn=s("30 seconds of code (String)"),pn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toSnakeCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>
  str <span class="token operator">&amp;&amp;</span>
  str
    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;camelCase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;camel_case&#39;</span>
<span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_text&#39;</span>
<span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string With spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_mixed_string_with_spaces_underscores_and_hyphens&#39;</span>
<span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;AllThe-small Things&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;all_the_small_things&quot;</span>
<span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html&quot;</span>
</code></pre></div><h3 id="_10-totitlecase-\u6807\u9898" tabindex="-1"><a class="header-anchor" href="#_10-totitlecase-\u6807\u9898" aria-hidden="true">#</a> 10. toTitleCase\uFF08\u6807\u9898\uFF09</h3><p><strong>FROM</strong></p>`,8),on={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},en=s("30 seconds of code (String)"),cn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toTitleCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>
  str
    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some_database_field_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Database Field Name&#39;</span>
<span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;Some label that needs to be title-cased&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Label That Needs To Be Title Cased&#39;</span>
<span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-package-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Package Name&#39;</span>
<span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string with spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Mixed String With Spaces Underscores And Hyphens&#39;</span>
</code></pre></div><h2 id="\u7A7A\u683C" tabindex="-1"><a class="header-anchor" href="#\u7A7A\u683C" aria-hidden="true">#</a> \u7A7A\u683C</h2><h3 id="_1-containswhitespace" tabindex="-1"><a class="header-anchor" href="#_1-containswhitespace" aria-hidden="true">#</a> 1. containsWhitespace</h3><p><strong>FROM</strong></p>`,9),ln={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},rn=s("30 seconds of code (String)"),un=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">containsWhitespace</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;lorem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;lorem ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div><h3 id="_2-compactwhitespace" tabindex="-1"><a class="header-anchor" href="#_2-compactwhitespace" aria-hidden="true">#</a> 2. compactWhitespace</h3><p><strong>FROM</strong></p>`,8),kn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},gn=s("30 seconds of code (String)"),dn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">compactWhitespace</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s{2,}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">compactWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem    Ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Lorem Ipsum&#39;</span>
<span class="token function">compactWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem \\n Ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Lorem Ipsum&#39;</span>
</code></pre></div><h2 id="csv" tabindex="-1"><a class="header-anchor" href="#csv" aria-hidden="true">#</a> CSV</h2><h3 id="_1-csvtoarray" tabindex="-1"><a class="header-anchor" href="#_1-csvtoarray" aria-hidden="true">#</a> 1. CSVToArray</h3><p><strong>FROM</strong></p>`,9),mn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},hn=s("30 seconds of code (String)"),fn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> CSVToArray <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> omitFirstRow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  data
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>omitFirstRow <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;a,b\\nc,d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span>
<span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;a;b\\nc;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span>
<span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;col1,col2\\na,b\\nc,d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span>
</code></pre></div><h3 id="_2-csvtojson" tabindex="-1"><a class="header-anchor" href="#_2-csvtojson" aria-hidden="true">#</a> 2. CSVToJSON</h3><p><strong>FROM</strong></p>`,8),_n={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},vn=s("30 seconds of code (String)"),xn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> CSVToJSON <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> titles <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> data
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> values <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> titles<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> title<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>title<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">CSVToJSON</span><span class="token punctuation">(</span><span class="token string">&#39;col1,col2\\na,b\\nc,d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{&#39;col1&#39;: &#39;a&#39;, &#39;col2&#39;: &#39;b&#39;}, {&#39;col1&#39;: &#39;c&#39;, &#39;col2&#39;: &#39;d&#39;}];</span>
<span class="token function">CSVToJSON</span><span class="token punctuation">(</span><span class="token string">&#39;col1;col2\\na;b\\nc;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{&#39;col1&#39;: &#39;a&#39;, &#39;col2&#39;: &#39;b&#39;}, {&#39;col1&#39;: &#39;c&#39;, &#39;col2&#39;: &#39;d&#39;}];</span>
</code></pre></div><h2 id="\u8F6C\u4E49" tabindex="-1"><a class="header-anchor" href="#\u8F6C\u4E49" aria-hidden="true">#</a> \u8F6C\u4E49</h2><h3 id="_1-escapehtml-html" tabindex="-1"><a class="header-anchor" href="#_1-escapehtml-html" aria-hidden="true">#</a> 1. escapeHTML\uFF08HTML\uFF09</h3><p><strong>FROM</strong></p>`,9),bn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},jn=s("30 seconds of code (String)"),wn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">escapeHTML</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>
  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&amp;&lt;&gt;&#39;&quot;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>
    <span class="token parameter">tag</span> <span class="token operator">=&gt;</span>
      <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string">&#39;&amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;amp;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;lt;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;gt;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&quot;&#39;&quot;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;#39;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;quot;&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">||</span> tag<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Me &amp;amp; you&amp;lt;/a&amp;gt;&#39;</span>
</code></pre></div><h3 id="_2-unescapehtml-html" tabindex="-1"><a class="header-anchor" href="#_2-unescapehtml-html" aria-hidden="true">#</a> 2. unescapeHTML\uFF08HTML\uFF09</h3><p><strong>FROM</strong></p>`,8),Sn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Tn=s("30 seconds of code (String)"),Ln=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">unescapeHTML</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>
  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>
    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;amp;|&amp;lt;|&amp;gt;|&amp;#39;|&amp;quot;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>
    <span class="token parameter">tag</span> <span class="token operator">=&gt;</span>
      <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token string">&#39;&amp;amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&amp;lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&amp;gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&amp;#39;&#39;</span><span class="token operator">:</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span>
        <span class="token string">&#39;&amp;quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&quot;&#39;</span>
      <span class="token punctuation">}</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">||</span> tag<span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">unescapeHTML</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Me &amp;amp; you&amp;lt;/a&amp;gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;&#39;</span>
</code></pre></div><h3 id="_3-escaperegexp-\u6B63\u5219" tabindex="-1"><a class="header-anchor" href="#_3-escaperegexp-\u6B63\u5219" aria-hidden="true">#</a> 3. escapeRegExp\uFF08\u6B63\u5219\uFF09</h3><p><strong>FROM</strong></p>`,8),yn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Cn=s("30 seconds of code (String)"),An=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">escapeRegExp</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.*+?^\${}()|[\\]\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">escapeRegExp</span><span class="token punctuation">(</span><span class="token string">&#39;(test)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\\\(test\\\\)</span>
</code></pre></div><h3 id="_4-striphtmltags-html" tabindex="-1"><a class="header-anchor" href="#_4-striphtmltags-html" aria-hidden="true">#</a> 4. stripHTMLTags\uFF08HTML\uFF09</h3><p><strong>FROM</strong></p>`,8),En={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Mn=s("30 seconds of code (String)"),Nn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">stripHTMLTags</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^&gt;]*&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">stripHTMLTags</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;&lt;em&gt;lorem&lt;/em&gt; &lt;strong&gt;ipsum&lt;/strong&gt;&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;lorem ipsum&#39;</span>
</code></pre></div><h2 id="\u6269\u5C55" tabindex="-1"><a class="header-anchor" href="#\u6269\u5C55" aria-hidden="true">#</a> \u6269\u5C55</h2><h3 id="_1-extendhex-\u989C\u8272" tabindex="-1"><a class="header-anchor" href="#_1-extendhex-\u989C\u8272" aria-hidden="true">#</a> 1. extendHex\uFF08\u989C\u8272\uFF09</h3><p><strong>FROM</strong></p>`,9),In={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Fn=s("30 seconds of code (String)"),On=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">extendHex</span> <span class="token operator">=</span> <span class="token parameter">shortHex</span> <span class="token operator">=&gt;</span>
  <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span>
  shortHex
    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>shortHex<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">extendHex</span><span class="token punctuation">(</span><span class="token string">&#39;#03f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;#0033ff&#39;</span>
<span class="token function">extendHex</span><span class="token punctuation">(</span><span class="token string">&#39;05a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;#0055aa&#39;</span>
</code></pre></div><h3 id="_2-hextorgb-rgb" tabindex="-1"><a class="header-anchor" href="#_2-hextorgb-rgb" aria-hidden="true">#</a> 2. hexToRGB\uFF08RGB\uFF09</h3><p><strong>FROM</strong></p>`,8),Un={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Rn=s("30 seconds of code (String)"),Pn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">hexToRGB</span> <span class="token operator">=</span> <span class="token parameter">hex</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> alpha <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    h <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">8</span><span class="token punctuation">)</span> alpha <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token string">&#39;rgb&#39;</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">24</span> <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">0x00ff0000</span> <span class="token operator">:</span> <span class="token number">0x00ff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">16</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">0x0000ff00</span> <span class="token operator">:</span> <span class="token number">0x0000ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">8</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>h <span class="token operator">&amp;</span> <span class="token number">0x000000ff</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>
    <span class="token string">&#39;)&#39;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;#27ae60ff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgba(39, 174, 96, 255)&#39;</span>
<span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;27ae60&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgb(39, 174, 96)&#39;</span>
<span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;#fff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgb(255, 255, 255)&#39;</span>
</code></pre></div><h3 id="_3-rgbtohex-hex" tabindex="-1"><a class="header-anchor" href="#_3-rgbtohex-hex" aria-hidden="true">#</a> 3. RGBToHex\uFF08hex\uFF09</h3><p><strong>FROM</strong></p>`,8),Bn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},zn=s("30 seconds of code (String)"),Dn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">RGBToHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">RGBToHex</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;ffa501&#39;</span>
</code></pre></div><h3 id="_4-mask-\u52A0\u5BC6" tabindex="-1"><a class="header-anchor" href="#_4-mask-\u52A0\u5BC6" aria-hidden="true">#</a> 4. mask\uFF08\u52A0\u5BC6\uFF09</h3><p><strong>FROM</strong></p>`,8),Xn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},qn=s("30 seconds of code (String)"),Hn=p('<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span>cc<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> mask <span class="token operator">=</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;******7890&#39;</span>\n<span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;*******890&#39;</span>\n<span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;$$$$567890&#39;</span>\n</code></pre></div><h3 id="_5-prettybytes-\u5B57\u8282" tabindex="-1"><a class="header-anchor" href="#_5-prettybytes-\u5B57\u8282" aria-hidden="true">#</a> 5. prettyBytes\uFF08\u5B57\u8282\uFF09</h3><p><strong>FROM</strong></p>',8),Wn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Zn=s("30 seconds of code (String)"),$n=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">prettyBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> addSpace <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token constant">UNITS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;KB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;YB&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token punctuation">(</span>addSpace <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">UNITS</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> exponent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>num <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">UNITS</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>num <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">**</span> exponent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span>precision<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token punctuation">(</span>addSpace <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">UNITS</span><span class="token punctuation">[</span>exponent<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1 KB&quot;</span>
<span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">27145424323.5821</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;-27.145 GB&quot;</span>
<span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123MB&quot;</span>
</code></pre></div><h3 id="_6-removenonascii-ascii" tabindex="-1"><a class="header-anchor" href="#_6-removenonascii-ascii" aria-hidden="true">#</a> 6. removeNonASCII\uFF08ASCII\uFF09</h3><p><strong>FROM</strong></p>`,8),Vn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Gn=s("30 seconds of code (String)"),Kn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">removeNonASCII</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\x20-\\x7E]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">removeNonASCII</span><span class="token punctuation">(</span><span class="token string">&#39;\xE4\xC4\xE7\xC7\xE9\xC9\xEAlorem-ipsum\xF6\xD6\xD0\xFE\xFA\xDA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;lorem-ipsum&#39;</span>
</code></pre></div><h3 id="_7-splitlines-\u6362\u884C" tabindex="-1"><a class="header-anchor" href="#_7-splitlines-\u6362\u884C" aria-hidden="true">#</a> 7. splitLines\uFF08\u6362\u884C\uFF09</h3><p><strong>FROM</strong></p>`,8),Jn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Yn=s("30 seconds of code (String)"),Qn=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">splitLines</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\r?\\n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">splitLines</span><span class="token punctuation">(</span><span class="token string">&#39;This\\nis a\\nmultiline\\nstring.\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;This&#39;, &#39;is a&#39;, &#39;multiline&#39;, &#39;string.&#39; , &#39;&#39;]</span>
</code></pre></div><h3 id="_8-stringpermutations-\u6392\u5E8F" tabindex="-1"><a class="header-anchor" href="#_8-stringpermutations-\u6392\u5E8F" aria-hidden="true">#</a> 8. stringPermutations\uFF08\u6392\u5E8F\uFF09</h3><p><strong>FROM</strong></p>`,8),ns={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},ss=s("30 seconds of code (String)"),as=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">stringPermutations</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> str
    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
      <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> letter<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">stringPermutations</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=&gt;</span> letter <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">stringPermutations</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;abc&#39;,&#39;acb&#39;,&#39;bac&#39;,&#39;bca&#39;,&#39;cab&#39;,&#39;cba&#39;]</span>
</code></pre></div><h3 id="_9-truncatestring-\u7701\u7565" tabindex="-1"><a class="header-anchor" href="#_9-truncatestring-\u7701\u7565" aria-hidden="true">#</a> 9. truncateString\uFF08\u7701\u7565\uFF09</h3><p><strong>FROM</strong></p>`,8),ts={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},ps=s("30 seconds of code (String)"),os=p(`<p><strong>DETAIL\uFF1A</strong></p><p>\u6682\u65E0\u3002</p><p><strong>FUNCTION\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">truncateString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> num <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> num <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span> <span class="token operator">:</span> str<span class="token punctuation">;</span>
</code></pre></div><p><strong>EXAMPLES\uFF1A</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">truncateString</span><span class="token punctuation">(</span><span class="token string">&#39;boomerang&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boom...&#39;</span>
</code></pre></div>`,6);function es(cs,ls){const a=o("OutboundLink");return l(),e(c,null,[i,k,g,n("p",null,[n("a",d,[m,t(a)])]),h,n("p",null,[n("a",f,[_,t(a)])]),v,n("p",null,[n("a",x,[b,t(a)])]),j,n("p",null,[n("a",w,[S,t(a)])]),T,n("p",null,[n("a",L,[y,t(a)])]),C,n("p",null,[n("a",A,[E,t(a)])]),M,n("p",null,[n("a",N,[I,t(a)])]),F,n("p",null,[n("a",O,[U,t(a)])]),R,n("p",null,[n("a",P,[B,t(a)])]),z,n("p",null,[n("a",D,[X,t(a)])]),q,n("p",null,[n("a",H,[W,t(a)])]),Z,n("p",null,[n("a",$,[V,t(a)])]),G,n("p",null,[n("a",K,[J,t(a)])]),Y,n("p",null,[n("a",Q,[nn,t(a)])]),sn,n("p",null,[n("a",an,[tn,t(a)])]),pn,n("p",null,[n("a",on,[en,t(a)])]),cn,n("p",null,[n("a",ln,[rn,t(a)])]),un,n("p",null,[n("a",kn,[gn,t(a)])]),dn,n("p",null,[n("a",mn,[hn,t(a)])]),fn,n("p",null,[n("a",_n,[vn,t(a)])]),xn,n("p",null,[n("a",bn,[jn,t(a)])]),wn,n("p",null,[n("a",Sn,[Tn,t(a)])]),Ln,n("p",null,[n("a",yn,[Cn,t(a)])]),An,n("p",null,[n("a",En,[Mn,t(a)])]),Nn,n("p",null,[n("a",In,[Fn,t(a)])]),On,n("p",null,[n("a",Un,[Rn,t(a)])]),Pn,n("p",null,[n("a",Bn,[zn,t(a)])]),Dn,n("p",null,[n("a",Xn,[qn,t(a)])]),Hn,n("p",null,[n("a",Wn,[Zn,t(a)])]),$n,n("p",null,[n("a",Vn,[Gn,t(a)])]),Kn,n("p",null,[n("a",Jn,[Yn,t(a)])]),Qn,n("p",null,[n("a",ns,[ss,t(a)])]),as,n("p",null,[n("a",ts,[ps,t(a)])]),os],64)}var is=r(u,[["render",es]]);export{is as default};
