import{r as n,o as s,c as a,a as t,b as p,F as o,d as e,e as c}from"./app.bbd11164.js";const l={},r=t("h2",{id:"ÈïøÂ∫¶",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#ÈïøÂ∫¶","aria-hidden":"true"},"#"),e(" ÈïøÂ∫¶")],-1),u=t("h3",{id:"_1-bytesize",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-bytesize","aria-hidden":"true"},"#"),e(" 1. byteSize")],-1),i=t("p",null,[t("strong",null,"FROM")],-1),k={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},g=e("30 seconds of code (String)"),d=c('<p><strong>DETAILÔºö</strong></p><p>Ê≤°ÊÉ≥Âà∞ÈïøÂ∫¶ÊòØ‰∫§Áî± <code>Blob</code> Â§ÑÁêÜ„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">byteSize</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">byteSize</span><span class="token punctuation">(</span><span class="token string">&#39;üòÄ&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>\n<span class="token function">byteSize</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 11</span>\n</code></pre></div><h2 id="Âà§Êñ≠" tabindex="-1"><a class="header-anchor" href="#Âà§Êñ≠" aria-hidden="true">#</a> Âà§Êñ≠</h2><h3 id="_1-isabsoluteurl-url" tabindex="-1"><a class="header-anchor" href="#_1-isabsoluteurl-url" aria-hidden="true">#</a> 1. isAbsoluteURLÔºàURLÔºâ</h3><p><strong>FROM</strong></p>',9),m={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},f=e("30 seconds of code (String)"),h=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAbsoluteURL</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-z][a-z0-9+.-]*:</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;https://google.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;ftp://www.myserver.net&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isAbsoluteURL</span><span class="token punctuation">(</span><span class="token string">&#39;/foo/bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_2-isanagram" tabindex="-1"><a class="header-anchor" href="#_2-isanagram" aria-hidden="true">#</a> 2. isAnagram</h3><p><strong>FROM</strong></p>',8),v={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},x=e("30 seconds of code (String)"),b=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isAnagram</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str1<span class="token punctuation">,</span> str2</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">normalize</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>\n    str\n      <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^a-z0-9]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token function">normalize</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">normalize</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token string">&#39;iceman&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cinema&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_3-isuppercase-islowercase" tabindex="-1"><a class="header-anchor" href="#_3-isuppercase-islowercase" aria-hidden="true">#</a> 3. isUpperCase/isLowerCase</h3><p><strong>FROM</strong></p>',8),j={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},w=e("30 seconds of code (String)"),_=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isUpperCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str <span class="token operator">===</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">isLowerCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str <span class="token operator">===</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;ABC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;A3@$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isUpperCase</span><span class="token punctuation">(</span><span class="token string">&#39;aB4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;a3@$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">isLowerCase</span><span class="token punctuation">(</span><span class="token string">&#39;Ab4&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_4-palindrome-ÂõûÊñá" tabindex="-1"><a class="header-anchor" href="#_4-palindrome-ÂõûÊñá" aria-hidden="true">#</a> 4. palindromeÔºàÂõûÊñáÔºâ</h3><p><strong>FROM</strong></p>',8),T={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},S=e("30 seconds of code (String)"),L=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">palindrome</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> s <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\\W_]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> s <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token operator">...</span>s<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">palindrome</span><span class="token punctuation">(</span><span class="token string">&#39;taco cat&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_5-yesno" tabindex="-1"><a class="header-anchor" href="#_5-yesno" aria-hidden="true">#</a> 5. yesNo</h3><p><strong>FROM</strong></p>',8),y={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},C=e("30 seconds of code (String)"),A=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">yesNo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> def <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(y|yes)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(n|no)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> def<span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;Y&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;yes&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;No&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">yesNo</span><span class="token punctuation">(</span><span class="token string">&#39;Foo&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h2 id="Ê†ºÂºè" tabindex="-1"><a class="header-anchor" href="#Ê†ºÂºè" aria-hidden="true">#</a> Ê†ºÂºè</h2><h3 id="_1-capitalize-È¶ñÂ≠óÊØçÂ§ßÂÜô" tabindex="-1"><a class="header-anchor" href="#_1-capitalize-È¶ñÂ≠óÊØçÂ§ßÂÜô" aria-hidden="true">#</a> 1. capitalizeÔºàÈ¶ñÂ≠óÊØçÂ§ßÂÜôÔºâ</h3><p><strong>FROM</strong></p>',9),E={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},M=e("30 seconds of code (String)"),N=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">capitalize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>first<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">]</span><span class="token punctuation">,</span> lowerRest <span class="token operator">=</span> <span class="token boolean">false</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  first<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>lowerRest <span class="token operator">?</span> rest<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> rest<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;FooBar&#39;</span>\n<span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token string">&#39;fooBar&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Foobar&#39;</span>\n</code></pre></div><h3 id="_2-expandtabs-Êç¢Ë°åÁ¨¶" tabindex="-1"><a class="header-anchor" href="#_2-expandtabs-Êç¢Ë°åÁ¨¶" aria-hidden="true">#</a> 2. expandTabsÔºàÊç¢Ë°åÁ¨¶Ôºâ</h3><p><strong>FROM</strong></p>',8),I={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},F=e("30 seconds of code (String)"),O=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">expandTabs</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> count</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\t</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">expandTabs</span><span class="token punctuation">(</span><span class="token string">&#39;\\t\\tlorem&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;      lorem&#39;</span>\n</code></pre></div><h3 id="_3-capitalizeeveryword-ÂçïËØçÂ§ßÂÜô" tabindex="-1"><a class="header-anchor" href="#_3-capitalizeeveryword-ÂçïËØçÂ§ßÂÜô" aria-hidden="true">#</a> 3. capitalizeEveryWordÔºàÂçïËØçÂ§ßÂÜôÔºâ</h3><p><strong>FROM</strong></p>',8),U={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},R=e("30 seconds of code (String)"),P=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">capitalizeEveryWord</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\b[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">char</span> <span class="token operator">=&gt;</span> char<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">capitalizeEveryWord</span><span class="token punctuation">(</span><span class="token string">&#39;hello world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Hello World!&#39;</span>\n</code></pre></div><h3 id="_4-fromcamelcase-È©ºÂ≥∞" tabindex="-1"><a class="header-anchor" href="#_4-fromcamelcase-È©ºÂ≥∞" aria-hidden="true">#</a> 4. fromCamelCaseÔºàÈ©ºÂ≥∞Ôºâ</h3><p><strong>FROM</strong></p>',8),z={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},B=e("30 seconds of code (String)"),D=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fromCamelCase <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> separator <span class="token operator">=</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  str\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([a-z\\d])([A-Z])</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span> <span class="token operator">+</span> separator <span class="token operator">+</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">([A-Z]+)([A-Z][a-z\\d]+)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span> <span class="token operator">+</span> separator <span class="token operator">+</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someDatabaseFieldName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some database field name&#39;</span>\n<span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someLabelThatNeedsToBeCamelized&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-label-that-needs-to-be-camelized&#39;</span>\n<span class="token function">fromCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;someJavascriptProperty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_javascript_property&#39;</span>\n</code></pre></div><h3 id="_5-indentstring-Áº©Ëøõ" tabindex="-1"><a class="header-anchor" href="#_5-indentstring-Áº©Ëøõ" aria-hidden="true">#</a> 5. indentStringÔºàÁº©ËøõÔºâ</h3><p><strong>FROM</strong></p>',8),X={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},q=e("30 seconds of code (String)"),H=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> indentString <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token punctuation">,</span> count<span class="token punctuation">,</span> indent <span class="token operator">=</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gm</span></span><span class="token punctuation">,</span> indent<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">indentString</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem\\nIpsum&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;  Lorem\\n  Ipsum&#39;</span>\n<span class="token function">indentString</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem\\nIpsum&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;__Lorem\\n__Ipsum&#39;</span>\n</code></pre></div><h3 id="_6-mapstring-Ëá™ÂÆö‰πâ" tabindex="-1"><a class="header-anchor" href="#_6-mapstring-Ëá™ÂÆö‰πâ" aria-hidden="true">#</a> 6. mapStringÔºàËá™ÂÆö‰πâÔºâ</h3><p><strong>FROM</strong></p>',8),W={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Z=e("30 seconds of code (String)"),$=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">mapString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  str\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">c<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> i<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">mapString</span><span class="token punctuation">(</span><span class="token string">&#39;lorem ipsum&#39;</span><span class="token punctuation">,</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span> c<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;LOREM IPSUM&#39;</span>\n</code></pre></div><h3 id="_7-tocamelcase-È©ºÂ≥∞" tabindex="-1"><a class="header-anchor" href="#_7-tocamelcase-È©ºÂ≥∞" aria-hidden="true">#</a> 7. toCamelCaseÔºàÈ©ºÂ≥∞Ôºâ</h3><p><strong>FROM</strong></p>',8),G={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},V=e("30 seconds of code (String)"),K=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toCamelCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> s <span class="token operator">=</span>\n    str <span class="token operator">&amp;&amp;</span>\n    str\n      <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some_database_field_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someDatabaseFieldName&#39;</span>\n<span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;Some label that needs to be camelized&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someLabelThatNeedsToBeCamelized&#39;</span>\n<span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-javascript-property&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someJavascriptProperty&#39;</span>\n<span class="token function">toCamelCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string with spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;someMixedStringWithSpacesUnderscoresAndHyphens&#39;</span>\n</code></pre></div><h3 id="_8-tokebabcase-Ê®™Á∫ø" tabindex="-1"><a class="header-anchor" href="#_8-tokebabcase-Ê®™Á∫ø" aria-hidden="true">#</a> 8. toKebabCaseÔºàÊ®™Á∫øÔºâ</h3><p><strong>FROM</strong></p>',8),J={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Y=e("30 seconds of code (String)"),Q=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toKebabCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>\n  str <span class="token operator">&amp;&amp;</span>\n  str\n    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;camelCase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;camel-case&#39;</span>\n<span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-text&#39;</span>\n<span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string With spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some-mixed-string-with-spaces-underscores-and-hyphens&#39;</span>\n<span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;AllThe-small Things&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;all-the-small-things&quot;</span>\n<span class="token function">toKebabCase</span><span class="token punctuation">(</span><span class="token string">&#39;IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-xml-and-html&quot;</span>\n</code></pre></div><h3 id="_9-tosnakecase-‰∏ãÂàíÁ∫ø" tabindex="-1"><a class="header-anchor" href="#_9-tosnakecase-‰∏ãÂàíÁ∫ø" aria-hidden="true">#</a> 9. toSnakeCaseÔºà‰∏ãÂàíÁ∫øÔºâ</h3><p><strong>FROM</strong></p>',8),nn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},sn=e("30 seconds of code (String)"),an=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toSnakeCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>\n  str <span class="token operator">&amp;&amp;</span>\n  str\n    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;_&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;camelCase&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;camel_case&#39;</span>\n<span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;some text&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_text&#39;</span>\n<span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string With spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;some_mixed_string_with_spaces_underscores_and_hyphens&#39;</span>\n<span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;AllThe-small Things&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;all_the_small_things&quot;</span>\n<span class="token function">toSnakeCase</span><span class="token punctuation">(</span><span class="token string">&#39;IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html&quot;</span>\n</code></pre></div><h3 id="_10-totitlecase-Ê†áÈ¢ò" tabindex="-1"><a class="header-anchor" href="#_10-totitlecase-Ê†áÈ¢ò" aria-hidden="true">#</a> 10. toTitleCaseÔºàÊ†áÈ¢òÔºâ</h3><p><strong>FROM</strong></p>',8),tn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},pn=e("30 seconds of code (String)"),on=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">toTitleCase</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>\n  str\n    <span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some_database_field_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Database Field Name&#39;</span>\n<span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;Some label that needs to be title-cased&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Label That Needs To Be Title Cased&#39;</span>\n<span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-package-name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Package Name&#39;</span>\n<span class="token function">toTitleCase</span><span class="token punctuation">(</span><span class="token string">&#39;some-mixed_string with spaces_underscores-and-hyphens&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Some Mixed String With Spaces Underscores And Hyphens&#39;</span>\n</code></pre></div><h2 id="Á©∫Ê†º" tabindex="-1"><a class="header-anchor" href="#Á©∫Ê†º" aria-hidden="true">#</a> Á©∫Ê†º</h2><h3 id="_1-containswhitespace" tabindex="-1"><a class="header-anchor" href="#_1-containswhitespace" aria-hidden="true">#</a> 1. containsWhitespace</h3><p><strong>FROM</strong></p>',9),en={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},cn=e("30 seconds of code (String)"),ln=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">containsWhitespace</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;lorem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;lorem ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_2-compactwhitespace" tabindex="-1"><a class="header-anchor" href="#_2-compactwhitespace" aria-hidden="true">#</a> 2. compactWhitespace</h3><p><strong>FROM</strong></p>',8),rn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},un=e("30 seconds of code (String)"),kn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">compactWhitespace</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s{2,}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">compactWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem    Ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Lorem Ipsum&#39;</span>\n<span class="token function">compactWhitespace</span><span class="token punctuation">(</span><span class="token string">&#39;Lorem \\n Ipsum&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Lorem Ipsum&#39;</span>\n</code></pre></div><h2 id="csv" tabindex="-1"><a class="header-anchor" href="#csv" aria-hidden="true">#</a> CSV</h2><h3 id="_1-csvtoarray" tabindex="-1"><a class="header-anchor" href="#_1-csvtoarray" aria-hidden="true">#</a> 1. CSVToArray</h3><p><strong>FROM</strong></p>',9),gn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},dn=e("30 seconds of code (String)"),mn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> CSVToArray <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> omitFirstRow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  data\n    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>omitFirstRow <span class="token operator">?</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;a,b\\nc,d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span>\n<span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;a;b\\nc;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span>\n<span class="token function">CSVToArray</span><span class="token punctuation">(</span><span class="token string">&#39;col1,col2\\na,b\\nc,d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [[&#39;a&#39;,&#39;b&#39;],[&#39;c&#39;,&#39;d&#39;]];</span>\n</code></pre></div><h3 id="_2-csvtojson" tabindex="-1"><a class="header-anchor" href="#_2-csvtojson" aria-hidden="true">#</a> 2. CSVToJSON</h3><p><strong>FROM</strong></p>',8),fn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},hn=e("30 seconds of code (String)"),vn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> CSVToJSON <span class="token operator">=</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> delimiter <span class="token operator">=</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> titles <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> data\n    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> values <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">return</span> titles<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> title<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>title<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">CSVToJSON</span><span class="token punctuation">(</span><span class="token string">&#39;col1,col2\\na,b\\nc,d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{&#39;col1&#39;: &#39;a&#39;, &#39;col2&#39;: &#39;b&#39;}, {&#39;col1&#39;: &#39;c&#39;, &#39;col2&#39;: &#39;d&#39;}];</span>\n<span class="token function">CSVToJSON</span><span class="token punctuation">(</span><span class="token string">&#39;col1;col2\\na;b\\nc;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{&#39;col1&#39;: &#39;a&#39;, &#39;col2&#39;: &#39;b&#39;}, {&#39;col1&#39;: &#39;c&#39;, &#39;col2&#39;: &#39;d&#39;}];</span>\n</code></pre></div><h2 id="ËΩ¨‰πâ" tabindex="-1"><a class="header-anchor" href="#ËΩ¨‰πâ" aria-hidden="true">#</a> ËΩ¨‰πâ</h2><h3 id="_1-escapehtml-html" tabindex="-1"><a class="header-anchor" href="#_1-escapehtml-html" aria-hidden="true">#</a> 1. escapeHTMLÔºàHTMLÔºâ</h3><p><strong>FROM</strong></p>',9),xn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},bn=e("30 seconds of code (String)"),jn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">escapeHTML</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>\n  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[&amp;&lt;&gt;&#39;&quot;]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>\n    <span class="token parameter">tag</span> <span class="token operator">=&gt;</span>\n      <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string">&#39;&amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;amp;&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;&lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;lt;&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;&gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;gt;&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;&#39;&quot;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;#39;&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;&quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;quot;&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">||</span> tag<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">escapeHTML</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Me &amp;amp; you&amp;lt;/a&amp;gt;&#39;</span>\n</code></pre></div><h3 id="_2-unescapehtml-html" tabindex="-1"><a class="header-anchor" href="#_2-unescapehtml-html" aria-hidden="true">#</a> 2. unescapeHTMLÔºàHTMLÔºâ</h3><p><strong>FROM</strong></p>',8),wn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},_n=e("30 seconds of code (String)"),Tn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">unescapeHTML</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span>\n  str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>\n    <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&amp;amp;|&amp;lt;|&amp;gt;|&amp;#39;|&amp;quot;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span>\n    <span class="token parameter">tag</span> <span class="token operator">=&gt;</span>\n      <span class="token punctuation">(</span><span class="token punctuation">{</span>\n        <span class="token string">&#39;&amp;amp;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&amp;&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;&amp;lt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;&amp;gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&gt;&#39;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;&amp;#39;&#39;</span><span class="token operator">:</span> <span class="token string">&quot;&#39;&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&#39;&amp;quot;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&quot;&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token operator">||</span> tag<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">unescapeHTML</span><span class="token punctuation">(</span><span class="token string">&#39;&amp;lt;a href=&amp;quot;#&amp;quot;&amp;gt;Me &amp;amp; you&amp;lt;/a&amp;gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;&lt;a href=&quot;#&quot;&gt;Me &amp; you&lt;/a&gt;&#39;</span>\n</code></pre></div><h3 id="_3-escaperegexp-Ê≠£Âàô" tabindex="-1"><a class="header-anchor" href="#_3-escaperegexp-Ê≠£Âàô" aria-hidden="true">#</a> 3. escapeRegExpÔºàÊ≠£ÂàôÔºâ</h3><p><strong>FROM</strong></p>',8),Sn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Ln=e("30 seconds of code (String)"),yn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">escapeRegExp</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.*+?^${}()|[\\]\\\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;\\\\$&amp;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">escapeRegExp</span><span class="token punctuation">(</span><span class="token string">&#39;(test)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \\\\(test\\\\)</span>\n</code></pre></div><h3 id="_4-striphtmltags-html" tabindex="-1"><a class="header-anchor" href="#_4-striphtmltags-html" aria-hidden="true">#</a> 4. stripHTMLTagsÔºàHTMLÔºâ</h3><p><strong>FROM</strong></p>',8),Cn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},An=e("30 seconds of code (String)"),En=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">stripHTMLTags</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;[^&gt;]*&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">stripHTMLTags</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;p&gt;&lt;em&gt;lorem&lt;/em&gt; &lt;strong&gt;ipsum&lt;/strong&gt;&lt;/p&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;lorem ipsum&#39;</span>\n</code></pre></div><h2 id="Êâ©Â±ï" tabindex="-1"><a class="header-anchor" href="#Êâ©Â±ï" aria-hidden="true">#</a> Êâ©Â±ï</h2><h3 id="_1-extendhex-È¢úËâ≤" tabindex="-1"><a class="header-anchor" href="#_1-extendhex-È¢úËâ≤" aria-hidden="true">#</a> 1. extendHexÔºàÈ¢úËâ≤Ôºâ</h3><p><strong>FROM</strong></p>',9),Mn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Nn=e("30 seconds of code (String)"),In=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">extendHex</span> <span class="token operator">=</span> <span class="token parameter">shortHex</span> <span class="token operator">=&gt;</span>\n  <span class="token string">&#39;#&#39;</span> <span class="token operator">+</span>\n  shortHex\n    <span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>shortHex<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">extendHex</span><span class="token punctuation">(</span><span class="token string">&#39;#03f&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;#0033ff&#39;</span>\n<span class="token function">extendHex</span><span class="token punctuation">(</span><span class="token string">&#39;05a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;#0055aa&#39;</span>\n</code></pre></div><h3 id="_2-hextorgb-rgb" tabindex="-1"><a class="header-anchor" href="#_2-hextorgb-rgb" aria-hidden="true">#</a> 2. hexToRGBÔºàRGBÔºâ</h3><p><strong>FROM</strong></p>',8),Fn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},On=e("30 seconds of code (String)"),Un=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">hexToRGB</span> <span class="token operator">=</span> <span class="token parameter">hex</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> alpha <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    h <span class="token operator">=</span> hex<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>hex<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;#&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span> h <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>h<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">8</span><span class="token punctuation">)</span> alpha <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  h <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token string">&#39;rgb&#39;</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token string">&#39;a&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;(&#39;</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">24</span> <span class="token operator">:</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">0x00ff0000</span> <span class="token operator">:</span> <span class="token number">0x00ff00</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">16</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&amp;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">0x0000ff00</span> <span class="token operator">:</span> <span class="token number">0x0000ff</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token number">8</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token punctuation">(</span>alpha <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>h <span class="token operator">&amp;</span> <span class="token number">0x000000ff</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span>\n    <span class="token string">&#39;)&#39;</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;#27ae60ff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgba(39, 174, 96, 255)&#39;</span>\n<span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;27ae60&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgb(39, 174, 96)&#39;</span>\n<span class="token function">hexToRGB</span><span class="token punctuation">(</span><span class="token string">&#39;#fff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;rgb(255, 255, 255)&#39;</span>\n</code></pre></div><h3 id="_3-rgbtohex-hex" tabindex="-1"><a class="header-anchor" href="#_3-rgbtohex-hex" aria-hidden="true">#</a> 3. RGBToHexÔºàhexÔºâ</h3><p><strong>FROM</strong></p>',8),Rn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Pn=e("30 seconds of code (String)"),zn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">RGBToHex</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>g <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">RGBToHex</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">165</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;ffa501&#39;</span>\n</code></pre></div><h3 id="_4-mask-Âä†ÂØÜ" tabindex="-1"><a class="header-anchor" href="#_4-mask-Âä†ÂØÜ" aria-hidden="true">#</a> 4. maskÔºàÂä†ÂØÜÔºâ</h3><p><strong>FROM</strong></p>',8),Bn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Dn=e("30 seconds of code (String)"),Xn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> mask <span class="token operator">=</span> <span class="token punctuation">(</span>cc<span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> mask <span class="token operator">=</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>cc<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span>length<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;******7890&#39;</span>\n<span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;*******890&#39;</span>\n<span class="token function">mask</span><span class="token punctuation">(</span><span class="token number">1234567890</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">&#39;$&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;$$$$567890&#39;</span>\n</code></pre></div><h3 id="_5-prettybytes-Â≠óËäÇ" tabindex="-1"><a class="header-anchor" href="#_5-prettybytes-Â≠óËäÇ" aria-hidden="true">#</a> 5. prettyBytesÔºàÂ≠óËäÇÔºâ</h3><p><strong>FROM</strong></p>',8),qn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Hn=e("30 seconds of code (String)"),Wn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">prettyBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> precision <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> addSpace <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token constant">UNITS</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;KB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;MB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;GB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;PB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;EB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ZB&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;YB&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token punctuation">(</span>addSpace <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">UNITS</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> exponent <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">log10</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>num <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">UNITS</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> n <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>num <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">**</span> exponent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrecision</span><span class="token punctuation">(</span>precision<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token punctuation">(</span>addSpace <span class="token operator">?</span> <span class="token string">&#39; &#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token constant">UNITS</span><span class="token punctuation">[</span>exponent<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;1 KB&quot;</span>\n<span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">27145424323.5821</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;-27.145 GB&quot;</span>\n<span class="token function">prettyBytes</span><span class="token punctuation">(</span><span class="token number">123456789</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;123MB&quot;</span>\n</code></pre></div><h3 id="_6-removenonascii-ascii" tabindex="-1"><a class="header-anchor" href="#_6-removenonascii-ascii" aria-hidden="true">#</a> 6. removeNonASCIIÔºàASCIIÔºâ</h3><p><strong>FROM</strong></p>',8),Zn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},$n=e("30 seconds of code (String)"),Gn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">removeNonASCII</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\x20-\\x7E]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">removeNonASCII</span><span class="token punctuation">(</span><span class="token string">&#39;√§√Ñ√ß√á√©√â√™lorem-ipsum√∂√ñ√ê√æ√∫√ö&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;lorem-ipsum&#39;</span>\n</code></pre></div><h3 id="_7-splitlines-Êç¢Ë°å" tabindex="-1"><a class="header-anchor" href="#_7-splitlines-Êç¢Ë°å" aria-hidden="true">#</a> 7. splitLinesÔºàÊç¢Ë°åÔºâ</h3><p><strong>FROM</strong></p>',8),Vn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Kn=e("30 seconds of code (String)"),Jn=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">splitLines</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\r?\\n</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">splitLines</span><span class="token punctuation">(</span><span class="token string">&#39;This\\nis a\\nmultiline\\nstring.\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;This&#39;, &#39;is a&#39;, &#39;multiline&#39;, &#39;string.&#39; , &#39;&#39;]</span>\n</code></pre></div><h3 id="_8-stringpermutations-ÊéíÂ∫è" tabindex="-1"><a class="header-anchor" href="#_8-stringpermutations-ÊéíÂ∫è" aria-hidden="true">#</a> 8. stringPermutationsÔºàÊéíÂ∫èÔºâ</h3><p><strong>FROM</strong></p>',8),Yn={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},Qn=e("30 seconds of code (String)"),ns=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">stringPermutations</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token punctuation">[</span>str<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span>str<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> str\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> letter<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n        acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token function">stringPermutations</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=&gt;</span> letter <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">stringPermutations</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;abc&#39;,&#39;acb&#39;,&#39;bac&#39;,&#39;bca&#39;,&#39;cab&#39;,&#39;cba&#39;]</span>\n</code></pre></div><h3 id="_9-truncatestring-ÁúÅÁï•" tabindex="-1"><a class="header-anchor" href="#_9-truncatestring-ÁúÅÁï•" aria-hidden="true">#</a> 9. truncateStringÔºàÁúÅÁï•Ôºâ</h3><p><strong>FROM</strong></p>',8),ss={href:"https://www.30secondsofcode.org/tag/string",target:"_blank",rel:"noopener noreferrer"},as=e("30 seconds of code (String)"),ts=c('<p><strong>DETAILÔºö</strong></p><p>ÊöÇÊó†„ÄÇ</p><p><strong>FUNCTIONÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">truncateString</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">str<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  str<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> num <span class="token operator">?</span> str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">&gt;</span> <span class="token number">3</span> <span class="token operator">?</span> num <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;...&#39;</span> <span class="token operator">:</span> str<span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLESÔºö</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">truncateString</span><span class="token punctuation">(</span><span class="token string">&#39;boomerang&#39;</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;boom...&#39;</span>\n</code></pre></div>',6);l.render=function(e,c){const l=n("OutboundLink");return s(),a(o,null,[r,u,i,t("p",null,[t("a",k,[g,p(l)])]),d,t("p",null,[t("a",m,[f,p(l)])]),h,t("p",null,[t("a",v,[x,p(l)])]),b,t("p",null,[t("a",j,[w,p(l)])]),_,t("p",null,[t("a",T,[S,p(l)])]),L,t("p",null,[t("a",y,[C,p(l)])]),A,t("p",null,[t("a",E,[M,p(l)])]),N,t("p",null,[t("a",I,[F,p(l)])]),O,t("p",null,[t("a",U,[R,p(l)])]),P,t("p",null,[t("a",z,[B,p(l)])]),D,t("p",null,[t("a",X,[q,p(l)])]),H,t("p",null,[t("a",W,[Z,p(l)])]),$,t("p",null,[t("a",G,[V,p(l)])]),K,t("p",null,[t("a",J,[Y,p(l)])]),Q,t("p",null,[t("a",nn,[sn,p(l)])]),an,t("p",null,[t("a",tn,[pn,p(l)])]),on,t("p",null,[t("a",en,[cn,p(l)])]),ln,t("p",null,[t("a",rn,[un,p(l)])]),kn,t("p",null,[t("a",gn,[dn,p(l)])]),mn,t("p",null,[t("a",fn,[hn,p(l)])]),vn,t("p",null,[t("a",xn,[bn,p(l)])]),jn,t("p",null,[t("a",wn,[_n,p(l)])]),Tn,t("p",null,[t("a",Sn,[Ln,p(l)])]),yn,t("p",null,[t("a",Cn,[An,p(l)])]),En,t("p",null,[t("a",Mn,[Nn,p(l)])]),In,t("p",null,[t("a",Fn,[On,p(l)])]),Un,t("p",null,[t("a",Rn,[Pn,p(l)])]),zn,t("p",null,[t("a",Bn,[Dn,p(l)])]),Xn,t("p",null,[t("a",qn,[Hn,p(l)])]),Wn,t("p",null,[t("a",Zn,[$n,p(l)])]),Gn,t("p",null,[t("a",Vn,[Kn,p(l)])]),Jn,t("p",null,[t("a",Yn,[Qn,p(l)])]),ns,t("p",null,[t("a",ss,[as,p(l)])]),ts],64)};export{l as default};
