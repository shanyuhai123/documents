import{r as n,o as s,c as a,a as t,b as p,F as o,d as e,e as c}from"./app.a242ecf4.js";const l={},r=t("h2",{id:"base64",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#base64","aria-hidden":"true"},"#"),e(" base64")],-1),i=t("h3",{id:"_1-btoa-编码",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-btoa-编码","aria-hidden":"true"},"#"),e(" 1. btoa（编码）")],-1),u=t("p",null,[t("strong",null,"FROM")],-1),k={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},g=e("30 seconds of code (Node)"),d=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">btoa</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">btoa</span><span class="token punctuation">(</span><span class="token string">&#39;foobar1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Zm9vYmFyMQ==&#39;</span>\n</code></pre></div><h3 id="_2-atob-解码" tabindex="-1"><a class="header-anchor" href="#_2-atob-解码" aria-hidden="true">#</a> 2. atob（解码）</h3><p><strong>FROM</strong></p>',6),f={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},m=e("30 seconds of code (Node)"),h=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">atob</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token string">&#39;base64&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">atob</span><span class="token punctuation">(</span><span class="token string">&#39;Zm9vYmFyMQ==&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foobar1&#39;1</span>\n</code></pre></div><h2 id="控制台" tabindex="-1"><a class="header-anchor" href="#控制台" aria-hidden="true">#</a> 控制台</h2><h3 id="_1-colorize-色彩" tabindex="-1"><a class="header-anchor" href="#_1-colorize-色彩" aria-hidden="true">#</a> 1. colorize（色彩）</h3><p><strong>FROM</strong></p>',7),v={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},b=e("30 seconds of code (Node)"),j=t("p",null,[t("strong",null,"DETAIL：")],-1),w={href:"https://www.npmjs.com/package/colors",target:"_blank",rel:"noopener noreferrer"},x=e("colors"),y=e(" 更详细。"),_=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">colorize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  black<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[30m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  red<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[31m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  green<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[32m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  yellow<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[33m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  blue<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[34m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  magenta<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[35m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  cyan<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[36m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  white<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[37m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgBlack<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[40m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgRed<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[41m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgGreen<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[42m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgYellow<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[43m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgBlue<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[44m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgMagenta<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[45m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgCyan<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[46m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  bgWhite<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\\x1b[47m</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\x1b[0m</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo&#39; (red letters)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bgBlue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo bar&#39; (blue background)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yellow<span class="token punctuation">,</span> <span class="token function">colorize</span><span class="token punctuation">(</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>green<span class="token punctuation">)</span><span class="token punctuation">.</span>bgWhite<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo bar&#39; (first word in yellow letters, second word in green letters, white background for both)</span>\n</code></pre></div><h2 id="操作" tabindex="-1"><a class="header-anchor" href="#操作" aria-hidden="true">#</a> 操作</h2><h3 id="_1-createdirifnotexists-创建目录" tabindex="-1"><a class="header-anchor" href="#_1-createdirifnotexists-创建目录" aria-hidden="true">#</a> 1. createDirIfNotExists（创建目录）</h3><p><strong>FROM</strong></p>',7),N={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},S=e("30 seconds of code (Node)"),F=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">createDirIfNotExists</span> <span class="token operator">=</span> <span class="token parameter">dir</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">?</span> fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">createDirIfNotExists</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// creates the directory &#39;test&#39;, if it doesn&#39;t exist</span>\n</code></pre></div><h3 id="_2-jsontofile-创建文件" tabindex="-1"><a class="header-anchor" href="#_2-jsontofile-创建文件" aria-hidden="true">#</a> 2. JSONToFile（创建文件）</h3><p><strong>FROM</strong></p>',6),O={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},E=e("30 seconds of code (Node)"),M=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">JSONToFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> filename</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">JSONToFile</span><span class="token punctuation">(</span><span class="token punctuation">{</span> test<span class="token operator">:</span> <span class="token string">&#39;is passed&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&#39;testJsonFile&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// writes the object to &#39;testJsonFile.json&#39;</span>\n</code></pre></div><h3 id="_3-readfilelines-读取文件行" tabindex="-1"><a class="header-anchor" href="#_3-readfilelines-读取文件行" aria-hidden="true">#</a> 3. readFileLines（读取文件行）</h3><p><strong>FROM</strong></p>',6),I={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},T=e("30 seconds of code (Node)"),U=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">readFileLines</span> <span class="token operator">=</span> <span class="token parameter">filename</span> <span class="token operator">=&gt;</span>\n  fs\n    <span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;UTF8&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">/*\ncontents of test.txt :\n  line1\n  line2\n  line3\n  ___________________________\n*/</span>\n<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token function">readFileLines</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;line1&#39;, &#39;line2&#39;, &#39;line3&#39;]</span>\n</code></pre></div><h3 id="_4-untildify-替换波浪号" tabindex="-1"><a class="header-anchor" href="#_4-untildify-替换波浪号" aria-hidden="true">#</a> 4. untildify（替换波浪号）</h3><p><strong>FROM</strong></p>',6),R={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},C=e("30 seconds of code (Node)"),L=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">untildify</span> <span class="token operator">=</span> <span class="token parameter">str</span> <span class="token operator">=&gt;</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^~($|\\/|\\\\)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;os&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">homedir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">$1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">untildify</span><span class="token punctuation">(</span><span class="token string">&#39;~/node&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;/Users/aUser/node&#39;</span>\n</code></pre></div><h2 id="crypto" tabindex="-1"><a class="header-anchor" href="#crypto" aria-hidden="true">#</a> crypto</h2><h3 id="_1-hashnode-哈希" tabindex="-1"><a class="header-anchor" href="#_1-hashnode-哈希" aria-hidden="true">#</a> 1. hashNode（哈希）</h3><p><strong>FROM</strong></p>',7),$={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},A=e("30 seconds of code (Node)"),P=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;crypto&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">hashNode</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>\n  <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span>\n      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n        <span class="token function">resolve</span><span class="token punctuation">(</span>\n          crypto\n            <span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">&#39;sha256&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">&#39;hex&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token number">0</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">hashNode</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> foo<span class="token operator">:</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>console<span class="token punctuation">.</span>log<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;04aa106279f5977f59f9067fa9712afc4aedc6f5862a8defc34552d8c7206393&#39;</span>\n</code></pre></div><h3 id="_2-uuidgeneratornode-uuid" tabindex="-1"><a class="header-anchor" href="#_2-uuidgeneratornode-uuid" aria-hidden="true">#</a> 2. UUIDGeneratorNode（UUID）</h3><p><strong>FROM</strong></p>',6),X={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},D=e("30 seconds of code (Node)"),q=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;crypto&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">UUIDGeneratorNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1e7</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">1e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">4e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">8e3</span> <span class="token operator">+</span> <span class="token operator">-</span><span class="token number">1e11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[018]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token parameter">c</span> <span class="token operator">=&gt;</span>\n    <span class="token punctuation">(</span>c <span class="token operator">^</span> <span class="token punctuation">(</span>crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">15</span> <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>c <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">UUIDGeneratorNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;79c7c136-60ee-40a2-beb2-856f1feabefc&#39;</span>\n</code></pre></div><h2 id="环境" tabindex="-1"><a class="header-anchor" href="#环境" aria-hidden="true">#</a> 环境</h2><h3 id="_1-hasflags" tabindex="-1"><a class="header-anchor" href="#_1-hasflags" aria-hidden="true">#</a> 1. hasFlags</h3><p><strong>FROM</strong></p>',7),z={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},J=e("30 seconds of code (Node)"),B=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">hasFlags</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>flags</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  flags<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">flag</span> <span class="token operator">=&gt;</span> process<span class="token punctuation">.</span>argv<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^-{1,2}</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">?</span> flag <span class="token operator">:</span> <span class="token string">&#39;--&#39;</span> <span class="token operator">+</span> flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token comment">// node myScript.js -s --test --cool=true</span>\n<span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;-s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;--test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cool=true&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token function">hasFlags</span><span class="token punctuation">(</span><span class="token string">&#39;special&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n</code></pre></div><h3 id="_2-istravisci" tabindex="-1"><a class="header-anchor" href="#_2-istravisci" aria-hidden="true">#</a> 2. isTravisCI</h3><p><strong>FROM</strong></p>',6),W={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},G=e("30 seconds of code (Node)"),Y=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isTravisCI</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token string">&#39;TRAVIS&#39;</span> <span class="token keyword">in</span> process<span class="token punctuation">.</span>env <span class="token operator">&amp;&amp;</span> <span class="token string">&#39;CI&#39;</span> <span class="token keyword">in</span> process<span class="token punctuation">.</span>env<span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">isTravisCI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true (if code is running on Travis CI)</span>\n</code></pre></div><h2 id="判断流" tabindex="-1"><a class="header-anchor" href="#判断流" aria-hidden="true">#</a> 判断流</h2><h3 id="_1-isduplexstream" tabindex="-1"><a class="header-anchor" href="#_1-isduplexstream" aria-hidden="true">#</a> 1. isDuplexStream</h3><p><strong>FROM</strong></p>',7),Q={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},Z=e("30 seconds of code (Node)"),H=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isDuplexStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>\n  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_read <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_readableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_write <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_writableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> Stream <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;stream&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">isDuplexStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Stream<span class="token punctuation">.</span>Duplex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_2-isreadablestream" tabindex="-1"><a class="header-anchor" href="#_2-isreadablestream" aria-hidden="true">#</a> 2. isReadableStream</h3><p><strong>FROM</strong></p>',6),V={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},K=e("30 seconds of code (Node)"),nn=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isReadableStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>\n  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_read <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_readableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">isReadableStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_3-isstream" tabindex="-1"><a class="header-anchor" href="#_3-isstream" aria-hidden="true">#</a> 3. isStream</h3><p><strong>FROM</strong></p>',6),sn={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},an=e("30 seconds of code (Node)"),tn=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span> val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">isStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><h3 id="_4-iswritablestream" tabindex="-1"><a class="header-anchor" href="#_4-iswritablestream" aria-hidden="true">#</a> 4. isWritableStream</h3><p><strong>FROM</strong></p>',6),pn={href:"https://www.30secondsofcode.org/tag/node",target:"_blank",rel:"noopener noreferrer"},on=e("30 seconds of code (Node)"),en=c('<p><strong>FUNCTION：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isWritableStream</span> <span class="token operator">=</span> <span class="token parameter">val</span> <span class="token operator">=&gt;</span>\n  val <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>pipe <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_write <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span>\n  <span class="token keyword">typeof</span> val<span class="token punctuation">.</span>_writableState <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p><strong>EXAMPLES：</strong></p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">isWritableStream</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">createWriteStream</span><span class="token punctuation">(</span><span class="token string">&#39;test.txt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div>',4);l.render=function(e,c){const l=n("OutboundLink");return s(),a(o,null,[r,i,u,t("p",null,[t("a",k,[g,p(l)])]),d,t("p",null,[t("a",f,[m,p(l)])]),h,t("p",null,[t("a",v,[b,p(l)])]),j,t("p",null,[t("a",w,[x,p(l)]),y]),_,t("p",null,[t("a",N,[S,p(l)])]),F,t("p",null,[t("a",O,[E,p(l)])]),M,t("p",null,[t("a",I,[T,p(l)])]),U,t("p",null,[t("a",R,[C,p(l)])]),L,t("p",null,[t("a",$,[A,p(l)])]),P,t("p",null,[t("a",X,[D,p(l)])]),q,t("p",null,[t("a",z,[J,p(l)])]),B,t("p",null,[t("a",W,[G,p(l)])]),Y,t("p",null,[t("a",Q,[Z,p(l)])]),H,t("p",null,[t("a",V,[K,p(l)])]),nn,t("p",null,[t("a",sn,[an,p(l)])]),tn,t("p",null,[t("a",pn,[on,p(l)])]),en],64)};export{l as default};
